// Override key bindings by placing them into your key bindings file.
[
    /*

    from: code-insider, 2021-09-05

    */
    {
        "key": "escape escape",
        "command": "workbench.action.exitZenMode",
        "when": "inZenMode"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "editor.closeTestPeek",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
    },
    {
        "key": "shift+escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "ctrl+end",
        "command": "cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+end",
        "command": "cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+down",
        "command": "cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+up",
        "command": "cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "end",
        "command": "cursorEnd",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "shift+end",
        "command": "cursorEndSelect",
        "when": "textInputFocus",
        "args": {
            "sticky": false
        }
    },
    {
        "key": "home",
        "command": "cursorHome",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "left",
        "command": "cursorLeft",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "right",
        "command": "cursorRight",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+home",
        "command": "cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+home",
        "command": "cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "up",
        "command": "cursorUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "backspace",
        "command": "deleteLeft",
        "when": "textInputFocus"
    },
    {
        "key": "delete",
        "command": "deleteRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "editor.action.selectAll"
    },
    {
        "key": "ctrl+l",
        "command": "expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "outdent",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+shift+z",
        "command": "redo"
    },
    {
        "key": "ctrl+y",
        "command": "redo"
    },
    {
        "key": "ctrl+down",
        "command": "scrollLineDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+up",
        "command": "scrollLineUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pagedown",
        "command": "scrollPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pageup",
        "command": "scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+z",
        "command": "undo"
    },
    {
        "key": "shift+down",
        "command": "cursorColumnSelectDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "cursorColumnSelectLeft",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "cursorColumnSelectPageDown",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "cursorColumnSelectPageUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "cursorColumnSelectRight",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "cursorColumnSelectUp",
        "when": "editorColumnSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "escape",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "f12",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "goToNextReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "goToPreviousReference",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "shift+enter",
        "command": "refactorPreview.apply",
        "when": "refactorPreview.enabled && refactorPreview.hasCheckedChanges && focusedView == 'refactorPreview'"
    },
    {
        "key": "alt+enter",
        "command": "testing.editFocusedTest",
        "when": "focusedView == 'workbench.view.testing'"
    },
    {
        "key": "escape",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+f",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "enter",
        "command": "breakpointWidget.action.acceptInput",
        "when": "breakpointWidgetVisible && inBreakpointWidget"
    },
    {
        "key": "shift+escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+u",
        "command": "cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+right",
        "command": "cursorWordEndRight",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+right",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+left",
        "command": "cursorWordLeft",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+shift+left",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus && !accessibilityModeEnabled"
    },
    {
        "key": "ctrl+backspace",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+delete",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+.",
        "command": "editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "shift+alt+a",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+f2",
        "command": "editor.action.changeAll",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+insert",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "shift+delete",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "ctrl+x",
        "command": "editor.action.clipboardCutAction"
    },
    {
        "key": "shift+insert",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+down",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "f7",
        "command": "editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+f3",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f3",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.extensioneditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.extensioneditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "ctrl+f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor"
    },
    {
        "key": "shift+alt+f",
        "command": "editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f12",
        "command": "editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+.",
        "command": "editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+,",
        "command": "editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+]",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "escape",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inlineSuggestionVisible"
    },
    {
        "key": "alt+]",
        "command": "editor.action.inlineSuggest.showNext",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "alt+[",
        "command": "editor.action.inlineSuggest.showPrevious",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "ctrl+alt+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+f2",
        "command": "editor.action.linkedEditing",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+f8",
        "command": "editor.action.marker.prev",
        "when": "editorFocus"
    },
    {
        "key": "shift+f8",
        "command": "editor.action.marker.prevInFiles",
        "when": "editorFocus"
    },
    {
        "key": "alt+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "enter",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+f3",
        "command": "editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+o",
        "command": "editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f12",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+f12",
        "command": "editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f3",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+shift+f3",
        "command": "editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+.",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f12",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k f12",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "editor.action.selectFromAnchorToCursor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+shift+l",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+b",
        "command": "editor.action.setSelectionAnchor",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f1",
        "command": "editor.action.showAccessibilityHelp"
    },
    {
        "key": "shift+f10",
        "command": "editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+h",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+m",
        "command": "editor.action.toggleTabFocusMode"
    },
    {
        "key": "alt+z",
        "command": "editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+shift+space",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "editor.action.webvieweditor.showFind",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "f7",
        "command": "editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "escape",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "escape",
        "command": "editor.debug.action.closeExceptionWidget",
        "when": "exceptionWidgetVisible"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f9",
        "command": "editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "tab",
        "command": "editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+shift+[",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+/",
        "command": "editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+-",
        "command": "editor.foldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "f12",
        "command": "editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+]",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+=",
        "command": "editor.unfoldAllExcept",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "tab",
        "command": "insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "ctrl+enter",
        "command": "interactive.execute",
        "when": "resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "alt+enter",
        "command": "notebook.cell.executeAndInsertBelow",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'markup' || notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0"
    },
    {
        "key": "ctrl+shift+v",
        "command": "notebook.cell.pasteAbove",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "down",
        "command": "notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.formatCell",
        "when": "editorHasDocumentFormattingProvider && editorTextFocus && inCompositeEditor && notebookEditable && !editorReadonly && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+enter",
        "command": "openReferenceToSide",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "enter",
        "command": "repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "search.searchEditor.action.deleteFileResults",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+f",
        "command": "settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+/",
        "command": "toggleExplainMode",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+k f2",
        "command": "togglePeekWidgetFocus",
        "when": "inReferenceSearchEditor || referenceSearchVisible"
    },
    {
        "key": "escape",
        "command": "welcome.goBack",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "escape",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "workbench.action.submitComment",
        "when": "commentEditorFocused"
    },
    {
        "key": "alt+f8",
        "command": "testing.goToNextMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+alt+f8",
        "command": "testing.goToPreviousMessage",
        "when": "editorFocus && testing.isPeekVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.selectAllMatches",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "alt+c",
        "command": "toggleFindCaseSensitive",
        "when": "editorFocus"
    },
    {
        "key": "alt+l",
        "command": "toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+r",
        "command": "toggleFindRegex",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "tab",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
    },
    {
        "key": "shift+tab",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "escape",
        "command": "leaveEditorMessage",
        "when": "messageVisible"
    },
    {
        "key": "shift+escape",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "escape",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
    },
    {
        "key": "shift+escape",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "shift+escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "alt+down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "down",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "up",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "shift+tab",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+enter",
        "command": "acceptAlternativeSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "tab",
        "command": "insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "ctrl+pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "selectNextPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "down",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "pageup",
        "command": "selectPrevPageSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "up",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+alt+space",
        "command": "toggleSuggestionFocus",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "shift+enter",
        "command": "acceptRenameInputWithPreview",
        "when": "config.editor.rename.enablePreview && editorFocus && renameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "escape",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "shift+escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+shift+l",
        "command": "addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+;",
        "command": "breadcrumbs.focus",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "right",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "down",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "shift+escape",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "escape",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "escape",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "shift+alt+c",
        "command": "copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "alt+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "ctrl+f5",
        "command": "debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "f5",
        "command": "debug.openView",
        "when": "!debuggersAvailable"
    },
    {
        "key": "delete",
        "command": "debug.removeBreakpoint",
        "when": "breakpointsFocused && !breakpointInputFocused"
    },
    {
        "key": "delete",
        "command": "debug.removeWatchExpression",
        "when": "watchExpressionsFocused && !expressionSelected"
    },
    {
        "key": "alt+-",
        "command": "decreaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "tab",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && !editorTabMovesFocus && !inlineSuggestionHasIndentation"
    },
    {
        "key": "shift+f9",
        "command": "editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+enter",
        "command": "editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "shift+enter",
        "command": "editor.refocusTypeHierarchy",
        "when": "typeHierarchyVisible"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showIncomingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'outgoingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showOutgoingCalls",
        "when": "callHierarchyVisible && callHierarchyDirection == 'incomingCalls'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showSubtypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'supertypes'"
    },
    {
        "key": "shift+alt+h",
        "command": "editor.showSupertypes",
        "when": "typeHierarchyVisible && typeHierarchyDirection == 'subtypes'"
    },
    {
        "key": "ctrl+enter",
        "command": "explorer.openToSide",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "alt+down",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "history.showNext",
        "when": "historyNavigationForwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+up",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "history.showPrevious",
        "when": "historyNavigationBackwardsEnabled && historyNavigationWidget && !suggestWidgetVisible"
    },
    {
        "key": "alt+=",
        "command": "increaseSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "down",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
    },
    {
        "key": "up",
        "command": "interactive.history.previous",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
    },
    {
        "key": "ctrl+k ctrl+a",
        "command": "keybindings.editor.addKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "escape",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "ctrl+c",
        "command": "keybindings.editor.copyKeybindingEntry",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "enter",
        "command": "keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+down",
        "command": "keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+k",
        "command": "keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "delete",
        "command": "keybindings.editor.removeKeybinding",
        "when": "inKeybindings && keybindingFocus && !inputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+p",
        "command": "keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "escape",
        "command": "list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "right",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "shift+down",
        "command": "list.expandSelectionDown",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "shift+up",
        "command": "list.expandSelectionUp",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "down",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "home",
        "command": "list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "end",
        "command": "list.focusLast",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "pagedown",
        "command": "list.focusPageDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "pageup",
        "command": "list.focusPageUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "up",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "list.scrollDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+up",
        "command": "list.scrollUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+a",
        "command": "list.selectAll",
        "when": "listFocus && listSupportsMultiselect && !inputFocus"
    },
    {
        "key": "space",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "y",
        "command": "notebook.cell.changeToCode",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'markup'"
    },
    {
        "key": "m",
        "command": "notebook.cell.changeToMarkdown",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook' && notebookCellType == 'code'"
    },
    {
        "key": "alt+delete",
        "command": "notebook.cell.clearOutputs",
        "when": "notebookCellEditable && notebookCellHasOutputs && notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "notebook.cell.collapseCellInput",
        "when": "notebookCellListFocused && !inputFocus && !notebookCellInputIsCollapsed"
    },
    {
        "key": "ctrl+k t",
        "command": "notebook.cell.collapseCellOutput",
        "when": "notebookCellHasOutputs && notebookCellListFocused && !inputFocus && !notebookCellOutputIsCollapsed"
    },
    {
        "key": "shift+alt+down",
        "command": "notebook.cell.copyDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+up",
        "command": "notebook.cell.copyUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "delete",
        "command": "notebook.cell.delete",
        "when": "notebookEditable && notebookEditorFocused && !inputFocus"
    },
    {
        "key": "enter",
        "command": "notebook.cell.edit",
        "when": "notebookCellListFocused && notebookEditable && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "notebook.cell.expandCellInput",
        "when": "notebookCellInputIsCollapsed && notebookCellListFocused"
    },
    {
        "key": "ctrl+k t",
        "command": "notebook.cell.expandCellOutput",
        "when": "notebookCellListFocused && notebookCellOutputIsCollapsed"
    },
    {
        "key": "ctrl+down",
        "command": "notebook.cell.focusInOutput",
        "when": "notebookCellHasOutputs && notebookEditorFocused"
    },
    {
        "key": "ctrl+up",
        "command": "notebook.cell.focusOutOutput",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "notebook.cell.insertCodeCellAbove",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.insertCodeCellBelow",
        "when": "notebookCellListFocused && !inputFocus"
    },
    {
        "key": "shift+alt+win+j",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+win+j",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "notebook.cell.moveDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+up",
        "command": "notebook.cell.moveUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+\\",
        "command": "notebook.cell.split",
        "when": "notebookCellEditable && notebookEditable && notebookEditorFocused"
    },
    {
        "key": "ctrl+l",
        "command": "notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+f",
        "command": "notebook.find",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+end",
        "command": "notebook.focusBottom",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+down",
        "command": "notebook.focusNextEditor",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+home",
        "command": "notebook.focusTop",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "left",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+[",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "shift+alt+f",
        "command": "notebook.format",
        "when": "notebookEditable && !editorTextFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "escape",
        "command": "notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
    },
    {
        "key": "right",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+shift+]",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "delete",
        "command": "notification.clear",
        "when": "notificationFocus"
    },
    {
        "key": "left",
        "command": "notification.collapse",
        "when": "notificationFocus"
    },
    {
        "key": "right",
        "command": "notification.expand",
        "when": "notificationFocus"
    },
    {
        "key": "enter",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "space",
        "command": "notification.toggle",
        "when": "notificationFocus"
    },
    {
        "key": "home",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pageup",
        "command": "notifications.focusFirstToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "end",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "pagedown",
        "command": "notifications.focusLastToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "down",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "up",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "ctrl+c",
        "command": "problems.action.copy",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+f",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+down",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "enter",
        "command": "problems.action.open",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "problems.action.openToSide",
        "when": "problemFocus"
    },
    {
        "key": "ctrl+.",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    {
        "key": "space",
        "command": "refactorPreview.toggleCheckedState",
        "when": "listFocus && refactorPreview.enabled && !inputFocus"
    },
    {
        "key": "shift+alt+r",
        "command": "revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "enter",
        "command": "revealReference",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "ctrl+k s",
        "command": "saveAll"
    },
    {
        "key": "ctrl+enter",
        "command": "scm.acceptInput",
        "when": "scmRepository"
    },
    {
        "key": "alt+down",
        "command": "scm.forceViewNextCommit",
        "when": "scmRepository"
    },
    {
        "key": "alt+up",
        "command": "scm.forceViewPreviousCommit",
        "when": "scmRepository"
    },
    {
        "key": "down",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "up",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'"
    },
    {
        "key": "ctrl+c",
        "command": "search.action.copyMatch",
        "when": "fileMatchOrMatchFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "f4",
        "command": "search.action.focusNextSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "search.action.focusPreviousSearchResult",
        "when": "hasSearchResult || inSearchEditor"
    },
    {
        "key": "ctrl+up",
        "command": "search.action.focusSearchFromResults",
        "when": "firstMatchFocus && searchViewletVisible"
    },
    {
        "key": "alt+enter",
        "command": "search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "enter",
        "command": "search.action.openResult",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "search.action.openResultToSide",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "delete",
        "command": "search.action.remove",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "search.action.replace",
        "when": "matchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "search.action.replaceAll",
        "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "search.action.replaceAllInFile",
        "when": "fileMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "search.action.replaceAllInFolder",
        "when": "folderMatchFocus && replaceActive && searchViewletVisible"
    },
    {
        "key": "ctrl+down",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+up",
        "command": "search.focus.previousInputBox",
        "when": "inSearchEditor && inputBoxFocus || inputBoxFocus && searchViewletVisible && !searchInputBoxFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "selectAllSearchEditorMatches",
        "when": "inSearchEditor"
    },
    {
        "key": "escape",
        "command": "settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingControl",
        "when": "settingRowFocus"
    },
    {
        "key": "down",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
    },
    {
        "key": "enter",
        "command": "settings.action.focusSettingsList",
        "when": "inSettingsEditor && settingsTocRowFocus"
    },
    {
        "key": "left",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
    },
    {
        "key": "shift+f9",
        "command": "settings.action.showContextMenu",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+; ctrl+x",
        "command": "testing.cancelRun"
    },
    {
        "key": "ctrl+; ctrl+a",
        "command": "testing.debugAll"
    },
    {
        "key": "ctrl+; ctrl+c",
        "command": "testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+f",
        "command": "testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "testing.debugFailTests"
    },
    {
        "key": "ctrl+; ctrl+l",
        "command": "testing.debugLastRun"
    },
    {
        "key": "ctrl+; m",
        "command": "testing.openOutputPeek"
    },
    {
        "key": "ctrl+; e",
        "command": "testing.reRunFailTests"
    },
    {
        "key": "ctrl+; l",
        "command": "testing.reRunLastRun"
    },
    {
        "key": "ctrl+; a",
        "command": "testing.runAll"
    },
    {
        "key": "ctrl+; c",
        "command": "testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; f",
        "command": "testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+o",
        "command": "testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "testing.toggleInlineTestOutput"
    },
    {
        "key": "alt+c",
        "command": "toggleSearchCaseSensitive",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+c",
        "command": "toggleSearchEditorCaseSensitive",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+l",
        "command": "toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+r",
        "command": "toggleSearchEditorRegex",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+w",
        "command": "toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+p",
        "command": "toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+r",
        "command": "toggleSearchRegex",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+w",
        "command": "toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "ctrl+alt+win+n",
        "command": "welcome.showNewFileEntries"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k w",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+k f",
        "command": "workbench.action.closeFolder",
        "when": "emptyWorkspaceSupport && workbenchState != 'empty'"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "escape",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k u",
        "command": "workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "alt+f4",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+alt+f5",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.debug.disconnect",
        "when": "focusedSessionIsAttach && inDebugMode"
    },
    {
        "key": "ctrl+shift+f5",
        "command": "workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "shift+f11",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "ctrl+k m",
        "command": "workbench.action.editor.changeLanguageMode",
        "when": "!notebookEditorFocused"
    },
    {
        "key": "ctrl+k p",
        "command": "workbench.action.files.copyPathOfActiveFile"
    },
    {
        "key": "ctrl+n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.files.openFile",
        "when": "true"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.files.openFileFolder",
        "when": "isMacNative && openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "workbench.action.files.openFolder",
        "when": "openFolderWorkspaceSupport"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.files.openLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "workbench.action.files.openLocalFolder",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.save"
    },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+k o",
        "command": "workbench.action.files.showOpenedFileInNewWindow",
        "when": "emptyWorkspaceSupport"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+8",
        "command": "workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "ctrl+5",
        "command": "workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "ctrl+1",
        "command": "workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+4",
        "command": "workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "f6",
        "command": "workbench.action.focusNextPart"
    },
    {
        "key": "shift+f6",
        "command": "workbench.action.focusPreviousPart"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+2",
        "command": "workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "ctrl+7",
        "command": "workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "ctrl+0",
        "command": "workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+6",
        "command": "workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "ctrl+3",
        "command": "workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "ctrl+g",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+shift+o",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "escape",
        "command": "workbench.action.hideInterfaceOverview",
        "when": "interfaceOverviewVisible"
    },
    {
        "key": "down",
        "command": "workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "up",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pagedown",
        "command": "workbench.action.interactivePlayground.pageDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "pageup",
        "command": "workbench.action.interactivePlayground.pageUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
    },
    {
        "key": "ctrl+k enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+0",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+k down",
        "command": "workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+alt+1",
        "command": "workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+shift+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "ctrl+pagedown",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+k ctrl+pagedown",
        "command": "workbench.action.nextEditorInGroup"
    },
    {
        "key": "alt+1",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "alt+2",
        "command": "workbench.action.openEditorAtIndex2"
    },
    {
        "key": "alt+3",
        "command": "workbench.action.openEditorAtIndex3"
    },
    {
        "key": "alt+4",
        "command": "workbench.action.openEditorAtIndex4"
    },
    {
        "key": "alt+5",
        "command": "workbench.action.openEditorAtIndex5"
    },
    {
        "key": "alt+6",
        "command": "workbench.action.openEditorAtIndex6"
    },
    {
        "key": "alt+7",
        "command": "workbench.action.openEditorAtIndex7"
    },
    {
        "key": "alt+8",
        "command": "workbench.action.openEditorAtIndex8"
    },
    {
        "key": "alt+9",
        "command": "workbench.action.openEditorAtIndex9"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+,",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "ctrl+shift+u",
        "command": "workbench.action.output.toggleOutput",
        "when": "workbench.panel.output.active"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "workbench.action.pinEditor",
        "when": "!activeEditorIsPinned"
    },
    {
        "key": "ctrl+pageup",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+k ctrl+pageup",
        "command": "workbench.action.previousEditorInGroup"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+j",
        "command": "workbench.action.search.toggleQueryDetails",
        "when": "inSearchEditor || searchViewletFocus"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "f1",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+\\",
        "command": "workbench.action.splitEditor"
    },
    {
        "key": "ctrl+k ctrl+\\",
        "command": "workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "ctrl+shift+b",
        "command": "workbench.action.tasks.build"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
    },
    {
        "key": "ctrl+shift+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "f3",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+enter",
        "command": "workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported"
    },
    {
        "key": "shift+f3",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "enter",
        "command": "workbench.action.terminal.findPrevious",
        "when": "terminalFindFocused && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+pagedown",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+down",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+pageup",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "alt+up",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+\\",
        "command": "workbench.action.terminal.focusTabs",
        "when": "terminalFocus && terminalProcessSupported || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "shift+escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+f4",
        "command": "workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "delete",
        "command": "workbench.action.terminal.killInstance",
        "when": "terminalIsOpen && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.navigationModeExit",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+down",
        "command": "workbench.action.terminal.navigationModeFocusNext",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+up",
        "command": "workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported || accessibilityModeEnabled && terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+`",
        "command": "workbench.action.terminal.new",
        "when": "terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+c",
        "command": "workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "f2",
        "command": "workbench.action.terminal.renameInstance",
        "when": "terminalProcessSupported && terminalTabsFocus && terminalTabsSingularSelection"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "workbench.action.terminal.scrollDown",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+pagedown",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+end",
        "command": "workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+home",
        "command": "workbench.action.terminal.scrollToTop",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "workbench.action.terminal.scrollUp",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+pageup",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus && terminalProcessSupported && !terminalAltBufferActive"
    },
    {
        "key": "ctrl+v",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'",
        "args": {
            "text": "\u0016"
        }
    },
    {
        "key": "ctrl+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u0017"
        }
    },
    {
        "key": "ctrl+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellType == 'cmd'",
        "args": {
            "text": "\b"
        }
    },
    {
        "key": "ctrl+delete",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus",
        "args": {
            "text": "\u001bd"
        }
    },
    {
        "key": "ctrl+shift+5",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+5",
        "command": "workbench.action.terminal.splitInstance",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "alt+c",
        "command": "workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+r",
        "command": "workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+w",
        "command": "workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+`",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "shift+alt+0",
        "command": "workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "f11",
        "command": "workbench.action.toggleFullScreen",
        "when": "!isIOS"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+k z",
        "command": "workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+k shift+enter",
        "command": "workbench.action.unpinEditor",
        "when": "activeEditorIsPinned"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+shift+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+=",
        "command": "workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+-",
        "command": "workbench.action.zoomOut"
    },
    {
        "key": "ctrl+numpad0",
        "command": "workbench.action.zoomReset"
    },
    {
        "key": "ctrl+shift+m",
        "command": "workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "escape",
        "command": "workbench.banner.focusBanner",
        "when": "bannerFocused"
    },
    {
        "key": "down",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "right",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
    },
    {
        "key": "up",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "left",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
    },
    {
        "key": "ctrl+shift+y",
        "command": "workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+k ctrl+m",
        "command": "workbench.extensions.action.showRecommendedKeymapExtensions"
    },
    {
        "key": "ctrl+k c",
        "command": "workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "workbench.files.action.compareWithSaved"
    },
    {
        "key": "ctrl+k e",
        "command": "workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "escape",
        "command": "workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
    },
    {
        "key": "home",
        "command": "workbench.statusBar.focusFirst",
        "when": "statusBarFocused"
    },
    {
        "key": "end",
        "command": "workbench.statusBar.focusLast",
        "when": "statusBarFocused"
    },
    {
        "key": "down",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "right",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
    },
    {
        "key": "up",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "left",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
    },
    {
        "key": "ctrl+shift+d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "ctrl+shift+x",
        "command": "workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },
    {
        "key": "ctrl+shift+g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "ctrl+right",
        "command": "breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "escape",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+k down",
        "command": "views.moveViewDown",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k left",
        "command": "views.moveViewLeft",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k right",
        "command": "views.moveViewRight",
        "when": "focusedView != ''"
    },
    {
        "key": "ctrl+k up",
        "command": "views.moveViewUp",
        "when": "focusedView != ''"
    },
    {
        "key": "f6",
        "command": "workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "f2",
        "command": "debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "f2",
        "command": "debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "space",
        "command": "debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "shift+delete",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "delete",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "escape",
        "command": "editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "editor.closeTypeHierarchy",
        "when": "typeHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "enter",
        "command": "explorer.openAndPassFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "escape",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+c",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+x",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "space",
        "command": "filesExplorer.openFilePreserveFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "home",
        "command": "firstCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "end",
        "command": "lastCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "moveFileToTrash",
        "when": "explorerResourceMoveableToTrash && explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "right",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "left",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "delete",
        "command": "remote.tunnel.closeInline",
        "when": "tunnelCloseable && tunnelViewFocus"
    },
    {
        "key": "ctrl+c",
        "command": "remote.tunnel.copyAddressInline",
        "when": "tunnelViewFocus && tunnelType == 'Detected' && tunnelViewMultiSelection == 'undefined' || tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "f2",
        "command": "remote.tunnel.label",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded' && tunnelViewMultiSelection == 'undefined'"
    },
    {
        "key": "f2",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f5",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f11",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "shift+escape",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenNavigateNextInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+p",
        "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+shift+r",
        "command": "workbench.action.quickOpenNavigatePreviousInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+q",
        "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
        "when": "inQuickOpen && inViewsPicker"
    },
    {
        "key": "ctrl+r",
        "command": "workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.terminal.searchWorkspace",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+i",
        "command": "workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "escape",
        "command": "notifications.hideToasts",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "f10",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+shift+v",
        "command": "markdown.showPreview",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f12",
        "command": "references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "f11",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+k ctrl+n",
        "command": "git.unstageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k v",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "f4",
        "command": "references-view.next",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+f4",
        "command": "references-view.prev",
        "when": "reference-list.hasResult && references-view.canNavigate"
    },
    {
        "key": "shift+alt+h",
        "command": "references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "ctrl+f1",
        "command": "PowerShell.ShowHelp",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+left",
        "command": "codetour.previousTourStep",
        "when": "codetour:inTour && !terminalFocus && !textInputFocus"
    },
    {
        "key": "ctrl+shift+d",
        "command": "data.preview"
    },
    {
        "key": "alt+c p",
        "command": "extension.colorHelper.pick",
        "when": "editorTextFocus"
    },
    {
        "key": "left",
        "command": "gitlens.key.left",
        "when": "gitlens:key:left"
    },
    {
        "key": "ctrl+shift+space",
        "command": "issue.suggestRefresh",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "shift+enter",
        "command": "jupyter.execSelectionInteractive",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.ownsSelection && !findInputFocussed && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "ctrl+b",
        "command": "markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f",
        "command": "markdowntable.format",
        "when": "editorTextFocus && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+m ctrl+m",
        "command": "md-shortcut.showCommandPalette",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "f",
        "command": "notebook.find",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+r l",
        "command": "npm-script.showOutput",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+f9",
        "command": "o.showOutput"
    },
    {
        "key": "alt+win+-",
        "command": "peacock.darken"
    },
    {
        "key": "shift+enter",
        "command": "python.execSelectionInTerminal",
        "when": "editorTextFocus && !findInputFocussed && !jupyter.ownsSelection && !notebookEditorFocused && !replaceInputFocussed && editorLangId == 'python'"
    },
    {
        "key": "ctrl+f10",
        "command": "regexExplainer.regExpEditor"
    },
    {
        "key": "shift+alt+r",
        "command": "remote-wsl.revealInExplorer",
        "when": "editorFocus && remoteName == 'wsl'"
    },
    {
        "key": "shift+alt+e",
        "command": "PowerShell.ExpandAlias",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+right",
        "command": "codetour.nextTourStep",
        "when": "codetour:inTour && !terminalFocus && !textInputFocus"
    },
    {
        "key": "ctrl+alt+s d",
        "command": "data.preview.on.side"
    },
    {
        "key": "alt+c c",
        "command": "extension.colorHelper.convert",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+left",
        "command": "gitlens.key.alt+left",
        "when": "gitlens:key:alt+left"
    },
    {
        "key": "ctrl+s",
        "command": "issue.createIssueFromFile",
        "when": "resourceScheme == 'newIssue' && config.files.autoSave != 'off'"
    },
    {
        "key": "shift+enter",
        "command": "jupyter.runcurrentcelladvance",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "k",
        "command": "list.focusUp",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+i",
        "command": "markdown.extension.editing.toggleItalic",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+t",
        "command": "markdowntable.tsvToTable",
        "when": "editorHasSelection && editorTextFocus && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+b",
        "command": "md-shortcut.toggleBold",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "ctrl+r shift+r",
        "command": "npm-script.run",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+win+=",
        "command": "peacock.lighten"
    },
    {
        "key": "ctrl+r",
        "command": "python.refreshTensorBoard",
        "when": "python.hasActiveTensorBoardSession"
    },
    {
        "key": "shift+alt+s",
        "command": "PowerShell.ShowAdditionalCommands",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+down ctrl+down",
        "command": "codetour.endTour",
        "when": "codetour:inTour && !terminalFocus && !textInputFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "data.preview.remote"
    },
    {
        "key": "ctrl+left",
        "command": "gitlens.key.ctrl+left",
        "when": "gitlens:key:ctrl+left"
    },
    {
        "key": "ctrl+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "j",
        "command": "list.focusDown",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+s",
        "command": "markdown.extension.editing.toggleStrikethrough",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "tab",
        "command": "markdowntable.nextCell",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !inSnippetMode && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+i",
        "command": "md-shortcut.toggleItalic",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "ctrl+r r",
        "command": "npm-script.rerun-last-script",
        "when": "!terminalFocus"
    },
    {
        "key": "f8",
        "command": "PowerShell.RunSelection",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+up ctrl+up",
        "command": "codetour.startTour",
        "when": "!terminalFocus && !textInputFocus"
    },
    {
        "key": "right",
        "command": "gitlens.key.right",
        "when": "gitlens:key:right"
    },
    {
        "key": "alt+enter",
        "command": "jupyter.runcurrentcellandaddbelow",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+]",
        "command": "markdown.extension.editing.toggleHeadingUp",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+tab",
        "command": "markdowntable.prevCell",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !inSnippetMode && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+l",
        "command": "md-shortcut.toggleLink",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "a",
        "command": "notebook.cell.insertCodeCellAboveAndFocusContainer",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+r shift+x",
        "command": "npm-script.terminate-script",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+alt+j",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "alt+right",
        "command": "gitlens.key.alt+right",
        "when": "gitlens:key:alt+right"
    },
    {
        "key": "shift+enter",
        "command": "interactive.execute",
        "when": "resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "ctrl+shift+[",
        "command": "markdown.extension.editing.toggleHeadingDown",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+f",
        "command": "markdowntable.format",
        "when": "editorTextFocus && editorLangId == 'mdx'"
    },
    {
        "key": "ctrl+shift+l",
        "command": "md-shortcut.toggleImage",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "b",
        "command": "notebook.cell.insertCodeCellBelowAndFocusContainer",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+r t",
        "command": "npm-script.test",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+right",
        "command": "gitlens.key.ctrl+right",
        "when": "gitlens:key:ctrl+right"
    },
    {
        "key": "escape",
        "command": "interactive.input.clear",
        "when": "!LinkedEditingInputVisible && !accessibilityHelpWidgetVisible && !breakpointWidgetVisible && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !exceptionWidgetVisible && !findWidgetVisible && !inSnippetMode && !isComposing && !markersNavigationVisible && !notificationToastsVisible && !parameterHintsVisible && !renameInputVisible && !selectionAnchorSet && !suggestWidgetVisible && resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "ctrl+m",
        "command": "markdown.extension.editing.toggleMath",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "shift+alt+t",
        "command": "markdowntable.tsvToTable",
        "when": "editorHasSelection && editorTextFocus && editorLangId == 'mdx'"
    },
    {
        "key": "ctrl+m ctrl+c",
        "command": "md-shortcut.toggleCodeBlock",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "d d",
        "command": "notebook.cell.delete",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+,",
        "command": "gitlens.key.alt+,",
        "when": "gitlens:key:,"
    },
    {
        "key": "ctrl+; s",
        "command": "jupyter.insertCellBelowPosition",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "enter",
        "command": "markdown.extension.onEnterKey",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine'"
    },
    {
        "key": "tab",
        "command": "markdowntable.nextCell",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !inSnippetMode && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible && editorLangId == 'mdx'"
    },
    {
        "key": "ctrl+m ctrl+i",
        "command": "md-shortcut.toggleInlineCode",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "z",
        "command": "undo",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+.",
        "command": "gitlens.key.alt+.",
        "when": "gitlens:key:."
    },
    {
        "key": "ctrl+; b",
        "command": "jupyter.insertCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "markdown.extension.onCtrlEnterKey",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "shift+tab",
        "command": "markdowntable.prevCell",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !inSnippetMode && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible && editorLangId == 'mdx'"
    },
    {
        "key": "ctrl+m ctrl+b",
        "command": "md-shortcut.toggleBullets",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "s",
        "command": "workbench.action.files.save",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "escape",
        "command": "gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+; a",
        "command": "jupyter.insertCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "shift+enter",
        "command": "markdown.extension.onShiftEnterKey",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+m ctrl+1",
        "command": "md-shortcut.toggleNumbers",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "c",
        "command": "notebook.cell.copy",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+/",
        "command": "gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+; x",
        "command": "jupyter.deleteCells",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "tab",
        "command": "markdown.extension.onTabKey",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+m ctrl+x",
        "command": "md-shortcut.toggleCheckboxes",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "x",
        "command": "notebook.cell.cut",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+g /",
        "command": "gitlens.gitCommands",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+shift+alt+[",
        "command": "jupyter.extendSelectionByCellAbove",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "shift+tab",
        "command": "markdown.extension.onShiftTabKey",
        "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus && !hasOtherSuggestions && !hasSnippetCompletions && !inSnippetMode && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "v",
        "command": "notebook.cell.paste",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "alt+b",
        "command": "gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "ctrl+shift+alt+]",
        "command": "jupyter.extendSelectionByCellBelow",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "backspace",
        "command": "markdown.extension.onBackspaceKey",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown' && vim.mode != 'CommandlineInProgress' && vim.mode != 'EasyMotionInputMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'Normal' && vim.mode != 'Replace' && vim.mode != 'SearchInProgressMode' && vim.mode != 'SurroundInputMode' && vim.mode != 'Visual' && vim.mode != 'VisualBlock' && vim.mode != 'VisualLine'"
    },
    {
        "key": "shift+l",
        "command": "notebook.toggleLineNumbers",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+g b",
        "command": "gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "ctrl+; u",
        "command": "jupyter.moveCellsUp",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "alt+up",
        "command": "markdown.extension.onMoveLineUp",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "o",
        "command": "notebook.cell.toggleOutputs",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "shift+alt+b",
        "command": "gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+; d",
        "command": "jupyter.moveCellsDown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "alt+down",
        "command": "markdown.extension.onMoveLineDown",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "l",
        "command": "notebook.cell.toggleLineNumbers",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+g shift+b",
        "command": "gitlens.toggleCodeLens",
        "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+; m",
        "command": "jupyter.changeCellToMarkdown",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "shift+alt+up",
        "command": "markdown.extension.onCopyLineUp",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+-",
        "command": "notebook.cell.split",
        "when": "editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "alt+h",
        "command": "gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+; c",
        "command": "jupyter.changeCellToCode",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "shift+alt+down",
        "command": "markdown.extension.onCopyLineDown",
        "when": "editorTextFocus && !editorReadonly && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+enter",
        "command": "notebook.cell.executeAndFocusContainer",
        "when": "notebookCellListFocused || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+g h",
        "command": "gitlens.showQuickFileHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+alt+]",
        "command": "jupyter.gotoNextCellInFile",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+]",
        "command": "markdown.extension.onIndentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellType == 'code' || editorTextFocus && inputFocus && notebookEditorFocused"
    },
    {
        "key": "shift+alt+h",
        "command": "gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+alt+[",
        "command": "jupyter.gotoPrevCellInFile",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+[",
        "command": "markdown.extension.onOutdentLines",
        "when": "editorTextFocus && !suggestWidgetVisible && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+g shift+h",
        "command": "gitlens.showQuickRepoHistory",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "jupyter.selectCellContents",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "alt+c",
        "command": "markdown.extension.checkTaskList",
        "when": "editorTextFocus && editorLangId == 'markdown'"
    },
    {
        "key": "alt+s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+shift+alt+\\",
        "command": "jupyter.selectCell",
        "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+v",
        "command": "markdown.extension.togglePreview",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+g s",
        "command": "gitlens.showQuickRepoStatus",
        "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+r",
        "command": "jupyter.refreshDataViewer",
        "when": "isWorkspaceTrusted && jupyter.dataViewerActive"
    },
    {
        "key": "ctrl+k v",
        "command": "markdown.extension.closePreviewToSide",
        "when": "markdownPreviewFocus"
    },
    {
        "key": "alt+c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'alternate'"
    },
    {
        "key": "ctrl+shift+alt+enter",
        "command": "jupyter.runAndDebugCell"
    },
    {
        "key": "ctrl+v",
        "command": "markdown.extension.editing.paste",
        "when": "editorHasSelection && editorTextFocus && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+shift+g c",
        "command": "gitlens.showQuickCommitFileDetails",
        "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "f10",
        "command": "jupyter.runByLine",
        "when": "!jupyter.notebookeditor.debuggingInProgress && !jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0"
    },
    {
        "key": "alt+,",
        "command": "gitlens.diffWithPrevious",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "f10",
        "command": "jupyter.runByLineContinue",
        "when": "jupyter.notebookeditor.runByLineInProgress && notebookKernelCount > 0"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "gitlens.diffWithPrevious",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+enter",
        "command": "jupyter.runByLineStop",
        "when": "jupyter.notebookeditor.runByLineInProgress"
    },
    {
        "key": "alt+,",
        "command": "gitlens.diffWithPreviousInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "gitlens.diffWithPreviousInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+,",
        "command": "gitlens.diffWithPreviousInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g ,",
        "command": "gitlens.diffWithPreviousInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+.",
        "command": "gitlens.diffWithNext",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "gitlens.diffWithNext",
        "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+.",
        "command": "gitlens.diffWithNextInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "gitlens.diffWithNextInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+.",
        "command": "gitlens.diffWithNextInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g .",
        "command": "gitlens.diffWithNextInDiffRight",
        "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "shift+alt+.",
        "command": "gitlens.diffWithWorking",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "ctrl+shift+g shift+.",
        "command": "gitlens.diffWithWorking",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "shift+alt+,",
        "command": "gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g shift+,",
        "command": "gitlens.diffLineWithPrevious",
        "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "ctrl+shift+g g",
        "command": "workbench.view.scm",
        "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.branches.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.commits.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.contributors.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.fileHistory.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.lineHistory.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.remotes.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.repositories.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.stashes.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.searchAndCompare.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
    },
    {
        "key": "ctrl+c",
        "command": "gitlens.views.tags.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
    }
]
// Here are other available commands:
// - PowerShell.ClosePanel
// - PowerShell.Debug.Start
// - PowerShell.DebugPesterTestsFromFile
// - PowerShell.DisableISEMode
// - PowerShell.EnableISEMode
// - PowerShell.GenerateBugReport
// - PowerShell.GetPowerShellVersionDetails
// - PowerShell.InsertCommand
// - PowerShell.InvokeRegisteredEditorCommand
// - PowerShell.NewProjectFromTemplate
// - PowerShell.OnlineHelp
// - PowerShell.OpenExamplesFolder
// - PowerShell.OpenInISE
// - PowerShell.OpenLogFolder
// - PowerShell.PositionPanelBottom
// - PowerShell.PositionPanelLeft
// - PowerShell.PowerShellFindModule
// - PowerShell.RefreshCommandsExplorer
// - PowerShell.RegisterExternalExtension
// - PowerShell.RestartSession
// - PowerShell.RunPesterTestsFromFile
// - PowerShell.ShowLogs
// - PowerShell.ShowSessionConsole
// - PowerShell.ShowSessionMenu
// - PowerShell.UnregisterExternalExtension
// - PowerShellCommands.focus
// - PowerShellCommands.removeView
// - PowerShellCommands.resetViewLocation
// - PowerShellCommands.toggleVisibility
// - acceptSelectedSuggestionOnEnter
// - acceptSnippet
// - actions.findWithSelection
// - addRootFolder
// - breadcrumbs.toggle
// - breadcrumbs.toggleFromEditorTitle
// - callStack.collapse
// - changeEditorIndentation
// - cleanSearchEditorState
// - closeReferenceSearchEditor
// - codelens.showLensesInCurrentLine
// - codetour._startTourById
// - codetour.addContentStep
// - codetour.addDirectoryStep
// - codetour.addSelectionStep
// - codetour.addTourStep
// - codetour.changeTourDescription
// - codetour.changeTourRef
// - codetour.changeTourStepLine
// - codetour.changeTourStepTitle
// - codetour.changeTourTitle
// - codetour.deleteTour
// - codetour.deleteTourStep
// - codetour.editTour
// - codetour.editTourAtStep
// - codetour.exportTour
// - codetour.finishTour
// - codetour.hideMarkers
// - codetour.insertCodeSnippet
// - codetour.makeTourPrimary
// - codetour.moveTourStepBack
// - codetour.moveTourStepForward
// - codetour.navigateToStep
// - codetour.openTourFile
// - codetour.openTourUrl
// - codetour.previewTour
// - codetour.recordTour
// - codetour.resetProgress
// - codetour.resetTourProgress
// - codetour.resumeTour
// - codetour.saveTourStep
// - codetour.sendTextToTerminal
// - codetour.showMarkers
// - codetour.startTourByTitle
// - codetour.tours.focus
// - codetour.tours.resetViewLocation
// - codetour.unmakeTourPrimary
// - codetour.viewNotebook
// - columnSelect
// - comments.collapse
// - compareFiles
// - compareSelected
// - compositionEnd
// - compositionStart
// - compositionType
// - configureExtensionsAutoUpdate.all
// - configureExtensionsAutoUpdate.enabled
// - configureExtensionsAutoUpdate.none
// - createCursor
// - csharp.downloadDebugger
// - csharp.listProcess
// - csharp.listRemoteDockerProcess
// - csharp.listRemoteProcess
// - csharp.reportIssue
// - csharp.showDecompilationTerms
// - cursorLineEnd
// - cursorLineEndSelect
// - cursorLineStart
// - cursorLineStartSelect
// - cursorRedo
// - cursorWordAccessibilityLeft
// - cursorWordAccessibilityLeftSelect
// - cursorWordAccessibilityRight
// - cursorWordAccessibilityRightSelect
// - cursorWordEndLeft
// - cursorWordEndLeftSelect
// - cursorWordPartLeft
// - cursorWordPartLeftSelect
// - cursorWordPartRight
// - cursorWordPartRightSelect
// - cursorWordPartStartLeft
// - cursorWordPartStartLeftSelect
// - cursorWordRight
// - cursorWordRightSelect
// - cursorWordStartLeft
// - cursorWordStartLeftSelect
// - cursorWordStartRight
// - cursorWordStartRightSelect
// - cut
// - debug.addConfiguration
// - debug.addToWatchExpressions
// - debug.breakWhenValueChanges
// - debug.breakWhenValueIsAccessed
// - debug.breakWhenValueIsRead
// - debug.collapseRepl
// - debug.copyEvaluatePath
// - debug.copyStackTrace
// - debug.editBreakpoint
// - debug.editFunctionBreakpoint
// - debug.editFunctionBreakpointHitCount
// - debug.enableOrDisableBreakpoint
// - debug.installAdditionalDebuggers
// - debug.jumpToCursor
// - debug.replCopy
// - debug.replPaste
// - debug.setWatchExpression
// - debug.startFromConfig
// - debug.toggleReplIgnoreFocus
// - default:compositionEnd
// - default:compositionStart
// - default:compositionType
// - default:cut
// - default:paste
// - default:redo
// - default:replacePreviousChar
// - default:type
// - default:undo
// - deleteAllLeft
// - deleteAllRight
// - deleteInsideWord
// - deleteWordEndLeft
// - deleteWordEndRight
// - deleteWordPartLeft
// - deleteWordPartRight
// - deleteWordStartLeft
// - deleteWordStartRight
// - detailsContainers.focus
// - detailsContainers.resetViewLocation
// - devVolumes.focus
// - devVolumes.resetViewLocation
// - dockerContainers.focus
// - dockerContainers.removeView
// - dockerContainers.resetViewLocation
// - dockerContainers.toggleVisibility
// - dockerImages.focus
// - dockerImages.removeView
// - dockerImages.resetViewLocation
// - dockerImages.toggleVisibility
// - dockerNetworks.focus
// - dockerNetworks.removeView
// - dockerNetworks.resetViewLocation
// - dockerNetworks.toggleVisibility
// - dockerRegistries.focus
// - dockerRegistries.removeView
// - dockerRegistries.resetViewLocation
// - dockerRegistries.toggleVisibility
// - dockerVolumes.focus
// - dockerVolumes.removeView
// - dockerVolumes.resetViewLocation
// - dockerVolumes.toggleVisibility
// - dotnet.generateAssets
// - dotnet.restore.all
// - dotnet.restore.project
// - dotnet.test.debugTestsInContext
// - dotnet.test.runTestsInContext
// - editor.action.addCursorsToBottom
// - editor.action.addCursorsToTop
// - editor.action.addSelectionToPreviousFindMatch
// - editor.action.clipboardCopyWithSyntaxHighlightingAction
// - editor.action.detectIndentation
// - editor.action.duplicateSelection
// - editor.action.findReferences
// - editor.action.fixAll
// - editor.action.fontZoomIn
// - editor.action.fontZoomOut
// - editor.action.fontZoomReset
// - editor.action.forceRetokenize
// - editor.action.format
// - editor.action.formatChanges
// - editor.action.formatDocument.multiple
// - editor.action.formatSelection.multiple
// - editor.action.goToDeclaration
// - editor.action.goToSelectionAnchor
// - editor.action.goToTypeDefinition
// - editor.action.indentUsingSpaces
// - editor.action.indentUsingTabs
// - editor.action.indentationToSpaces
// - editor.action.indentationToTabs
// - editor.action.inlineSuggest.trigger
// - editor.action.inspectTMScopes
// - editor.action.joinLines
// - editor.action.measureExtHostLatency
// - editor.action.moveCarretLeftAction
// - editor.action.moveCarretRightAction
// - editor.action.moveSelectionToPreviousFindMatch
// - editor.action.nextCommentThreadAction
// - editor.action.openDeclarationToTheSide
// - editor.action.openLink
// - editor.action.peekDeclaration
// - editor.action.peekTypeDefinition
// - editor.action.previewDeclaration
// - editor.action.referenceSearch.trigger
// - editor.action.reindentlines
// - editor.action.reindentselectedlines
// - editor.action.resetSuggestSize
// - editor.action.revealDeclaration
// - editor.action.selectToBracket
// - editor.action.showDefinitionPreviewHover
// - editor.action.showReferences
// - editor.action.showSnippets
// - editor.action.smartSelect.grow
// - editor.action.sortLinesAscending
// - editor.action.sortLinesDescending
// - editor.action.sourceAction
// - editor.action.startDebugTextMate
// - editor.action.toggleColumnSelection
// - editor.action.toggleMinimap
// - editor.action.toggleRenderControlCharacter
// - editor.action.toggleRenderWhitespace
// - editor.action.transformToLowercase
// - editor.action.transformToSnakecase
// - editor.action.transformToTitlecase
// - editor.action.transformToUppercase
// - editor.action.transpose
// - editor.action.transposeLetters
// - editor.action.wordHighlight.trigger
// - editor.debug.action.addLogPoint
// - editor.debug.action.conditionalBreakpoint
// - editor.debug.action.goToNextBreakpoint
// - editor.debug.action.goToPreviousBreakpoint
// - editor.debug.action.openDisassemblyView
// - editor.debug.action.runToCursor
// - editor.debug.action.selectionToRepl
// - editor.debug.action.selectionToWatch
// - editor.debug.action.stepIntoTargets
// - editor.emmet.action.balanceIn
// - editor.emmet.action.balanceOut
// - editor.emmet.action.decrementNumberByOne
// - editor.emmet.action.decrementNumberByOneTenth
// - editor.emmet.action.decrementNumberByTen
// - editor.emmet.action.evaluateMathExpression
// - editor.emmet.action.incrementNumberByOne
// - editor.emmet.action.incrementNumberByOneTenth
// - editor.emmet.action.incrementNumberByTen
// - editor.emmet.action.matchTag
// - editor.emmet.action.mergeLines
// - editor.emmet.action.nextEditPoint
// - editor.emmet.action.prevEditPoint
// - editor.emmet.action.reflectCSSValue
// - editor.emmet.action.removeTag
// - editor.emmet.action.selectNextItem
// - editor.emmet.action.selectPrevItem
// - editor.emmet.action.splitJoinTag
// - editor.emmet.action.toggleComment
// - editor.emmet.action.updateImageSize
// - editor.emmet.action.updateTag
// - editor.emmet.action.wrapWithAbbreviation
// - editor.gotoNextFold
// - editor.gotoParentFold
// - editor.gotoPreviousFold
// - editor.showTypeHierarchy
// - emmet.expandAbbreviation
// - errorLens.copyProblemMessage
// - errorLens.revealLine
// - errorLens.statusBarCommand
// - errorLens.toggle
// - errorLens.toggleError
// - errorLens.toggleHint
// - errorLens.toggleInfo
// - errorLens.toggleWarning
// - explorer.download
// - explorer.newFile
// - explorer.newFolder
// - explorer.openWith
// - explorer.upload
// - extension.bisect.next
// - extension.bisect.start
// - extension.bisect.stop
// - extension.firefox.addFilePathMapping
// - extension.firefox.addNullFilePathMapping
// - extension.firefox.addNullPathMapping
// - extension.firefox.addPathMapping
// - extension.firefox.disablePopupAutohide
// - extension.firefox.enablePopupAutohide
// - extension.firefox.loadedScripts.focus
// - extension.firefox.loadedScripts.resetViewLocation
// - extension.firefox.openScript
// - extension.firefox.pathMappingWizard
// - extension.firefox.reloadAddon
// - extension.firefox.togglePopupAutohide
// - extension.firefox.toggleSkippingFile
// - extension.js-debug.addCustomBreakpoints
// - extension.js-debug.autoAttachToProcess
// - extension.js-debug.clearAutoAttachVariables
// - extension.js-debug.createDebuggerTerminal
// - extension.js-debug.createDiagnostics
// - extension.js-debug.debugLink
// - extension.js-debug.npmScript
// - extension.js-debug.openEdgeDevTools
// - extension.js-debug.pickNodeProcess
// - extension.js-debug.prettyPrint
// - extension.js-debug.removeAllCustomBreakpoints
// - extension.js-debug.removeCustomBreakpoint
// - extension.js-debug.requestCDPProxy
// - extension.js-debug.revealPage
// - extension.js-debug.setAutoAttachVariables
// - extension.js-debug.startProfile
// - extension.js-debug.stopProfile
// - extension.js-debug.toggleSkippingFile
// - extension.jsProfileVisualizer.table.clearCodeLenses
// - extension.node-debug.toggleAutoAttach
// - extension.open
// - extension.pwa-node-debug.attachNodeProcess
// - extension.showRazorCSharpWindow
// - extension.showRazorHtmlWindow
// - extensions.actions.searchByCategory.Azure
// - extensions.actions.searchByCategory.Data Science
// - extensions.actions.searchByCategory.Debuggers
// - extensions.actions.searchByCategory.Education
// - extensions.actions.searchByCategory.Extension Packs
// - extensions.actions.searchByCategory.Formatters
// - extensions.actions.searchByCategory.Keymaps
// - extensions.actions.searchByCategory.Language Packs
// - extensions.actions.searchByCategory.Linters
// - extensions.actions.searchByCategory.Machine Learning
// - extensions.actions.searchByCategory.Notebooks
// - extensions.actions.searchByCategory.Other
// - extensions.actions.searchByCategory.Programming Languages
// - extensions.actions.searchByCategory.SCM Providers
// - extensions.actions.searchByCategory.Snippets
// - extensions.actions.searchByCategory.Testing
// - extensions.actions.searchByCategory.Themes
// - extensions.actions.searchByCategory.Visualization
// - extensions.filter.featured
// - extensions.recommendedList.focus
// - extensions.recommendedList.resetViewLocation
// - extensions.sort.installs
// - extensions.sort.name
// - extensions.sort.publishedDate
// - extensions.sort.rating
// - files.openTimeline
// - files.participants.resetChoice
// - filesExplorer.findInWorkspace
// - fileutils.copyFileName
// - fileutils.duplicateFile
// - fileutils.moveFile
// - fileutils.newFile
// - fileutils.newFileAtRoot
// - fileutils.newFolder
// - fileutils.newFolderAtRoot
// - fileutils.removeFile
// - fileutils.renameFile
// - getContextKeyInfo
// - gistpad._createWikiPage
// - gistpad.addDirectoryFile
// - gistpad.addFile
// - gistpad.addFileToGist
// - gistpad.addGistComment
// - gistpad.addRepositoryComment
// - gistpad.addRepositoryFile
// - gistpad.addSelectionToGist
// - gistpad.addWikiPage
// - gistpad.changeGistDescription
// - gistpad.clearScratchNotes
// - gistpad.cloneManagedRepository
// - gistpad.cloneRepository
// - gistpad.closeRepository
// - gistpad.copyFileContents
// - gistpad.copyFileUrl
// - gistpad.copyGistPadUrl
// - gistpad.copyGistUrl
// - gistpad.copyRepositoryFileUrl
// - gistpad.copyRepositoryUrl
// - gistpad.deleteDirectory
// - gistpad.deleteFile
// - gistpad.deleteGist
// - gistpad.deleteGistComment
// - gistpad.deleteRepository
// - gistpad.deleteRepositoryBranch
// - gistpad.deleteRepositoryComment
// - gistpad.deleteRepositoryDirectory
// - gistpad.deleteRepositoryFile
// - gistpad.duplicateDirectory
// - gistpad.duplicateFile
// - gistpad.duplicateGist
// - gistpad.duplicateRepositoryFile
// - gistpad.editGistComment
// - gistpad.editRepositoryComment
// - gistpad.exportGistToCodePen
// - gistpad.exportToRepo
// - gistpad.exportTour
// - gistpad.followUser
// - gistpad.forkGist
// - gistpad.gists.focus
// - gistpad.gists.removeView
// - gistpad.gists.resetViewLocation
// - gistpad.gists.toggleVisibility
// - gistpad.groupGists
// - gistpad.hideScratchNotes
// - gistpad.mergeRepositoryBranch
// - gistpad.newGistLog
// - gistpad.newPublicGist
// - gistpad.newScratchNote
// - gistpad.newSecretGist
// - gistpad.newSecretSwing
// - gistpad.newSwing
// - gistpad.openGist
// - gistpad.openGistFile
// - gistpad.openGistInBlocks
// - gistpad.openGistInBrowser
// - gistpad.openGistInGistLog
// - gistpad.openGistInNbViewer
// - gistpad.openGistLogFeed
// - gistpad.openGistWorkspace
// - gistpad.openProfile
// - gistpad.openRepository
// - gistpad.openRepositoryFileInBrowser
// - gistpad.openRepositoryInBrowser
// - gistpad.openRepositorySwing
// - gistpad.openTodayPage
// - gistpad.pasteGistFile
// - gistpad.pasteImage
// - gistpad.recordRepoCodeTour
// - gistpad.refreshGists
// - gistpad.refreshRepositories
// - gistpad.refreshShowcase
// - gistpad.renameDirectory
// - gistpad.renameFile
// - gistpad.renameRepositoryDirectory
// - gistpad.renameRepositoryFile
// - gistpad.replyGistComment
// - gistpad.repos.focus
// - gistpad.repos.removeView
// - gistpad.repos.resetViewLocation
// - gistpad.repos.toggleVisibility
// - gistpad.saveGistComment
// - gistpad.saveRepositoryComment
// - gistpad.showcase.focus
// - gistpad.showcase.resetViewLocation
// - gistpad.signIn
// - gistpad.sortGistsAlphabetically
// - gistpad.sortGistsByUpdatedTime
// - gistpad.starGist
// - gistpad.starredGists
// - gistpad.startRepoCodeTour
// - gistpad.submitShowcaseEntry
// - gistpad.switchRepositoryBranch
// - gistpad.unfollowUser
// - gistpad.ungroupGists
// - gistpad.unstarGist
// - gistpad.uploadFileToDirectory
// - gistpad.uploadFileToGist
// - gistpad.uploadRepositoryFile
// - gistpad.viewForks
// - git-graph.addGitRepository
// - git-graph.clearAvatarCache
// - git-graph.endAllWorkspaceCodeReviews
// - git-graph.endSpecificWorkspaceCodeReview
// - git-graph.fetch
// - git-graph.openFile
// - git-graph.removeGitRepository
// - git-graph.resumeWorkspaceCodeReview
// - git-graph.version
// - git-graph.view
// - git._syncAll
// - git.addRemote
// - git.api.getRemoteSources
// - git.api.getRepositories
// - git.api.getRepositoryState
// - git.branch
// - git.branchFrom
// - git.checkout
// - git.checkoutDetached
// - git.cherryPick
// - git.clean
// - git.cleanAll
// - git.cleanAllTracked
// - git.cleanAllUntracked
// - git.clone
// - git.cloneRecursive
// - git.close
// - git.commit
// - git.commitAll
// - git.commitAllAmend
// - git.commitAllAmendNoVerify
// - git.commitAllNoVerify
// - git.commitAllSigned
// - git.commitAllSignedNoVerify
// - git.commitEmpty
// - git.commitEmptyNoVerify
// - git.commitNoVerify
// - git.commitStaged
// - git.commitStagedAmend
// - git.commitStagedAmendNoVerify
// - git.commitStagedNoVerify
// - git.commitStagedSigned
// - git.commitStagedSignedNoVerify
// - git.createTag
// - git.deleteBranch
// - git.deleteTag
// - git.fetch
// - git.fetchAll
// - git.fetchPrune
// - git.ignore
// - git.init
// - git.merge
// - git.openAllChanges
// - git.openChange
// - git.openFile
// - git.openFile2
// - git.openHEADFile
// - git.openRepository
// - git.openResource
// - git.publish
// - git.pull
// - git.pullFrom
// - git.pullRebase
// - git.push
// - git.pushForce
// - git.pushTags
// - git.pushTo
// - git.pushToForce
// - git.pushWithTags
// - git.pushWithTagsForce
// - git.rebase
// - git.rebaseAbort
// - git.refresh
// - git.removeRemote
// - git.rename
// - git.renameBranch
// - git.restoreCommitTemplate
// - git.revealInExplorer
// - git.revertChange
// - git.setLogLevel
// - git.showOutput
// - git.stage
// - git.stageAll
// - git.stageAllMerge
// - git.stageAllTracked
// - git.stageAllUntracked
// - git.stageChange
// - git.stash
// - git.stashApply
// - git.stashApplyLatest
// - git.stashDrop
// - git.stashIncludeUntracked
// - git.stashPop
// - git.stashPopLatest
// - git.sync
// - git.syncRebase
// - git.timeline.compareWithSelected
// - git.timeline.copyCommitId
// - git.timeline.copyCommitMessage
// - git.timeline.openDiff
// - git.timeline.selectForCompare
// - git.undoCommit
// - git.unstage
// - git.unstageAll
// - gitdoc.disable
// - gitdoc.enable
// - gitdoc.restoreVersion
// - gitdoc.squashVersions
// - gitdoc.undoVersion
// - github.api.preloadPullRequest
// - github.provide-manually
// - github.publish
// - github.vscode-pull-request-githubsignIn
// - github:activePullRequest.focus
// - github:activePullRequest.resetViewLocation
// - github:activePullRequest:welcome.focus
// - github:activePullRequest:welcome.resetViewLocation
// - github:compareChanges.focus
// - github:compareChanges.resetViewLocation
// - github:createPullRequest.focus
// - github:createPullRequest.resetViewLocation
// - github:login.focus
// - github:login.resetViewLocation
// - gitlens.action.createPullRequest
// - gitlens.action.hover.commands
// - gitlens.action.openPullRequest
// - gitlens.addAuthors
// - gitlens.browseRepoAtRevision
// - gitlens.browseRepoAtRevisionInNewWindow
// - gitlens.browseRepoBeforeRevision
// - gitlens.browseRepoBeforeRevisionInNewWindow
// - gitlens.clearFileAnnotations
// - gitlens.closeUnchangedFiles
// - gitlens.closeUpdatesView
// - gitlens.closeWelcomeView
// - gitlens.compareHeadWith
// - gitlens.compareWith
// - gitlens.compareWorkingWith
// - gitlens.computingFileAnnotations
// - gitlens.connectRemoteProvider
// - gitlens.copyCurrentBranch
// - gitlens.copyMessageToClipboard
// - gitlens.copyRemoteBranchUrl
// - gitlens.copyRemoteBranchesUrl
// - gitlens.copyRemoteCommitUrl
// - gitlens.copyRemoteComparisonUrl
// - gitlens.copyRemoteFileUrlFrom
// - gitlens.copyRemoteFileUrlToClipboard
// - gitlens.copyRemoteFileUrlWithoutRange
// - gitlens.copyRemotePullRequestUrl
// - gitlens.copyRemoteRepositoryUrl
// - gitlens.copyShaToClipboard
// - gitlens.createPullRequestOnRemote
// - gitlens.diffDirectory
// - gitlens.diffDirectoryWithHead
// - gitlens.diffHeadWith
// - gitlens.diffLineWithWorking
// - gitlens.diffWith
// - gitlens.diffWithRevision
// - gitlens.diffWithRevisionFrom
// - gitlens.diffWithWorkingInDiffLeft
// - gitlens.diffWithWorkingInDiffRight
// - gitlens.diffWorkingWith
// - gitlens.disableDebugLogging
// - gitlens.disableRebaseEditor
// - gitlens.disconnectRemoteProvider
// - gitlens.enableDebugLogging
// - gitlens.enableRebaseEditor
// - gitlens.externalDiff
// - gitlens.externalDiffAll
// - gitlens.fetchRepositories
// - gitlens.gitCommands.branch
// - gitlens.gitCommands.cherryPick
// - gitlens.gitCommands.merge
// - gitlens.gitCommands.rebase
// - gitlens.gitCommands.reset
// - gitlens.gitCommands.revert
// - gitlens.gitCommands.switch
// - gitlens.gitCommands.tag
// - gitlens.inviteToLiveShare
// - gitlens.openAssociatedPullRequestOnRemote
// - gitlens.openBlamePriorToChange
// - gitlens.openBranchInRemote
// - gitlens.openBranchOnRemote
// - gitlens.openBranchesInRemote
// - gitlens.openBranchesOnRemote
// - gitlens.openChangedFiles
// - gitlens.openCommitInRemote
// - gitlens.openCommitOnRemote
// - gitlens.openComparisonOnRemote
// - gitlens.openFileFromRemote
// - gitlens.openFileHistory
// - gitlens.openFileInRemote
// - gitlens.openFileOnRemote
// - gitlens.openFileOnRemoteFrom
// - gitlens.openFileRevision
// - gitlens.openFileRevisionFrom
// - gitlens.openFolderHistory
// - gitlens.openInRemote
// - gitlens.openOnRemote
// - gitlens.openPullRequestOnRemote
// - gitlens.openRepoInRemote
// - gitlens.openRepoOnRemote
// - gitlens.openRevisionFile
// - gitlens.openRevisionFileInDiffLeft
// - gitlens.openRevisionFileInDiffRight
// - gitlens.openWorkingFile
// - gitlens.openWorkingFileInDiffLeft
// - gitlens.openWorkingFileInDiffRight
// - gitlens.pullRepositories
// - gitlens.pushRepositories
// - gitlens.quickOpenFileHistory
// - gitlens.refreshHover
// - gitlens.resetAvatarCache
// - gitlens.resetSuppressedWarnings
// - gitlens.revealCommitInView
// - gitlens.setViewsLayout
// - gitlens.showBranchesView
// - gitlens.showCommitInView
// - gitlens.showCommitSearch
// - gitlens.showCommitsInView
// - gitlens.showCommitsView
// - gitlens.showContributorsView
// - gitlens.showFileHistoryInView
// - gitlens.showFileHistoryView
// - gitlens.showLastQuickPick
// - gitlens.showLineHistoryView
// - gitlens.showQuickBranchHistory
// - gitlens.showQuickCommitDetails
// - gitlens.showQuickRevisionDetails
// - gitlens.showQuickRevisionDetailsInDiffLeft
// - gitlens.showQuickRevisionDetailsInDiffRight
// - gitlens.showQuickStashList
// - gitlens.showRemotesView
// - gitlens.showRepositoriesView
// - gitlens.showSearchAndCompareView
// - gitlens.showSettingsPage
// - gitlens.showSettingsPage#branches-view
// - gitlens.showSettingsPage#commits-view
// - gitlens.showSettingsPage#contributors-view
// - gitlens.showSettingsPage#file-history-view
// - gitlens.showSettingsPage#line-history-view
// - gitlens.showSettingsPage#remotes-view
// - gitlens.showSettingsPage#repositories-view
// - gitlens.showSettingsPage#search-compare-view
// - gitlens.showSettingsPage#stashes-view
// - gitlens.showSettingsPage#tags-view
// - gitlens.showSettingsPage#views
// - gitlens.showStashesView
// - gitlens.showTagsView
// - gitlens.showWelcomePage
// - gitlens.showWelcomeView
// - gitlens.stashApply
// - gitlens.stashSave
// - gitlens.stashSaveFiles
// - gitlens.supportGitLens
// - gitlens.switchMode
// - gitlens.toggleFileBlameInDiffLeft
// - gitlens.toggleFileBlameInDiffRight
// - gitlens.toggleFileChanges
// - gitlens.toggleFileChangesOnly
// - gitlens.toggleFileHeatmap
// - gitlens.toggleFileHeatmapInDiffLeft
// - gitlens.toggleFileHeatmapInDiffRight
// - gitlens.toggleLineBlame
// - gitlens.toggleReviewMode
// - gitlens.toggleZenMode
// - gitlens.views.addAuthor
// - gitlens.views.addAuthors
// - gitlens.views.addRemote
// - gitlens.views.applyChanges
// - gitlens.views.branches.focus
// - gitlens.views.branches.refresh
// - gitlens.views.branches.resetViewLocation
// - gitlens.views.branches.setFilesLayoutToAuto
// - gitlens.views.branches.setFilesLayoutToList
// - gitlens.views.branches.setFilesLayoutToTree
// - gitlens.views.branches.setLayoutToList
// - gitlens.views.branches.setLayoutToTree
// - gitlens.views.branches.setShowAvatarsOff
// - gitlens.views.branches.setShowAvatarsOn
// - gitlens.views.branches.setShowBranchComparisonOff
// - gitlens.views.branches.setShowBranchComparisonOn
// - gitlens.views.branches.setShowBranchPullRequestOff
// - gitlens.views.branches.setShowBranchPullRequestOn
// - gitlens.views.browseRepoAtRevision
// - gitlens.views.browseRepoAtRevisionInNewWindow
// - gitlens.views.browseRepoBeforeRevision
// - gitlens.views.browseRepoBeforeRevisionInNewWindow
// - gitlens.views.cherryPick
// - gitlens.views.clearNode
// - gitlens.views.closeRepository
// - gitlens.views.commits.focus
// - gitlens.views.commits.refresh
// - gitlens.views.commits.resetViewLocation
// - gitlens.views.commits.setFilesLayoutToAuto
// - gitlens.views.commits.setFilesLayoutToList
// - gitlens.views.commits.setFilesLayoutToTree
// - gitlens.views.commits.setMyCommitsOnlyOff
// - gitlens.views.commits.setMyCommitsOnlyOn
// - gitlens.views.commits.setShowAvatarsOff
// - gitlens.views.commits.setShowAvatarsOn
// - gitlens.views.commits.setShowBranchComparisonOff
// - gitlens.views.commits.setShowBranchComparisonOn
// - gitlens.views.commits.setShowBranchPullRequestOff
// - gitlens.views.commits.setShowBranchPullRequestOn
// - gitlens.views.compareAncestryWithWorking
// - gitlens.views.compareFileWithSelected
// - gitlens.views.compareWithHead
// - gitlens.views.compareWithSelected
// - gitlens.views.compareWithUpstream
// - gitlens.views.compareWithWorking
// - gitlens.views.contributors.focus
// - gitlens.views.contributors.refresh
// - gitlens.views.contributors.resetViewLocation
// - gitlens.views.contributors.setFilesLayoutToAuto
// - gitlens.views.contributors.setFilesLayoutToList
// - gitlens.views.contributors.setFilesLayoutToTree
// - gitlens.views.contributors.setShowAllBranchesOff
// - gitlens.views.contributors.setShowAllBranchesOn
// - gitlens.views.contributors.setShowAvatarsOff
// - gitlens.views.contributors.setShowAvatarsOn
// - gitlens.views.contributors.setShowStatisticsOff
// - gitlens.views.contributors.setShowStatisticsOn
// - gitlens.views.copy
// - gitlens.views.createBranch
// - gitlens.views.createPullRequest
// - gitlens.views.createTag
// - gitlens.views.deleteBranch
// - gitlens.views.deleteStash
// - gitlens.views.deleteTag
// - gitlens.views.dismissNode
// - gitlens.views.editNode
// - gitlens.views.expandNode
// - gitlens.views.fetch
// - gitlens.views.fileHistory.changeBase
// - gitlens.views.fileHistory.focus
// - gitlens.views.fileHistory.refresh
// - gitlens.views.fileHistory.resetViewLocation
// - gitlens.views.fileHistory.setCursorFollowingOff
// - gitlens.views.fileHistory.setCursorFollowingOn
// - gitlens.views.fileHistory.setEditorFollowingOff
// - gitlens.views.fileHistory.setEditorFollowingOn
// - gitlens.views.fileHistory.setRenameFollowingOff
// - gitlens.views.fileHistory.setRenameFollowingOn
// - gitlens.views.fileHistory.setShowAllBranchesOff
// - gitlens.views.fileHistory.setShowAllBranchesOn
// - gitlens.views.fileHistory.setShowAvatarsOff
// - gitlens.views.fileHistory.setShowAvatarsOn
// - gitlens.views.highlightChanges
// - gitlens.views.highlightRevisionChanges
// - gitlens.views.lineHistory.changeBase
// - gitlens.views.lineHistory.focus
// - gitlens.views.lineHistory.refresh
// - gitlens.views.lineHistory.resetViewLocation
// - gitlens.views.lineHistory.setEditorFollowingOff
// - gitlens.views.lineHistory.setEditorFollowingOn
// - gitlens.views.lineHistory.setShowAvatarsOff
// - gitlens.views.lineHistory.setShowAvatarsOn
// - gitlens.views.loadAllChildren
// - gitlens.views.loadMoreChildren
// - gitlens.views.mergeBranchInto
// - gitlens.views.openChangedFileDiffs
// - gitlens.views.openChangedFileDiffsWithWorking
// - gitlens.views.openChangedFileRevisions
// - gitlens.views.openChangedFiles
// - gitlens.views.openChanges
// - gitlens.views.openChangesWithWorking
// - gitlens.views.openDirectoryDiff
// - gitlens.views.openDirectoryDiffWithWorking
// - gitlens.views.openFile
// - gitlens.views.openFileRevision
// - gitlens.views.openInTerminal
// - gitlens.views.openPreviousChangesWithWorking
// - gitlens.views.openPullRequest
// - gitlens.views.pruneRemote
// - gitlens.views.publishBranch
// - gitlens.views.publishRepository
// - gitlens.views.pull
// - gitlens.views.push
// - gitlens.views.pushToCommit
// - gitlens.views.pushWithForce
// - gitlens.views.rebaseOntoBranch
// - gitlens.views.rebaseOntoCommit
// - gitlens.views.rebaseOntoUpstream
// - gitlens.views.refreshNode
// - gitlens.views.remotes.focus
// - gitlens.views.remotes.refresh
// - gitlens.views.remotes.resetViewLocation
// - gitlens.views.remotes.setFilesLayoutToAuto
// - gitlens.views.remotes.setFilesLayoutToList
// - gitlens.views.remotes.setFilesLayoutToTree
// - gitlens.views.remotes.setLayoutToList
// - gitlens.views.remotes.setLayoutToTree
// - gitlens.views.remotes.setShowAvatarsOff
// - gitlens.views.remotes.setShowAvatarsOn
// - gitlens.views.remotes.setShowBranchPullRequestOff
// - gitlens.views.remotes.setShowBranchPullRequestOn
// - gitlens.views.renameBranch
// - gitlens.views.repositories.focus
// - gitlens.views.repositories.refresh
// - gitlens.views.repositories.resetViewLocation
// - gitlens.views.repositories.setAutoRefreshToOff
// - gitlens.views.repositories.setAutoRefreshToOn
// - gitlens.views.repositories.setBranchesLayoutToList
// - gitlens.views.repositories.setBranchesLayoutToTree
// - gitlens.views.repositories.setBranchesShowBranchComparisonOff
// - gitlens.views.repositories.setBranchesShowBranchComparisonOn
// - gitlens.views.repositories.setFilesLayoutToAuto
// - gitlens.views.repositories.setFilesLayoutToList
// - gitlens.views.repositories.setFilesLayoutToTree
// - gitlens.views.repositories.setShowAvatarsOff
// - gitlens.views.repositories.setShowAvatarsOn
// - gitlens.views.repositories.setShowBranchComparisonOff
// - gitlens.views.repositories.setShowBranchComparisonOn
// - gitlens.views.repositories.setShowBranchesOff
// - gitlens.views.repositories.setShowBranchesOn
// - gitlens.views.repositories.setShowCommitsOff
// - gitlens.views.repositories.setShowCommitsOn
// - gitlens.views.repositories.setShowContributorsOff
// - gitlens.views.repositories.setShowContributorsOn
// - gitlens.views.repositories.setShowRemotesOff
// - gitlens.views.repositories.setShowRemotesOn
// - gitlens.views.repositories.setShowSectionOff
// - gitlens.views.repositories.setShowStashesOff
// - gitlens.views.repositories.setShowStashesOn
// - gitlens.views.repositories.setShowTagsOff
// - gitlens.views.repositories.setShowTagsOn
// - gitlens.views.repositories.setShowUpstreamStatusOff
// - gitlens.views.repositories.setShowUpstreamStatusOn
// - gitlens.views.resetCommit
// - gitlens.views.resetToCommit
// - gitlens.views.restore
// - gitlens.views.revert
// - gitlens.views.searchAndCompare.clear
// - gitlens.views.searchAndCompare.compareWithSelected
// - gitlens.views.searchAndCompare.focus
// - gitlens.views.searchAndCompare.pin
// - gitlens.views.searchAndCompare.refresh
// - gitlens.views.searchAndCompare.resetViewLocation
// - gitlens.views.searchAndCompare.searchCommits
// - gitlens.views.searchAndCompare.selectForCompare
// - gitlens.views.searchAndCompare.setFilesFilterOff
// - gitlens.views.searchAndCompare.setFilesFilterOnLeft
// - gitlens.views.searchAndCompare.setFilesFilterOnRight
// - gitlens.views.searchAndCompare.setFilesLayoutToAuto
// - gitlens.views.searchAndCompare.setFilesLayoutToList
// - gitlens.views.searchAndCompare.setFilesLayoutToTree
// - gitlens.views.searchAndCompare.setKeepResultsToOff
// - gitlens.views.searchAndCompare.setKeepResultsToOn
// - gitlens.views.searchAndCompare.setShowAvatarsOff
// - gitlens.views.searchAndCompare.setShowAvatarsOn
// - gitlens.views.searchAndCompare.swapComparison
// - gitlens.views.searchAndCompare.unpin
// - gitlens.views.selectFileForCompare
// - gitlens.views.selectForCompare
// - gitlens.views.setAsDefault
// - gitlens.views.setBranchComparisonToBranch
// - gitlens.views.setBranchComparisonToWorking
// - gitlens.views.setShowRelativeDateMarkersOff
// - gitlens.views.setShowRelativeDateMarkersOn
// - gitlens.views.stageDirectory
// - gitlens.views.stageFile
// - gitlens.views.star
// - gitlens.views.stashes.focus
// - gitlens.views.stashes.refresh
// - gitlens.views.stashes.resetViewLocation
// - gitlens.views.stashes.setFilesLayoutToAuto
// - gitlens.views.stashes.setFilesLayoutToList
// - gitlens.views.stashes.setFilesLayoutToTree
// - gitlens.views.switchToAnotherBranch
// - gitlens.views.switchToBranch
// - gitlens.views.switchToCommit
// - gitlens.views.switchToTag
// - gitlens.views.tags.focus
// - gitlens.views.tags.refresh
// - gitlens.views.tags.resetViewLocation
// - gitlens.views.tags.setFilesLayoutToAuto
// - gitlens.views.tags.setFilesLayoutToList
// - gitlens.views.tags.setFilesLayoutToTree
// - gitlens.views.tags.setLayoutToList
// - gitlens.views.tags.setLayoutToTree
// - gitlens.views.tags.setShowAvatarsOff
// - gitlens.views.tags.setShowAvatarsOn
// - gitlens.views.terminalRemoveRemote
// - gitlens.views.undoCommit
// - gitlens.views.unsetAsDefault
// - gitlens.views.unstageDirectory
// - gitlens.views.unstageFile
// - gitlens.views.unstar
// - gitlens.views.updates.focus
// - gitlens.views.updates.resetViewLocation
// - gitlens.views.welcome.focus
// - gitlens.views.welcome.removeView
// - gitlens.views.welcome.resetViewLocation
// - gitlens.views.welcome.toggleVisibility
// - goToNextReferenceFromEmbeddedEditor
// - goToPreviousReferenceFromEmbeddedEditor
// - help.tweetFeedback
// - imagePreview.zoomIn
// - imagePreview.zoomOut
// - insert-unicode.clearRecentlyUsed
// - insert-unicode.dataTable
// - insert-unicode.fromHexCode
// - insert-unicode.identify
// - insert-unicode.identifyView.focus
// - insert-unicode.identifyView.removeView
// - insert-unicode.identifyView.resetViewLocation
// - insert-unicode.identifyView.toggleVisibility
// - insert-unicode.insertCode
// - insert-unicode.insertCodeExact
// - insert-unicode.insertDecimalCode
// - insert-unicode.insertDecimalCodeExact
// - insert-unicode.insertFavoriteDecimalCode
// - insert-unicode.insertFavoriteHexCode
// - insert-unicode.insertFavoriteText
// - insert-unicode.insertFont
// - insert-unicode.insertText
// - insert-unicode.insertTextExact
// - insert-unicode.manageFavorites
// - issue.continueWorking
// - issue.copyGithubPermalink
// - issue.copyIssueNumber
// - issue.copyIssueUrl
// - issue.copyMarkdownGithubPermalink
// - issue.createIssue
// - issue.createIssueFromClipboard
// - issue.createIssueFromSelection
// - issue.editQuery
// - issue.getCurrent
// - issue.goToLinkedCode
// - issue.issueCompletion
// - issue.openGithubPermalink
// - issue.openIssue
// - issue.refresh
// - issue.signinAndRefreshList
// - issue.startWorking
// - issue.startWorkingBranchDescriptiveTitle
// - issue.startWorkingBranchPrompt
// - issue.statusBar
// - issue.stopWorking
// - issue.stopWorkingBranchDescriptiveTitle
// - issue.userCompletion
// - issues:github.focus
// - issues:github.removeView
// - issues:github.resetViewLocation
// - issues:github.toggleVisibility
// - javascript.goToProjectConfig
// - javascript.reloadProjects
// - jsBrowserBreakpoints.focus
// - jsBrowserBreakpoints.resetViewLocation
// - jupyter.addcellbelow
// - jupyter.clearSavedJupyterUris
// - jupyter.collapseallcells
// - jupyter.createGitHubIssue
// - jupyter.createnewinteractive
// - jupyter.createnewnotebook
// - jupyter.debugFileInteractive
// - jupyter.debugNotebook
// - jupyter.debugcell
// - jupyter.debugcontinue
// - jupyter.debugcurrentcell.palette
// - jupyter.debugstepover
// - jupyter.debugstop
// - jupyter.enableDebugLogging
// - jupyter.expandallcells
// - jupyter.export
// - jupyter.exportAsPythonScript
// - jupyter.exportToHTML
// - jupyter.exportToPDF
// - jupyter.exportfileandoutputasnotebook
// - jupyter.exportfileasnotebook
// - jupyter.exportoutputasnotebook
// - jupyter.importnotebook
// - jupyter.importnotebookfile
// - jupyter.interactive.clearAllCells
// - jupyter.interactive.copyCell
// - jupyter.interactive.exportas
// - jupyter.interactive.exportasnotebook
// - jupyter.interactive.goToCode
// - jupyter.interactive.removeCell
// - jupyter.interruptkernel
// - jupyter.latestExtension
// - jupyter.notebookeditor.addcellbelow
// - jupyter.notebookeditor.collapseallcells
// - jupyter.notebookeditor.expandallcells
// - jupyter.notebookeditor.export
// - jupyter.notebookeditor.interruptkernel
// - jupyter.notebookeditor.keybind.renderMarkdownAndSelectBelow
// - jupyter.notebookeditor.keybind.toggleOutput
// - jupyter.notebookeditor.redocells
// - jupyter.notebookeditor.removeallcells
// - jupyter.notebookeditor.restartkernel
// - jupyter.notebookeditor.undocells
// - jupyter.openVariableView
// - jupyter.opennotebook
// - jupyter.opennotebookInPreviewEditor
// - jupyter.resetLoggingLevel
// - jupyter.restartkernel
// - jupyter.runFileInteractive
// - jupyter.runallcells
// - jupyter.runallcellsabove
// - jupyter.runallcellsabove.palette
// - jupyter.runcell
// - jupyter.runcellandallbelow
// - jupyter.runcurrentcellandallbelow.palette
// - jupyter.runfromline
// - jupyter.runtoline
// - jupyter.scrolltocell
// - jupyter.selectJupyterInterpreter
// - jupyter.selectNativeJupyterUriFromToolBar
// - jupyter.selectjupytercommandline
// - jupyter.selectjupyteruri
// - jupyter.showDataViewer
// - jupyter.submitGitHubIssue
// - jupyter.viewOutput
// - jupyterViewVariables.focus
// - jupyterViewVariables.resetViewLocation
// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showExtensionKeybindings
// - keybindings.editor.showUserKeybindings
// - lastCursorLineSelect
// - lastCursorLineSelectDrag
// - lastCursorWordSelect
// - layoutEditorGroups
// - lineBreakInsert
// - list.focusParent
// - list.scrollLeft
// - list.scrollRight
// - list.selectAndPreserveFocus
// - list.toggleFilterOnType
// - list.toggleKeyboardNavigation
// - loginspector.draw
// - loginspector.drawCluster
// - loginspector.drawFromLine
// - loginspector.matchFunction
// - loginspector.readLog
// - markdown.extension.editing.toggleCodeBlock
// - markdown.extension.editing.toggleCodeSpan
// - markdown.extension.editing.toggleList
// - markdown.extension.editing.toggleMathReverse
// - markdown.extension.printToHtml
// - markdown.extension.printToHtmlBatch
// - markdown.extension.toc.addSecNumbers
// - markdown.extension.toc.create
// - markdown.extension.toc.removeSecNumbers
// - markdown.extension.toc.update
// - markdown.preview.refresh
// - markdown.preview.toggleLock
// - markdown.showLockedPreviewToSide
// - markdown.showPreviewSecuritySelector
// - markdown.showSource
// - markdownlint.fixAll
// - markdownlint.openConfigFile
// - markdownlint.toggleLinting
// - markdowntable.alignCenter
// - markdowntable.alignLeft
// - markdowntable.alignRight
// - markdowntable.insertLeft
// - markdowntable.insertRight
// - markdowntable.nextCellWithoutFormat
// - markdowntable.prevCellWithoutFormat
// - md-shortcut.addTable
// - md-shortcut.addTableWithHeader
// - md-shortcut.toggleCitations
// - md-shortcut.toggleStrikethrough
// - md-shortcut.toggleTitleH1
// - md-shortcut.toggleTitleH2
// - md-shortcut.toggleTitleH3
// - md-shortcut.toggleTitleH4
// - md-shortcut.toggleTitleH5
// - md-shortcut.toggleTitleH6
// - merge-conflict.accept.all-both
// - merge-conflict.accept.all-current
// - merge-conflict.accept.all-incoming
// - merge-conflict.accept.both
// - merge-conflict.accept.current
// - merge-conflict.accept.incoming
// - merge-conflict.accept.selection
// - merge-conflict.compare
// - merge-conflict.next
// - merge-conflict.previous
// - noop
// - notebook.cancelExecution
// - notebook.cell.cancelExecution
// - notebook.cell.changeLanguage
// - notebook.cell.executeCellAndBelow
// - notebook.cell.executeCellsAbove
// - notebook.cell.insertCodeCellAtTop
// - notebook.cell.insertMarkdownCellAbove
// - notebook.cell.insertMarkdownCellAtTop
// - notebook.cell.insertMarkdownCellBelow
// - notebook.clearAllCellsOutputs
// - notebook.diff.cell.revertInput
// - notebook.diff.cell.revertMetadata
// - notebook.diff.cell.revertOutputs
// - notebook.diff.cell.switchOutputRenderingStyleToText
// - notebook.diff.showMetadata
// - notebook.diff.showOutputs
// - notebook.diff.switchToText
// - notebook.execute
// - notebook.inspectLayout
// - notebook.renderAllMarkdownCells
// - notebook.selectKernel
// - notebook.setProfile
// - notebook.toggleCellToolbarPosition
// - notebook.toggleCellToolbarPositionFromEditorTitle
// - notebook.toggleLayoutTroubleshoot
// - notebook.toggleLineNumbersFromEditorTitle
// - notifications.clearAll
// - notifications.focusToasts
// - notifications.showList
// - notifications.toggleList
// - npm-intellisense.import
// - npm-script.audit
// - npm-script.build
// - npm-script.init
// - npm-script.install
// - npm-script.outdated
// - npm-script.start
// - npm.debugScript
// - npm.focus
// - npm.openScript
// - npm.packageManager
// - npm.refresh
// - npm.resetViewLocation
// - npm.runInstall
// - npm.runScript
// - npm.runScriptFromFolder
// - npm.runSelectedScript
// - o.fixAll.document
// - o.fixAll.project
// - o.fixAll.solution
// - o.pickProjectAndStart
// - o.reanalyze.allProjects
// - o.reanalyze.currentProject
// - o.restart
// - openEditors.closeAll
// - openEditors.newUntitledFile
// - openInTerminal
// - openReference
// - openZipResource
// - opensshremotes.addNewSshHost
// - opensshremotes.cleanDevBox
// - opensshremotes.cleanLocalServer
// - opensshremotes.cleanRemoteServer
// - opensshremotes.getHelp
// - opensshremotes.getStarted
// - opensshremotes.openConfigFile
// - opensshremotes.openEmptyWindow
// - opensshremotes.openEmptyWindowInCurrentWindow
// - opensshremotes.openEmptyWindowOnCurrentHost
// - opensshremotes.openWebUI
// - opensshremotes.provideFeedback
// - opensshremotes.reportIssue
// - opensshremotes.settings
// - opensshremotes.showLog
// - opensshremotesexplorer.add
// - opensshremotesexplorer.configure
// - opensshremotesexplorer.deleteFolderHistoryItem
// - opensshremotesexplorer.emptyWindowInCurrentWindow
// - opensshremotesexplorer.emptyWindowInNewWindow
// - opensshremotesexplorer.refresh
// - opensshremotesexplorer.reopenFolderInCurrentWindow
// - opensshremotesexplorer.reopenFolderInNewWindow
// - opensshremotesexplorer.startManagedHost
// - opensshremotesexplorer.stopManagedHost
// - outline.collapse
// - outline.filterOnType
// - outline.focus
// - outline.followCursor
// - outline.removeView
// - outline.resetViewLocation
// - outline.sortByKind
// - outline.sortByName
// - outline.sortByPosition
// - outline.toggleVisibility
// - paste
// - peacock.addRecommendedFavorites
// - peacock.changeColorOfLiveShareGuest
// - peacock.changeColorOfLiveShareHost
// - peacock.changeColorToFavorite
// - peacock.changeColorToPeacockGreen
// - peacock.changeColorToRandom
// - peacock.docs
// - peacock.enterColor
// - peacock.removeAllColors
// - peacock.resetWorkspaceColors
// - peacock.saveColorToFavorites
// - peacock.showAndCopyCurrentColor
// - perfview.show
// - pr.cancelEditComment
// - pr.close
// - pr.collapseAllComments
// - pr.configurePRViewlet
// - pr.configureRemotes
// - pr.copyCommitHash
// - pr.create
// - pr.createComment
// - pr.createSingleComment
// - pr.deleteComment
// - pr.deleteLocalBranch
// - pr.deleteLocalBranchesNRemotes
// - pr.editComment
// - pr.exit
// - pr.expandAllComments
// - pr.loadMore
// - pr.markFileAsViewed
// - pr.merge
// - pr.openDescription
// - pr.openDescriptionToTheSide
// - pr.openDiffView
// - pr.openFileOnGitHub
// - pr.openModifiedFile
// - pr.openOriginalFile
// - pr.openPullRequestOnGitHub
// - pr.openReview
// - pr.pick
// - pr.readyForReview
// - pr.refreshActivePullRequest
// - pr.refreshChanges
// - pr.refreshDescription
// - pr.refreshList
// - pr.refreshPullRequest
// - pr.resolveReviewThread
// - pr.saveComment
// - pr.setFileListLayoutAsFlat
// - pr.setFileListLayoutAsTree
// - pr.signin
// - pr.signinAndRefreshList
// - pr.startReview
// - pr.unmarkFileAsViewed
// - pr.unresolveReviewThread
// - pr:github.focus
// - pr:github.removeView
// - pr:github.resetViewLocation
// - pr:github.toggleVisibility
// - prStatus:github.focus
// - prStatus:github.resetViewLocation
// - prettier.createConfigFile
// - prettier.forceFormatDocument
// - prettier.openOutput
// - problems.action.clearFilterText
// - problems.action.copyMessage
// - problems.action.copyRelatedInformationMessage
// - problems.action.showMultilineMessage
// - problems.action.showSinglelineMessage
// - pylance.reportIssue
// - python.analysis.clearCache
// - python.analysis.restartLanguageServer
// - python.buildWorkspaceSymbols
// - python.clearPersistentStorage
// - python.clearWorkspaceInterpreter
// - python.configureTests
// - python.createTerminal
// - python.debugInTerminal
// - python.enableLinting
// - python.enableSourceMapSupport
// - python.execInTerminal
// - python.execInTerminal-icon
// - python.execSelectionInDjangoShell
// - python.goToPythonObject
// - python.launchTensorBoard
// - python.refactorExtractMethod
// - python.refactorExtractVariable
// - python.refreshTests
// - python.refreshingTests
// - python.reportIssue
// - python.runLinting
// - python.setInterpreter
// - python.setLinter
// - python.sortImports
// - python.startREPL
// - python.stopRefreshingTests
// - python.switchOffInsidersChannel
// - python.switchToDailyChannel
// - python.switchToWeeklyChannel
// - python.viewLanguageServerOutput
// - python.viewOutput
// - razor.reportIssue
// - refactorPreview
// - refactorPreview.discard
// - refactorPreview.focus
// - refactorPreview.groupByFile
// - refactorPreview.groupByType
// - refactorPreview.resetViewContainerLocation
// - refactorPreview.resetViewLocation
// - refactorPreview.toggleGrouping
// - references-view.clear
// - references-view.clearHistory
// - references-view.copy
// - references-view.copyAll
// - references-view.copyPath
// - references-view.findImplementations
// - references-view.pickFromHistory
// - references-view.refind
// - references-view.refresh
// - references-view.removeCallItem
// - references-view.removeReferenceItem
// - references-view.removeTypeItem
// - references-view.showIncomingCalls
// - references-view.showOutgoingCalls
// - references-view.showSubtypes
// - references-view.showSupertypes
// - references-view.showTypeHierarchy
// - references-view.tree.focus
// - references-view.tree.resetViewLocation
// - regexExplainer.getExplainRegexHtml
// - regexExplainer.previewRegExp
// - remote-containers.addExtensionToConfig
// - remote-containers.attachToContainer
// - remote-containers.attachToContainerNewWindow
// - remote-containers.attachToK8sContainerFromViewlet
// - remote-containers.attachToRunningContainer
// - remote-containers.attachToRunningContainerFromViewlet
// - remote-containers.checkoutPRInVolume
// - remote-containers.cloneInVolume
// - remote-containers.cloneInVolumeFromViewlet
// - remote-containers.cloneRepositoryInVolumeFromViewlet
// - remote-containers.configureContainerFeatures
// - remote-containers.createDevContainerFile
// - remote-containers.explorerDetailsRefresh
// - remote-containers.explorerTargetsRefresh
// - remote-containers.explorerVolumesRefresh
// - remote-containers.getHelp
// - remote-containers.getStarted
// - remote-containers.inspectDockerResource
// - remote-containers.inspectInBasicDevContainer
// - remote-containers.inspectVolume
// - remote-containers.inspectVolumeFromViewlet
// - remote-containers.installDocker
// - remote-containers.installUserCLI
// - remote-containers.labelPortAndUpdateConfig
// - remote-containers.newContainer
// - remote-containers.openAttachConfigByNameFile
// - remote-containers.openAttachDevContainerFile
// - remote-containers.openDevContainerFile
// - remote-containers.openFolder
// - remote-containers.openLastLogFile
// - remote-containers.openLogFile
// - remote-containers.openPullRequestInVolume
// - remote-containers.openRepositoryFromRemoteHub
// - remote-containers.openRepositoryInUniqueVolume
// - remote-containers.openRepositoryInVolume
// - remote-containers.openWorkspace
// - remote-containers.provideFeedback
// - remote-containers.pruneVolumes
// - remote-containers.rebuildAndReopenInContainer
// - remote-containers.rebuildContainer
// - remote-containers.rebuildContainerNoCache
// - remote-containers.rebuildNoCacheAndReopenInContainer
// - remote-containers.removeContainer
// - remote-containers.removeRecentFolder
// - remote-containers.removeVolume
// - remote-containers.reopenInContainer
// - remote-containers.reopenInWSL
// - remote-containers.reopenLocally
// - remote-containers.reportIssue
// - remote-containers.revealLogTerminal
// - remote-containers.revealPostCreateTerminal
// - remote-containers.settings
// - remote-containers.showContainerLog
// - remote-containers.showDetails
// - remote-containers.showRecoveryContainerNotificationReset
// - remote-containers.showReopenInContainerNotificationReset
// - remote-containers.startAndOpenFolder
// - remote-containers.startContainer
// - remote-containers.stopContainer
// - remote-containers.trySample
// - remote-wsl-recommender.gettingStarted
// - remote-wsl-recommender.openWSLFolder
// - remote-wsl.explorer.addDistro
// - remote-wsl.explorer.openDistro
// - remote-wsl.explorer.openFolder
// - remote-wsl.explorer.refresh
// - remote-wsl.explorer.removeFolder
// - remote-wsl.explorer.setDefaultDistro
// - remote-wsl.getHelp
// - remote-wsl.getStarted
// - remote-wsl.newWindow
// - remote-wsl.newWindowForDistro
// - remote-wsl.newWindowFromRecommendation
// - remote-wsl.openFolder
// - remote-wsl.provideFeedback
// - remote-wsl.reopenInWSL
// - remote-wsl.reopenInWindows
// - remote-wsl.reportIssue
// - remote-wsl.showLog
// - remote.explorer.switch
// - remote.tunnel.changeLocalPort
// - remote.tunnel.closeCommandPalette
// - remote.tunnel.copyAddressCommandPalette
// - remote.tunnel.forwardCommandPalette
// - remote.tunnel.forwardInline
// - remote.tunnel.makePrivate
// - remote.tunnel.makePublic
// - remote.tunnel.open
// - remote.tunnel.openCommandPalette
// - remote.tunnel.openPreview
// - remote.tunnel.setProtocolHttp
// - remote.tunnel.setProtocolHttps
// - remoteHub.addRepositoryToWorkspace
// - remoteHub.applyPatch
// - remoteHub.clone
// - remoteHub.commit
// - remoteHub.configureIndexingAllowedRepos
// - remoteHub.continueOn
// - remoteHub.continueOn.addRepositoryToWorkspace
// - remoteHub.continueOn.openRepository
// - remoteHub.createBranch
// - remoteHub.createBranchFrom
// - remoteHub.createDraftPullRequest
// - remoteHub.createPullRequest
// - remoteHub.deleteAllLocalRepositoryData
// - remoteHub.deleteLocalRepositoryData
// - remoteHub.disableDebugLogging
// - remoteHub.discardAllChanges
// - remoteHub.discardChanges
// - remoteHub.enableDebugLogging
// - remoteHub.enableIndexing
// - remoteHub.exportDebugInfo
// - remoteHub.exportPatch
// - remoteHub.fetch
// - remoteHub.keepChanges
// - remoteHub.openChanges
// - remoteHub.openFile
// - remoteHub.openOnDesktop
// - remoteHub.openOnRemote
// - remoteHub.openOnWeb
// - remoteHub.openRepository
// - remoteHub.pull
// - remoteHub.refresh
// - remoteHub.stageAllChanges
// - remoteHub.stageChanges
// - remoteHub.switchToBranch
// - remoteHub.sync
// - remoteHub.timeline.compareWithSelected
// - remoteHub.timeline.copyCommitId
// - remoteHub.timeline.copyCommitMessage
// - remoteHub.timeline.openDiff
// - remoteHub.timeline.openOnGitHub
// - remoteHub.timeline.selectForCompare
// - remoteHub.unstageAllChanges
// - remoteHub.unstageChanges
// - remoteHub.views.workspaceRepositories.applyAllChanges
// - remoteHub.views.workspaceRepositories.applyChanges
// - remoteHub.views.workspaceRepositories.focus
// - remoteHub.views.workspaceRepositories.open
// - remoteHub.views.workspaceRepositories.openChanges
// - remoteHub.views.workspaceRepositories.openFile
// - remoteHub.views.workspaceRepositories.openInNewWindow
// - remoteHub.views.workspaceRepositories.refresh
// - remoteHub.views.workspaceRepositories.remove
// - remoteHub.views.workspaceRepositories.resetViewLocation
// - removeRootFolder
// - repl.action.copyAll
// - replacePreviousChar
// - resetGettingStartedProgress
// - rest-book.newNotebook
// - rest-book.secrets
// - revealInExplorer
// - review.openFile
// - review.suggestDiff
// - rls.restart
// - rls.start
// - rls.stop
// - rls.update
// - scm.openInTerminal
// - search.action.clearHistory
// - search.action.clearSearchResults
// - search.action.collapseSearchResults
// - search.action.copyAll
// - search.action.expandSearchResults
// - search.action.focusSearchList
// - search.action.openEditor
// - search.action.openNewEditor
// - search.action.openNewEditorFromView
// - search.action.openNewEditorToSide
// - search.action.refreshSearchResults
// - search.action.revealInSideBar
// - selectFirstSuggestion
// - selectForCompare
// - selectLastSuggestion
// - setContext
// - setSelection
// - settings.filterByModified
// - settings.filterByOnline
// - settings.filterByTelemetry
// - settings.filterUntrusted
// - settings.switchToJSON
// - showEditorScreenReaderNotification
// - simpleBrowser.show
// - snippets.view.focus
// - snippets.view.removeView
// - snippets.view.resetViewLocation
// - snippets.view.toggleVisibility
// - snippets.viewer.combineLanguageSnippets
// - snippets.viewer.groupSnippetsByFile
// - snippets.viewer.insertSnippet
// - snippets.viewer.openSnippetFile
// - snippets.viewer.refreshSnippets
// - snippets.viewer.skipLanguageSnippets
// - snippets.viewer.sortSnippetsByDefinitionOrder
// - snippets.viewer.sortSnippetsByName
// - snippets.viewer.viewSettings
// - sortJSON.sortJSON
// - sortJSON.sortJSONAlphaNum
// - sortJSON.sortJSONAlphaNumReverse
// - sortJSON.sortJSONKeyLength
// - sortJSON.sortJSONKeyLengthReverse
// - sortJSON.sortJSONReverse
// - sortJSON.sortJSONType
// - sortJSON.sortJSONTypeReverse
// - sortJSON.sortJSONValues
// - sortJSON.sortJSONValuesReverse
// - sshHosts.focus
// - sshHosts.resetViewLocation
// - targetsContainers.focus
// - targetsContainers.resetViewLocation
// - targetsWsl.focus
// - targetsWsl.resetViewLocation
// - terminal.focus
// - terminal.removeView
// - terminal.resetViewContainerLocation
// - terminal.resetViewLocation
// - terminal.toggleVisibility
// - test-explorer.cancel
// - test-explorer.debug
// - test-explorer.debug-all
// - test-explorer.debug-file
// - test-explorer.debug-test-at-cursor
// - test-explorer.debug-this-test
// - test-explorer.disable-autorun
// - test-explorer.dont-sort
// - test-explorer.enable-autorun
// - test-explorer.expand
// - test-explorer.focus
// - test-explorer.pick-and-debug
// - test-explorer.pick-and-run
// - test-explorer.redebug
// - test-explorer.reload
// - test-explorer.reload-collection
// - test-explorer.reloading
// - test-explorer.rerun
// - test-explorer.reset
// - test-explorer.resetViewLocation
// - test-explorer.retire
// - test-explorer.reveal
// - test-explorer.run
// - test-explorer.run-all
// - test-explorer.run-file
// - test-explorer.run-test-at-cursor
// - test-explorer.run-this-file
// - test-explorer.run-this-test
// - test-explorer.show-error
// - test-explorer.show-log
// - test-explorer.show-source
// - test-explorer.sort-by-label
// - test-explorer.sort-by-label-with-suites-first
// - test-explorer.sort-by-location
// - test-explorer.sort-by-location-with-suites-first
// - testExplorerConverter.activate
// - testExplorerConverter.refreshAdapter
// - testExplorerConverter.useNativeTesting
// - testing.clearTestResults
// - testing.collapseAll
// - testing.configureProfile
// - testing.debug
// - testing.debugSelected
// - testing.hideTest
// - testing.openMessageInEditor
// - testing.run
// - testing.runSelected
// - testing.runUsing
// - testing.searchForTestExtension
// - testing.selectDefaultTestProfiles
// - testing.sortByLocation
// - testing.sortByStatus
// - testing.unhideTest
// - testing.viewAsList
// - testing.viewAsTree
// - thunder-client-sidebar.focus
// - thunder-client-sidebar.removeView
// - thunder-client-sidebar.resetViewLocation
// - thunder-client-sidebar.toggleVisibility
// - thunder-client.addto-collection-panel
// - thunder-client.col-settings-panel
// - thunder-client.environment-panel
// - thunder-client.init-database
// - thunder-client.reload-data
// - thunder-client.request-panel
// - thunder-client.run-collection-panel
// - thunder-client.run-last-request
// - thunder-client.update-envdata
// - timeline.focus
// - timeline.resetViewLocation
// - todo-tree-view.focus
// - todo-tree-view.removeView
// - todo-tree-view.resetViewLocation
// - todo-tree-view.toggleVisibility
// - todo-tree.addTag
// - todo-tree.collapse
// - todo-tree.excludeThisFile
// - todo-tree.excludeThisFolder
// - todo-tree.expand
// - todo-tree.exportTree
// - todo-tree.filter
// - todo-tree.filterClear
// - todo-tree.groupBySubTag
// - todo-tree.groupByTag
// - todo-tree.onStatusBarClicked
// - todo-tree.openUrl
// - todo-tree.refresh
// - todo-tree.removeFilter
// - todo-tree.removeTag
// - todo-tree.resetAllFilters
// - todo-tree.resetCache
// - todo-tree.reveal
// - todo-tree.scanCurrentFileOnly
// - todo-tree.scanOpenFilesOnly
// - todo-tree.scanWorkspaceAndOpenFiles
// - todo-tree.scanWorkspaceOnly
// - todo-tree.showFlatView
// - todo-tree.showOnlyThisFolder
// - todo-tree.showOnlyThisFolderAndSubfolders
// - todo-tree.showTagsOnlyView
// - todo-tree.showTreeView
// - todo-tree.stopScan
// - todo-tree.switchScope
// - todo-tree.toggleBadges
// - todo-tree.toggleCompactFolders
// - todo-tree.toggleItemCounts
// - todo-tree.ungroupBySubTag
// - todo-tree.ungroupByTag
// - toggle.diff.ignoreTrimWhitespace
// - toggle.diff.renderSideBySide
// - toggleEscapeSequenceLogging
// - typescript.findAllFileReferences
// - typescript.goToProjectConfig
// - typescript.openTsServerLog
// - typescript.reloadProjects
// - typescript.restartTsServer
// - typescript.selectTypeScriptVersion
// - unicodepalette.insertCharacter
// - update.check
// - update.checkForVSCodeUpdate
// - update.checking
// - update.downloadNow
// - update.downloading
// - update.install
// - update.restart
// - update.showCurrentReleaseNotes
// - update.updating
// - variables.collapse
// - vsc-github-projects.focus
// - vsc-github-projects.removeView
// - vsc-github-projects.resetViewLocation
// - vsc-github-projects.toggleVisibility
// - vscode-docker.compose.down
// - vscode-docker.compose.restart
// - vscode-docker.compose.up
// - vscode-docker.compose.up.subset
// - vscode-docker.configure
// - vscode-docker.configureCompose
// - vscode-docker.containers.attachShell
// - vscode-docker.containers.browse
// - vscode-docker.containers.composeGroup.down
// - vscode-docker.containers.composeGroup.logs
// - vscode-docker.containers.composeGroup.restart
// - vscode-docker.containers.composeGroup.start
// - vscode-docker.containers.composeGroup.stop
// - vscode-docker.containers.configureExplorer
// - vscode-docker.containers.downloadFile
// - vscode-docker.containers.inspect
// - vscode-docker.containers.openFile
// - vscode-docker.containers.prune
// - vscode-docker.containers.refresh
// - vscode-docker.containers.remove
// - vscode-docker.containers.restart
// - vscode-docker.containers.select
// - vscode-docker.containers.start
// - vscode-docker.containers.stop
// - vscode-docker.containers.viewLogs
// - vscode-docker.contexts.configureExplorer
// - vscode-docker.contexts.create.aci
// - vscode-docker.contexts.help
// - vscode-docker.contexts.inspect
// - vscode-docker.contexts.refresh
// - vscode-docker.contexts.remove
// - vscode-docker.contexts.use
// - vscode-docker.debugging.initializeForDebugging
// - vscode-docker.help
// - vscode-docker.help.openStartPage
// - vscode-docker.help.reportIssue
// - vscode-docker.images.build
// - vscode-docker.images.configureExplorer
// - vscode-docker.images.copyFullTag
// - vscode-docker.images.inspect
// - vscode-docker.images.prune
// - vscode-docker.images.pull
// - vscode-docker.images.push
// - vscode-docker.images.refresh
// - vscode-docker.images.remove
// - vscode-docker.images.run
// - vscode-docker.images.runAzureCli
// - vscode-docker.images.runInteractive
// - vscode-docker.images.showDangling
// - vscode-docker.images.tag
// - vscode-docker.installDocker
// - vscode-docker.networks.configureExplorer
// - vscode-docker.networks.create
// - vscode-docker.networks.inspect
// - vscode-docker.networks.prune
// - vscode-docker.networks.refresh
// - vscode-docker.networks.remove
// - vscode-docker.pruneSystem
// - vscode-docker.registries.azure.buildImage
// - vscode-docker.registries.azure.createRegistry
// - vscode-docker.registries.azure.deleteRegistry
// - vscode-docker.registries.azure.deleteRepository
// - vscode-docker.registries.azure.openInPortal
// - vscode-docker.registries.azure.runFileAsTask
// - vscode-docker.registries.azure.runTask
// - vscode-docker.registries.azure.selectSubscriptions
// - vscode-docker.registries.azure.untagImage
// - vscode-docker.registries.azure.viewProperties
// - vscode-docker.registries.azure.viewTaskLogs
// - vscode-docker.registries.connectRegistry
// - vscode-docker.registries.copyImageDigest
// - vscode-docker.registries.deleteImage
// - vscode-docker.registries.deployImageToAci
// - vscode-docker.registries.deployImageToAzure
// - vscode-docker.registries.disconnectRegistry
// - vscode-docker.registries.dockerHub.openInBrowser
// - vscode-docker.registries.help
// - vscode-docker.registries.logInToDockerCli
// - vscode-docker.registries.logOutOfDockerCli
// - vscode-docker.registries.pullImage
// - vscode-docker.registries.pullRepository
// - vscode-docker.registries.reconnectRegistry
// - vscode-docker.registries.refresh
// - vscode-docker.views.dockerContexts.focus
// - vscode-docker.views.dockerContexts.removeView
// - vscode-docker.views.dockerContexts.resetViewLocation
// - vscode-docker.views.dockerContexts.toggleVisibility
// - vscode-docker.views.help.focus
// - vscode-docker.views.help.removeView
// - vscode-docker.views.help.resetViewLocation
// - vscode-docker.views.help.toggleVisibility
// - vscode-docker.volumes.configureExplorer
// - vscode-docker.volumes.inspect
// - vscode-docker.volumes.prune
// - vscode-docker.volumes.refresh
// - vscode-docker.volumes.remove
// - vscode-github-projects.revelProjects
// - vscode-icons.activateIcons
// - vscode-icons.foldersAllDefaultIconPreset
// - vscode-icons.hideExplorerArrowsPreset
// - vscode-icons.hideFoldersPreset
// - vscode-icons.jsPreset
// - vscode-icons.jsonPreset
// - vscode-icons.nestPreset
// - vscode-icons.ngPreset
// - vscode-icons.regenerateIcons
// - vscode-icons.resetProjectDetectionDefaults
// - vscode-icons.restoreIcons
// - vscode-icons.tsPreset
// - vsls-contrib.gistfssignIn
// - walkthroughs.selectStep
// - watch.collapse
// - welcome.markStepComplete
// - welcome.markStepIncomplete
// - welcome.showAllWalkthroughs
// - workbench.action.acceptSelectedQuickOpenItem
// - workbench.action.addComment
// - workbench.action.addRootFolder
// - workbench.action.alternativeAcceptSelectedQuickOpenItem
// - workbench.action.blur
// - workbench.action.clearCommandHistory
// - workbench.action.clearEditorHistory
// - workbench.action.clearRecentFiles
// - workbench.action.closeActivePinnedEditor
// - workbench.action.closeEditorInAllGroups
// - workbench.action.closeEditorsAndGroup
// - workbench.action.closeEditorsInOtherGroups
// - workbench.action.closeEditorsToTheLeft
// - workbench.action.closeEditorsToTheRight
// - workbench.action.closeOtherEditors
// - workbench.action.closePanel
// - workbench.action.closeSidebar
// - workbench.action.compareEditor.focusOtherSide
// - workbench.action.compareEditor.focusPrimarySide
// - workbench.action.compareEditor.focusSecondarySide
// - workbench.action.configureLanguageBasedSettings
// - workbench.action.configureLocale
// - workbench.action.configureRuntimeArguments
// - workbench.action.createTerminalEditor
// - workbench.action.createTerminalEditorSide
// - workbench.action.debug.configure
// - workbench.action.debug.focusProcess
// - workbench.action.debug.restartFrame
// - workbench.action.debug.reverseContinue
// - workbench.action.debug.selectRepl
// - workbench.action.debug.selectandstart
// - workbench.action.debug.stepBack
// - workbench.action.debug.terminateThread
// - workbench.action.decreaseViewHeight
// - workbench.action.decreaseViewSize
// - workbench.action.decreaseViewWidth
// - workbench.action.duplicateActiveEditorGroupDown
// - workbench.action.duplicateActiveEditorGroupLeft
// - workbench.action.duplicateActiveEditorGroupRight
// - workbench.action.duplicateActiveEditorGroupUp
// - workbench.action.duplicateWorkspaceInNewWindow
// - workbench.action.editor.changeEOL
// - workbench.action.editor.changeEncoding
// - workbench.action.editorLayoutSingle
// - workbench.action.editorLayoutThreeColumns
// - workbench.action.editorLayoutThreeRows
// - workbench.action.editorLayoutTwoByTwoGrid
// - workbench.action.editorLayoutTwoColumns
// - workbench.action.editorLayoutTwoColumnsBottom
// - workbench.action.editorLayoutTwoRows
// - workbench.action.editorLayoutTwoRowsRight
// - workbench.action.evenEditorWidths
// - workbench.action.experimentalLockEditorGroup
// - workbench.action.experimentalToggleEditorGroupLock
// - workbench.action.experimentalUnlockEditorGroup
// - workbench.action.extensionHostProfiler.stop
// - workbench.action.files.openFileFolderInNewWindow
// - workbench.action.files.openFileInNewWindow
// - workbench.action.files.openFolderInNewWindow
// - workbench.action.files.revert
// - workbench.action.files.saveAll
// - workbench.action.files.saveFiles
// - workbench.action.firstEditorInGroup
// - workbench.action.focusAboveGroupWithoutWrap
// - workbench.action.focusActiveEditorGroup
// - workbench.action.focusActivityBar
// - workbench.action.focusBanner
// - workbench.action.focusBelowGroupWithoutWrap
// - workbench.action.focusCommentsPanel
// - workbench.action.focusLastEditorGroup
// - workbench.action.focusLeftGroupWithoutWrap
// - workbench.action.focusLeftSideEditor
// - workbench.action.focusNextGroup
// - workbench.action.focusOtherSideEditor
// - workbench.action.focusPanel
// - workbench.action.focusPreviousGroup
// - workbench.action.focusQuickOpen
// - workbench.action.focusRightGroupWithoutWrap
// - workbench.action.focusRightSideEditor
// - workbench.action.focusStatusBar
// - workbench.action.generateColorTheme
// - workbench.action.increaseViewHeight
// - workbench.action.increaseViewSize
// - workbench.action.increaseViewWidth
// - workbench.action.inspectContextKeys
// - workbench.action.inspectKeyMappings
// - workbench.action.inspectKeyMappingsJSON
// - workbench.action.joinAllGroups
// - workbench.action.joinEditorInGroup
// - workbench.action.joinTwoGroups
// - workbench.action.logStorage
// - workbench.action.logWorkingCopies
// - workbench.action.manageTrustedDomain
// - workbench.action.maximizeEditor
// - workbench.action.minimizeOtherEditors
// - workbench.action.moveEditorToAboveGroup
// - workbench.action.moveEditorToBelowGroup
// - workbench.action.moveEditorToLeftGroup
// - workbench.action.moveEditorToRightGroup
// - workbench.action.moveFocusedView
// - workbench.action.moveView
// - workbench.action.navigateDown
// - workbench.action.navigateEditorGroups
// - workbench.action.navigateLast
// - workbench.action.navigateLeft
// - workbench.action.navigateRight
// - workbench.action.navigateUp
// - workbench.action.newGroupAbove
// - workbench.action.newGroupBelow
// - workbench.action.newGroupLeft
// - workbench.action.newGroupRight
// - workbench.action.nextPanelView
// - workbench.action.nextSideBarView
// - workbench.action.openActiveLogOutputFile
// - workbench.action.openDefaultKeybindingsFile
// - workbench.action.openDocumentationUrl
// - workbench.action.openEditorAtIndex
// - workbench.action.openExtensionLogsFolder
// - workbench.action.openFolderSettings
// - workbench.action.openFolderSettingsFile
// - workbench.action.openGlobalKeybindingsFile
// - workbench.action.openGlobalSettings
// - workbench.action.openIntroductoryVideosUrl
// - workbench.action.openIssueReporter
// - workbench.action.openLicenseUrl
// - workbench.action.openLogFile
// - workbench.action.openLogsFolder
// - workbench.action.openNewsletterSignupUrl
// - workbench.action.openNextRecentlyUsedEditor
// - workbench.action.openNextRecentlyUsedEditorInGroup
// - workbench.action.openPreviousEditorFromHistory
// - workbench.action.openPreviousRecentlyUsedEditor
// - workbench.action.openPreviousRecentlyUsedEditorInGroup
// - workbench.action.openPrivacyStatementUrl
// - workbench.action.openProcessExplorer
// - workbench.action.openRawDefaultSettings
// - workbench.action.openRemoteSettings
// - workbench.action.openRemoteSettingsFile
// - workbench.action.openRequestFeatureUrl
// - workbench.action.openSettings2
// - workbench.action.openSettingsJson
// - workbench.action.openSnippets
// - workbench.action.openTipsAndTricksUrl
// - workbench.action.openTwitterUrl
// - workbench.action.openView
// - workbench.action.openWalkthrough
// - workbench.action.openWorkspace
// - workbench.action.openWorkspaceConfigFile
// - workbench.action.openWorkspaceInNewWindow
// - workbench.action.openWorkspaceSettings
// - workbench.action.openWorkspaceSettingsFile
// - workbench.action.positionPanelBottom
// - workbench.action.positionPanelLeft
// - workbench.action.positionPanelRight
// - workbench.action.previousPanelView
// - workbench.action.previousSideBarView
// - workbench.action.problems.focus
// - workbench.action.quickOpenLeastRecentlyUsedEditor
// - workbench.action.quickOpenNavigateNext
// - workbench.action.quickOpenNavigateNextInTerminalPicker
// - workbench.action.quickOpenNavigatePrevious
// - workbench.action.quickOpenNavigatePreviousInTerminalPicker
// - workbench.action.quickOpenPreviousEditor
// - workbench.action.quickOpenPreviousRecentlyUsedEditor
// - workbench.action.quickOpenRecent
// - workbench.action.quickOpenSelectNext
// - workbench.action.quickOpenSelectPrevious
// - workbench.action.quickOpenTerm
// - workbench.action.quickPickManyToggle
// - workbench.action.quickSwitchWindow
// - workbench.action.quit
// - workbench.action.reloadWindowWithExtensionsDisabled
// - workbench.action.remote.close
// - workbench.action.remote.extensions
// - workbench.action.remote.showMenu
// - workbench.action.removeRootFolder
// - workbench.action.reopenTextEditor
// - workbench.action.reopenWithEditor
// - workbench.action.reportPerformanceIssueUsingReporter
// - workbench.action.resetFocusedViewLocation
// - workbench.action.resetViewLocations
// - workbench.action.restartExtensionHost
// - workbench.action.revertAndCloseActiveEditor
// - workbench.action.saveWorkspaceAs
// - workbench.action.selectIconTheme
// - workbench.action.selectProductIconTheme
// - workbench.action.setLogLevel
// - workbench.action.showAboutDialog
// - workbench.action.showAllEditorsByMostRecentlyUsed
// - workbench.action.showEditorsInActiveGroup
// - workbench.action.showEditorsInGroup
// - workbench.action.showEmmetCommands
// - workbench.action.showErrorsWarnings
// - workbench.action.showInteractivePlayground
// - workbench.action.showInterfaceOverview
// - workbench.action.showLogs
// - workbench.action.showRuntimeExtensions
// - workbench.action.showWindowLog
// - workbench.action.splitEditorDown
// - workbench.action.splitEditorInGroup
// - workbench.action.splitEditorLeft
// - workbench.action.splitEditorRight
// - workbench.action.splitEditorUp
// - workbench.action.switchWindow
// - workbench.action.tasks.configureDefaultBuildTask
// - workbench.action.tasks.configureDefaultTestTask
// - workbench.action.tasks.configureTaskRunner
// - workbench.action.tasks.manageAutomaticRunning
// - workbench.action.tasks.openUserTasks
// - workbench.action.tasks.openWorkspaceFileTasks
// - workbench.action.tasks.reRunTask
// - workbench.action.tasks.restartTask
// - workbench.action.tasks.runTask
// - workbench.action.tasks.showLog
// - workbench.action.tasks.showTasks
// - workbench.action.tasks.terminate
// - workbench.action.tasks.test
// - workbench.action.tasks.toggleProblems
// - workbench.action.terminal.attachToSession
// - workbench.action.terminal.changeColor
// - workbench.action.terminal.changeColorInstance
// - workbench.action.terminal.changeColorPanel
// - workbench.action.terminal.changeIcon
// - workbench.action.terminal.changeIconInstance
// - workbench.action.terminal.changeIconPanel
// - workbench.action.terminal.clear
// - workbench.action.terminal.createProfileButton
// - workbench.action.terminal.detachSession
// - workbench.action.terminal.focus
// - workbench.action.terminal.focusAtIndex1
// - workbench.action.terminal.focusAtIndex2
// - workbench.action.terminal.focusAtIndex3
// - workbench.action.terminal.focusAtIndex4
// - workbench.action.terminal.focusAtIndex5
// - workbench.action.terminal.focusAtIndex6
// - workbench.action.terminal.focusAtIndex7
// - workbench.action.terminal.focusAtIndex8
// - workbench.action.terminal.focusAtIndex9
// - workbench.action.terminal.joinInstance
// - workbench.action.terminal.kill
// - workbench.action.terminal.moveToEditor
// - workbench.action.terminal.moveToEditorInstance
// - workbench.action.terminal.moveToTerminalPanel
// - workbench.action.terminal.newInActiveWorkspace
// - workbench.action.terminal.newWithProfile
// - workbench.action.terminal.openSettings
// - workbench.action.terminal.relaunch
// - workbench.action.terminal.rename
// - workbench.action.terminal.renamePanel
// - workbench.action.terminal.resizePaneDown
// - workbench.action.terminal.resizePaneLeft
// - workbench.action.terminal.resizePaneRight
// - workbench.action.terminal.resizePaneUp
// - workbench.action.terminal.runActiveFile
// - workbench.action.terminal.runSelectedText
// - workbench.action.terminal.scrollToNextCommand
// - workbench.action.terminal.scrollToPreviousCommand
// - workbench.action.terminal.selectAll
// - workbench.action.terminal.selectDefaultShell
// - workbench.action.terminal.selectToNextCommand
// - workbench.action.terminal.selectToNextLine
// - workbench.action.terminal.selectToPreviousCommand
// - workbench.action.terminal.selectToPreviousLine
// - workbench.action.terminal.showEnvironmentInformation
// - workbench.action.terminal.showTabs
// - workbench.action.terminal.splitInActiveWorkspace
// - workbench.action.terminal.switchTerminal
// - workbench.action.terminal.unsplit
// - workbench.action.terminal.unsplitInstance
// - workbench.action.toggleActivityBarVisibility
// - workbench.action.toggleAutoSave
// - workbench.action.toggleCenteredLayout
// - workbench.action.toggleConfirmBeforeClose
// - workbench.action.toggleEditorType
// - workbench.action.toggleEditorVisibility
// - workbench.action.toggleEditorWidths
// - workbench.action.toggleKeepEditors
// - workbench.action.toggleKeybindingsLog
// - workbench.action.toggleMaximizedPanel
// - workbench.action.toggleMenuBar
// - workbench.action.toggleMultiCursorModifier
// - workbench.action.toggleScreencastMode
// - workbench.action.toggleSearchOnType
// - workbench.action.toggleSharedProcess
// - workbench.action.toggleSidebarPosition
// - workbench.action.toggleSplitEditorInGroup
// - workbench.action.toggleStatusbarVisibility
// - workbench.action.toggleTabsVisibility
// - workbench.action.url.openUrl
// - workbench.action.webview.openDeveloperTools
// - workbench.action.webview.reloadWebviewAction
// - workbench.actions.sync.editMachineName
// - workbench.actions.sync.replaceCurrent
// - workbench.actions.sync.resolveResource
// - workbench.actions.sync.turnOffSyncOnMachine
// - workbench.actions.syncData.reset
// - workbench.actions.treeView.PowerShellCommands.collapseAll
// - workbench.actions.treeView.PowerShellCommands.refresh
// - workbench.actions.treeView.codetour.tours.collapseAll
// - workbench.actions.treeView.codetour.tours.refresh
// - workbench.actions.treeView.detailsContainers.collapseAll
// - workbench.actions.treeView.detailsContainers.refresh
// - workbench.actions.treeView.devVolumes.collapseAll
// - workbench.actions.treeView.devVolumes.refresh
// - workbench.actions.treeView.dockerContainers.collapseAll
// - workbench.actions.treeView.dockerContainers.refresh
// - workbench.actions.treeView.dockerImages.collapseAll
// - workbench.actions.treeView.dockerImages.refresh
// - workbench.actions.treeView.dockerNetworks.collapseAll
// - workbench.actions.treeView.dockerNetworks.refresh
// - workbench.actions.treeView.dockerRegistries.collapseAll
// - workbench.actions.treeView.dockerRegistries.refresh
// - workbench.actions.treeView.dockerVolumes.collapseAll
// - workbench.actions.treeView.dockerVolumes.refresh
// - workbench.actions.treeView.extension.firefox.loadedScripts.collapseAll
// - workbench.actions.treeView.extension.firefox.loadedScripts.refresh
// - workbench.actions.treeView.gistpad.gists.collapseAll
// - workbench.actions.treeView.gistpad.gists.refresh
// - workbench.actions.treeView.gistpad.repos.collapseAll
// - workbench.actions.treeView.gistpad.repos.refresh
// - workbench.actions.treeView.gistpad.showcase.collapseAll
// - workbench.actions.treeView.gistpad.showcase.refresh
// - workbench.actions.treeView.github:activePullRequest:welcome.collapseAll
// - workbench.actions.treeView.github:activePullRequest:welcome.refresh
// - workbench.actions.treeView.github:compareChanges.collapseAll
// - workbench.actions.treeView.github:compareChanges.refresh
// - workbench.actions.treeView.github:login.collapseAll
// - workbench.actions.treeView.github:login.refresh
// - workbench.actions.treeView.gitlens.views.branches.collapseAll
// - workbench.actions.treeView.gitlens.views.branches.refresh
// - workbench.actions.treeView.gitlens.views.commits.collapseAll
// - workbench.actions.treeView.gitlens.views.commits.refresh
// - workbench.actions.treeView.gitlens.views.contributors.collapseAll
// - workbench.actions.treeView.gitlens.views.contributors.refresh
// - workbench.actions.treeView.gitlens.views.fileHistory.collapseAll
// - workbench.actions.treeView.gitlens.views.fileHistory.refresh
// - workbench.actions.treeView.gitlens.views.lineHistory.collapseAll
// - workbench.actions.treeView.gitlens.views.lineHistory.refresh
// - workbench.actions.treeView.gitlens.views.remotes.collapseAll
// - workbench.actions.treeView.gitlens.views.remotes.refresh
// - workbench.actions.treeView.gitlens.views.repositories.collapseAll
// - workbench.actions.treeView.gitlens.views.repositories.refresh
// - workbench.actions.treeView.gitlens.views.searchAndCompare.collapseAll
// - workbench.actions.treeView.gitlens.views.searchAndCompare.refresh
// - workbench.actions.treeView.gitlens.views.stashes.collapseAll
// - workbench.actions.treeView.gitlens.views.stashes.refresh
// - workbench.actions.treeView.gitlens.views.tags.collapseAll
// - workbench.actions.treeView.gitlens.views.tags.refresh
// - workbench.actions.treeView.gitlens.views.updates.collapseAll
// - workbench.actions.treeView.gitlens.views.updates.refresh
// - workbench.actions.treeView.gitlens.views.welcome.collapseAll
// - workbench.actions.treeView.gitlens.views.welcome.refresh
// - workbench.actions.treeView.issues:github.collapseAll
// - workbench.actions.treeView.issues:github.refresh
// - workbench.actions.treeView.jsBrowserBreakpoints.collapseAll
// - workbench.actions.treeView.jsBrowserBreakpoints.refresh
// - workbench.actions.treeView.npm.collapseAll
// - workbench.actions.treeView.npm.refresh
// - workbench.actions.treeView.pr:github.collapseAll
// - workbench.actions.treeView.pr:github.refresh
// - workbench.actions.treeView.prStatus:github.collapseAll
// - workbench.actions.treeView.prStatus:github.refresh
// - workbench.actions.treeView.references-view.tree.collapseAll
// - workbench.actions.treeView.references-view.tree.refresh
// - workbench.actions.treeView.remoteHub.views.workspaceRepositories.collapseAll
// - workbench.actions.treeView.remoteHub.views.workspaceRepositories.refresh
// - workbench.actions.treeView.repl.filter
// - workbench.actions.treeView.snippets.view.collapseAll
// - workbench.actions.treeView.snippets.view.refresh
// - workbench.actions.treeView.sshHosts.collapseAll
// - workbench.actions.treeView.sshHosts.refresh
// - workbench.actions.treeView.targetsContainers.collapseAll
// - workbench.actions.treeView.targetsContainers.refresh
// - workbench.actions.treeView.targetsWsl.collapseAll
// - workbench.actions.treeView.targetsWsl.refresh
// - workbench.actions.treeView.test-explorer.collapseAll
// - workbench.actions.treeView.test-explorer.refresh
// - workbench.actions.treeView.testExplorer.filter
// - workbench.actions.treeView.todo-tree-view.collapseAll
// - workbench.actions.treeView.todo-tree-view.refresh
// - workbench.actions.treeView.vscode-docker.views.dockerContexts.collapseAll
// - workbench.actions.treeView.vscode-docker.views.dockerContexts.refresh
// - workbench.actions.treeView.vscode-docker.views.help.collapseAll
// - workbench.actions.treeView.vscode-docker.views.help.refresh
// - workbench.actions.treeView.workbench.panel.markers.view.collapseAll
// - workbench.actions.treeView.workbench.panel.markers.view.filter
// - workbench.actions.treeView.workbench.views.sync.localActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.localActivity.refresh
// - workbench.actions.treeView.workbench.views.sync.machines.collapseAll
// - workbench.actions.treeView.workbench.views.sync.machines.refresh
// - workbench.actions.treeView.workbench.views.sync.merges.collapseAll
// - workbench.actions.treeView.workbench.views.sync.merges.refresh
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.collapseAll
// - workbench.actions.treeView.workbench.views.sync.remoteActivity.refresh
// - workbench.actions.treeView.workbench.views.sync.troubleshoot.collapseAll
// - workbench.actions.treeView.workbench.views.sync.troubleshoot.refresh
// - workbench.actions.treeView.zipExplorer.collapseAll
// - workbench.actions.treeView.zipExplorer.refresh
// - workbench.actions.view.toggleProblems
// - workbench.debug.action.copyAll
// - workbench.debug.action.focusBreakpointsView
// - workbench.debug.action.focusCallStackView
// - workbench.debug.action.focusRepl
// - workbench.debug.action.focusVariablesView
// - workbench.debug.action.focusWatchView
// - workbench.debug.breakPointsView.resetViewLocation
// - workbench.debug.callStackView.resetViewLocation
// - workbench.debug.loadedScriptsView.focus
// - workbench.debug.loadedScriptsView.resetViewLocation
// - workbench.debug.panel.action.clearReplAction
// - workbench.debug.variablesView.resetViewLocation
// - workbench.debug.viewlet.action.addFunctionBreakpointAction
// - workbench.debug.viewlet.action.addWatchExpression
// - workbench.debug.viewlet.action.copyValue
// - workbench.debug.viewlet.action.disableAllBreakpoints
// - workbench.debug.viewlet.action.enableAllBreakpoints
// - workbench.debug.viewlet.action.reapplyBreakpointsAction
// - workbench.debug.viewlet.action.removeAllBreakpoints
// - workbench.debug.viewlet.action.removeAllWatchExpressions
// - workbench.debug.viewlet.action.removeBreakpoint
// - workbench.debug.viewlet.action.toggleBreakpointsActivatedAction
// - workbench.debug.watchExpressionsView.resetViewLocation
// - workbench.debug.welcome.focus
// - workbench.debug.welcome.removeView
// - workbench.debug.welcome.resetViewLocation
// - workbench.debug.welcome.toggleVisibility
// - workbench.explorer.emptyView.removeView
// - workbench.explorer.emptyView.resetViewLocation
// - workbench.explorer.emptyView.toggleVisibility
// - workbench.explorer.fileView.focus
// - workbench.explorer.openEditorsView.removeView
// - workbench.explorer.openEditorsView.resetViewLocation
// - workbench.explorer.openEditorsView.toggleVisibility
// - workbench.extensions.action.addExtensionToWorkspaceRecommendations
// - workbench.extensions.action.addToWorkspaceFolderIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceFolderRecommendations
// - workbench.extensions.action.addToWorkspaceIgnoredRecommendations
// - workbench.extensions.action.addToWorkspaceRecommendations
// - workbench.extensions.action.checkForUpdates
// - workbench.extensions.action.clearExtensionsSearchResults
// - workbench.extensions.action.configure
// - workbench.extensions.action.configureWorkspaceFolderRecommendedExtensions
// - workbench.extensions.action.configureWorkspaceRecommendedExtensions
// - workbench.extensions.action.copyExtension
// - workbench.extensions.action.copyExtensionId
// - workbench.extensions.action.debugExtensionHost
// - workbench.extensions.action.disableAll
// - workbench.extensions.action.disableAllWorkspace
// - workbench.extensions.action.disableAutoUpdate
// - workbench.extensions.action.enableAll
// - workbench.extensions.action.enableAllWorkspace
// - workbench.extensions.action.enableAutoUpdate
// - workbench.extensions.action.extensionHostProfile
// - workbench.extensions.action.ignoreRecommendation
// - workbench.extensions.action.install.specificVersion
// - workbench.extensions.action.installExtensions
// - workbench.extensions.action.installVSIX
// - workbench.extensions.action.installWebExtensionFromLocation
// - workbench.extensions.action.installWorkspaceRecommendedExtensions
// - workbench.extensions.action.listBuiltInExtensions
// - workbench.extensions.action.listOutdatedExtensions
// - workbench.extensions.action.listWorkspaceUnsupportedExtensions
// - workbench.extensions.action.manageAuthorizedExtensionURIs
// - workbench.extensions.action.openExtensionsFolder
// - workbench.extensions.action.recentlyPublishedExtensions
// - workbench.extensions.action.refreshExtension
// - workbench.extensions.action.reinstall
// - workbench.extensions.action.removeExtensionFromWorkspaceRecommendations
// - workbench.extensions.action.saveExtensionHostProfile
// - workbench.extensions.action.showDisabledExtensions
// - workbench.extensions.action.showEnabledExtensions
// - workbench.extensions.action.showExtensionsForLanguage
// - workbench.extensions.action.showExtensionsWithIds
// - workbench.extensions.action.showInstalledExtensions
// - workbench.extensions.action.showLanguageExtensions
// - workbench.extensions.action.showPopularExtensions
// - workbench.extensions.action.showRecommendedExtensions
// - workbench.extensions.action.stopExtensionHostProfile
// - workbench.extensions.action.toggleIgnoreExtension
// - workbench.extensions.action.undoIgnoredRecommendation
// - workbench.extensions.action.updateAllExtensions
// - workbench.extensions.command.installFromVSIX
// - workbench.extensions.installMissingDependencies
// - workbench.files.action.acceptLocalChanges
// - workbench.files.action.collapseExplorerFolders
// - workbench.files.action.compareFileWith
// - workbench.files.action.createFileFromExplorer
// - workbench.files.action.createFolderFromExplorer
// - workbench.files.action.focusFilesExplorer
// - workbench.files.action.refreshFilesExplorer
// - workbench.files.action.revertLocalChanges
// - workbench.files.action.saveAllInGroup
// - workbench.files.action.showActiveFileInExplorer
// - workbench.getCodeExchangeProxyEndpoints
// - workbench.notebook.layout.configure
// - workbench.notebook.layout.configure.editorTitle
// - workbench.notebook.layout.gettingStarted
// - workbench.notebook.layout.select
// - workbench.output.action.clearOutput
// - workbench.output.action.switchBetweenOutputs
// - workbench.output.action.toggleAutoScroll
// - workbench.panel.comments
// - workbench.panel.comments.removeView
// - workbench.panel.comments.resetViewContainerLocation
// - workbench.panel.comments.resetViewLocation
// - workbench.panel.comments.toggleVisibility
// - workbench.panel.markers.resetViewContainerLocation
// - workbench.panel.markers.view.focus
// - workbench.panel.markers.view.removeView
// - workbench.panel.markers.view.resetViewLocation
// - workbench.panel.markers.view.toggleVisibility
// - workbench.panel.output.focus
// - workbench.panel.output.removeView
// - workbench.panel.output.resetViewContainerLocation
// - workbench.panel.output.resetViewLocation
// - workbench.panel.output.toggleVisibility
// - workbench.panel.repl.resetViewContainerLocation
// - workbench.panel.repl.view.focus
// - workbench.panel.repl.view.removeView
// - workbench.panel.repl.view.resetViewLocation
// - workbench.panel.repl.view.toggleVisibility
// - workbench.scm.action.collapseAllRepositories
// - workbench.scm.action.expandAllRepositories
// - workbench.scm.action.setListViewMode
// - workbench.scm.action.setSortKey.name
// - workbench.scm.action.setSortKey.path
// - workbench.scm.action.setSortKey.status
// - workbench.scm.action.setTreeViewMode
// - workbench.scm.focus
// - workbench.scm.removeView
// - workbench.scm.repositories.focus
// - workbench.scm.repositories.resetViewLocation
// - workbench.scm.resetViewLocation
// - workbench.scm.toggleVisibility
// - workbench.trust.configure
// - workbench.trust.manage
// - workbench.userData.actions.askToTunrOnAfterInit
// - workbench.userData.actions.openSyncBackupsFolder
// - workbench.userData.actions.signin
// - workbench.userData.actions.turningOn
// - workbench.userDataSync.actions.configure
// - workbench.userDataSync.actions.help
// - workbench.userDataSync.actions.manage
// - workbench.userDataSync.actions.resolveKeybindingsConflicts
// - workbench.userDataSync.actions.resolveSettingsConflicts
// - workbench.userDataSync.actions.resolveSnippetsConflicts
// - workbench.userDataSync.actions.settings
// - workbench.userDataSync.actions.showLog
// - workbench.userDataSync.actions.showSyncedData
// - workbench.userDataSync.actions.syncNow
// - workbench.userDataSync.actions.turnOff
// - workbench.userDataSync.actions.turnOn
// - workbench.view.debug.resetViewContainerLocation
// - workbench.view.explorer.resetViewContainerLocation
// - workbench.view.extension.PowerShellCommandExplorer
// - workbench.view.extension.PowerShellCommandExplorer.resetViewContainerLocation
// - workbench.view.extension.dockerView
// - workbench.view.extension.dockerView.resetViewContainerLocation
// - workbench.view.extension.gistpad
// - workbench.view.extension.gistpad.resetViewContainerLocation
// - workbench.view.extension.github-pull-request
// - workbench.view.extension.github-pull-request.resetViewContainerLocation
// - workbench.view.extension.github-pull-requests
// - workbench.view.extension.github-pull-requests.resetViewContainerLocation
// - workbench.view.extension.gitlens
// - workbench.view.extension.gitlens.resetViewContainerLocation
// - workbench.view.extension.jupyter-variables
// - workbench.view.extension.jupyter-variables.resetViewContainerLocation
// - workbench.view.extension.references-view
// - workbench.view.extension.references-view.resetViewContainerLocation
// - workbench.view.extension.snippets-viewer
// - workbench.view.extension.snippets-viewer.resetViewContainerLocation
// - workbench.view.extension.test
// - workbench.view.extension.test.resetViewContainerLocation
// - workbench.view.extension.thunder-client-sidebar-view
// - workbench.view.extension.thunder-client-sidebar-view.resetViewContainerLocation
// - workbench.view.extension.todo-tree-container
// - workbench.view.extension.todo-tree-container.resetViewContainerLocation
// - workbench.view.extension.vsc-github-projects-view
// - workbench.view.extension.vsc-github-projects-view.resetViewContainerLocation
// - workbench.view.extensions.resetViewContainerLocation
// - workbench.view.remote
// - workbench.view.remote.resetViewContainerLocation
// - workbench.view.scm.resetViewContainerLocation
// - workbench.view.search.focus
// - workbench.view.search.removeView
// - workbench.view.search.resetViewContainerLocation
// - workbench.view.search.resetViewLocation
// - workbench.view.search.toggleVisibility
// - workbench.view.sync
// - workbench.view.sync.resetViewContainerLocation
// - workbench.view.testing.focus
// - workbench.view.testing.resetViewLocation
// - workbench.views.extensions.builtinFeatureExtensions.focus
// - workbench.views.extensions.builtinFeatureExtensions.resetViewLocation
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.focus
// - workbench.views.extensions.builtinProgrammingLanguageExtensions.resetViewLocation
// - workbench.views.extensions.builtinThemeExtensions.focus
// - workbench.views.extensions.builtinThemeExtensions.resetViewLocation
// - workbench.views.extensions.disabled.focus
// - workbench.views.extensions.disabled.resetViewLocation
// - workbench.views.extensions.enabled.focus
// - workbench.views.extensions.enabled.resetViewLocation
// - workbench.views.extensions.installed.empty.focus
// - workbench.views.extensions.installed.empty.resetViewLocation
// - workbench.views.extensions.installed.focus
// - workbench.views.extensions.installed.resetViewLocation
// - workbench.views.extensions.marketplace.focus
// - workbench.views.extensions.marketplace.resetViewLocation
// - workbench.views.extensions.otherRecommendations.focus
// - workbench.views.extensions.otherRecommendations.resetViewLocation
// - workbench.views.extensions.popular.focus
// - workbench.views.extensions.popular.resetViewLocation
// - workbench.views.extensions.searchBuiltin.focus
// - workbench.views.extensions.searchBuiltin.resetViewLocation
// - workbench.views.extensions.searchDisabled.focus
// - workbench.views.extensions.searchDisabled.resetViewLocation
// - workbench.views.extensions.searchEnabled.focus
// - workbench.views.extensions.searchEnabled.resetViewLocation
// - workbench.views.extensions.searchInstalled.focus
// - workbench.views.extensions.searchInstalled.resetViewLocation
// - workbench.views.extensions.searchOutdated.focus
// - workbench.views.extensions.searchOutdated.resetViewLocation
// - workbench.views.extensions.searchWorkspaceUnsupported.focus
// - workbench.views.extensions.searchWorkspaceUnsupported.resetViewLocation
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.focus
// - workbench.views.extensions.untrustedPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.untrustedUnsupportedExtensions.focus
// - workbench.views.extensions.untrustedUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualPartiallySupportedExtensions.focus
// - workbench.views.extensions.virtualPartiallySupportedExtensions.resetViewLocation
// - workbench.views.extensions.virtualUnsupportedExtensions.focus
// - workbench.views.extensions.virtualUnsupportedExtensions.resetViewLocation
// - workbench.views.extensions.workspaceRecommendations.focus
// - workbench.views.extensions.workspaceRecommendations.resetViewLocation
// - workbench.views.sync.localActivity.focus
// - workbench.views.sync.localActivity.resetViewLocation
// - workbench.views.sync.machines.focus
// - workbench.views.sync.machines.resetViewLocation
// - workbench.views.sync.merges.focus
// - workbench.views.sync.merges.resetViewLocation
// - workbench.views.sync.remoteActivity.focus
// - workbench.views.sync.remoteActivity.resetViewLocation
// - workbench.views.sync.troubleshoot.focus
// - workbench.views.sync.troubleshoot.resetViewLocation
// - wwm.aligncode
// - xml.command.bind.grammar
// - xml.open.docs.home
// - xml.validation.all.files
// - xml.validation.current.file
// - zipExplorer.focus
// - zipExplorer.removeView
// - zipExplorer.resetViewLocation
// - zipExplorer.toggleVisibility
// - zipexplorer.clear
// - zipexplorer.exploreZipFile
// - zipexplorer.extractElement
// - zipexplorer.extractFiles
// - zipexplorer.extractHere