{
    /*

    Snippets: Powershell
        [ code ]

    Description:

    todo:
        - [ ] autocollect -> dotfiles_github

    Refs:
        snippet pattern examples:
            <https://gist.github.com/ninmonkey/4fe8062d5ad1b2ad17e6f91a96984851>

            transforming input: <https://code.visualstudio.com/docs/editor/userdefinedsnippets#_transform-examples>
            new: snippet variables: <https://code.visualstudio.com/updates/v1_53#_new-snippet-variables>
            docs: <https://code.visualstudio.com/docs/editor/userdefinedsnippets>
        dotfiles:
            $Env:userprofile\Documents\2020\MyModules_Github\VSCode-ConfigSnippets\snippet\powershell.json


        from: <https://github.com/ninmonkey/Ninmonkey.PowerQueryLib/blob/master/.vscode/snippets.code-snippets>

        extension dir:
            $Env:UserProfile\.vscode\extensions\ms-vscode.powershell[-preview]-<version>\snippets\PowerShell.json
        see:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_choice

    see also:
        https://github.com/PowerShell/vscode-powershell/blob/master/docs/community_snippets.md

    */
    /*
    Add one like
        $_.psobject.properties | %{ $_.Name, $_.value -join ' = ' }

    */
    "Snippet ‚á¢ PSObject Properties": {
        /*

        input:

            $x

        output:

            $x.psobject.properties | ForEach-Object {
               $_.TypeNameOfValue, $_.Name, $_.value -join ' = '
            }

        */
        "prefix": "listProps : PSObject.properties : üêí",
        "body": [
            // $_.TypeNameOfValue, $_.Name, $_.value -join ' = '
            "${TM_SELECTED_TEXT}.psobject.properties | ForEach-Object {",
            // "   $$_.${2:$$_.$$_.Name, $$_.value -join ' = '}",
            "   ${2:$$_.TypeNameOfValue, $$_.Name, $$_.value -join ' = '}",
            "}"
        ],
        "description": "inline definition to enumerate over '$_.PSObject.Properties' "
    },
    // "üêíregex: ($‚êÄ)?.NullConditional": {
    //     "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
    //     "prefix": "?.NullConditional : selection",
    //     "description": "($‚êÄ) Transforms \" ‚áí \\\"",
    //     "body": [
    //         "(${1:$TM_SELECTED_TEXT})?{0}"
    //     ]
    // },
    "Requires Version üêí 7": {
        "prefix": "req7 requires-version | nin üêí",
        "body": "#Requires -Version ${1:7}\n$0",
        "description": "Requires üêí a minimum version of PowerShell in order to execute the containing script file."
    },
    "herestring variables": {
        "prefix": "hereStr : Variable üêí",
        "body": [
            "@\"",
            "${1:$TM_SELECTED_TEXT}",
            "\"@",
            "${0}"
        ],
        "description": "Interpolated Here-string. Intended  to be hotkey only, when there's a selection to wrap "
    },
    "Exception ‚á¢ Basic Catch üêí": {
        "prefix": "Try Catch Exception ‚á¢ Basic üêí",
        "description": "minimal catch | Supports selected text.",
        "body": [
            // "",
            "try {",
            "    ${1:${TM_SELECTED_TEXT}}",
            "    ${0}",
            "}",
            "catch {",
            "    \\$PSCmdlet.WriteError(\\$_)",
            "}",
            // "",
        ]
    },
    "herestring literal": {
        "prefix": "hereStr : Literal üêí Literal Herestring",
        "body": [
            "@'",
            "${1:$TM_SELECTED_TEXT}",
            "'@",
            "${0}"
        ],
        "description": "Literals Here-String. Intended  to be hotkey only, when there's a selection to wrap"
    },
    "[from_insiders]Completer ‚á¢ PS6 ‚á¢ IArgumentCompleter Classüêí": {
        "prefix": "[from_insiders]completer-nin-IArgumentCompleter",
        "description": "PS6+ IArgumentCompleter class",
        "body": [
            "# requires PS6+ (verify): <https://gist.github.com/ninmonkey/dd90aa7a1641b6643cfd904557115909>",
            "# snippet WIP",
            "class ${1:ArgumentCompleter} : System.Management.Automation.IArgumentCompleter {",
            "\t[System.Collections.Generic.IEnumerable[System.Management.Automation.CompletionResult]] CompleteArgument(",
            "\t\t[string] \\$CommandName,",
            "\t\t[string] \\$ParameterName,",
            "\t\t[string] \\$WordToComplete,",
            "\t\t[System.Management.Automation.Language.CommandAst] \\$CommandAst,",
            "\t\t[System.Collections.IDictionary] \\$FakeBoundParameters",
            "\t) {",
            "\t\t\\$CompletionResults = [System.Collections.Generic.List[System.Management.Automation.CompletionResult]]::new()",
            "\t\t",
            "\t\t${0:$TM_SELECTED_TEXT}",
            "\t\t",
            "\t\treturn \\$CompletionResults",
            "\t}",
            "}"
        ],
    },
    "Func ‚á¢ User $Options @{..} ‚á¢ üêí": {
        "prefix": "Function ‚á¢ Options üêí",
        "description": "nin func with $Config defaults plus user -Options @{..} üêí",
        "body": [
            "function Verb-Noun {",
            "    <#",
            "        .synopsis",
            "            .",
            "        .notes",
            "            .",
            "        .example   ",
            "            PS> Verb-Noun -Options @{ Title='Other' }",
            "        #>",
            "    # [outputtype( [string[]] )]",
            "    # [Alias('x')]",
            "    [cmdletbinding()]",
            "    param(",
            "        # docs",
            "        # [Alias('y')]",
            "        [parameter(Mandatory, Position = 0, ValueFromPipeline)]",
            "        [object]\\$InputObject, ",
            "    ",
            "        # extra options",
            "        [Parameter()][hashtable]\\$Options",
            "    )",
            "    begin {",
            "        [hashtable]\\$ColorType = Join-Hashtable \\$ColorType (\\$Options.ColorType ?? @{})       ",
            "        [hashtable]\\$Config = @{",
            "            AlignKeyValuePairs = \\$true",
            "            Title              = 'Default'",
            "            DisplayTypeName    = \\$true",
            "        }",
            "        \\$Config = Join-Hashtable \\$Config (\\$Options ?? @{})        ",
            "    }",
            "    process {}",
            "    end {}",
            "}"
        ]
    },
    "[from_insiders]Parameter ‚á¢ Completion ‚á¢ Suggest": {
        "description": "[from_insiders]üêí‚Åû PS6 ArgumentCompletions() suggest without validation [Parameter()]",
        "prefix": "completer-nin-suggestüêí",
        "body": [
            "[Parameter(Mandatory, Position = 0)]",
            "[ArgumentCompletions(",
            "    '${1:one}'",
            "[string]\\$${2:InputName},",
            "${0}",
        ],
    },
    "[from_insiders]Parameter 2‚á¢ Basic": {
        "description": "[from_insiders]nin 2‚Åû A basic [Parameter()]",
        "prefix": "Parameter üêí default",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(${2:Mandatory, Position = 0})]",
            "[${3:object}]$${4:ParameterName}${0}",
        ],
    },
    "$PSCommandlet ‚á¢ ThrowTerminatingError": {
        /*
            This doesn't have a fancy template choice
            this gives you a cleaner experience than the choice-box
            */
        "prefix": "ThrowTerminatingError() : üêí",
        "body": [
            "\\$PSCmdlet.ThrowTerminatingError(",
            "    [ErrorRecord]::new(",
            "        [InvalidOperationException]::new('${1:My message}', \\$_.Exception),",
            "        '${2:MyId}',",
            "        '${3:MyCategory}',",
            "        \\$${4:myTarget}))${0}",
        ],
        "description": "a quick Parameter()"
    },
    "Parameter ‚á¢ Basic": {
        /*
            This doesn't have a fancy template choice
            this gives you a cleaner experience than the choice-box
            */
        "prefix": "Parameter nin : üêí",
        "body": [
            "# ${3} ",
            "[Parameter(${1:Mandatory, Position = 0})]",
            "${2:[string]$$Name},"
            // "[${3:object}]$${4:ParameterName}$0",
        ],
        "description": "a quick Parameter()"
    },
    "Parameter 2‚á¢ Basic": {
        "description": "nin 2‚Åû A basic [Parameter()]",
        "prefix": "Parameter üêí default",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(${2:Mandatory, Position = 0})]",
            "[${3:object}]$${4:ParameterName}${0}",
        ],
    },
    "[fromInsiders] Parameter 3‚á¢ Basic": {
        "description": "[fromInsiders]  MinimalParma: nin 2‚Åû A basic [Parameter()]",
        "prefix": "zparam", // paramznparam nin | Parameter üêí",
        "body": [
            //     "# y",
            // "[Parameter()]$x,"
            //     ""
            "#${4:Docstring}",
            "[Parameter(${1:Mandatory, Position = 0})]",
            "[${2:object}]\\$${3:ParameterName}${0:,}",
        ],
    },
    "Dev.Nin ‚á¢ Template": {
        /*
        */
        "prefix": "Dev.ninüß™ Func Template üêí",
        "description": "a quick dev.nin template",
        "body": [
            "#Requires -Version 7",
            "",
            "if ( \\$experimentToExport ) {",
            "    \\$experimentToExport.function += @(",
            "         ${1:# ''}",
            "    )",
            "    \\$experimentToExport.alias += @(",
            "         ${2:# ''}",
            "    )",
            "}",
            "",
            "${0:$TM_SELECTED_TEXT}",
            "",
            "if (! \\$experimentToExport) {",
            "    # ...",
            "}",
        ],
    },
    "Parameter ‚á¢ Simple (extra tabstop choices)": {
        // a little more complicated
        // "prefix": "Parameter nin : üêí ChoiceBox",
        "prefix": "Parameter ‚á¢ Simple (extra tabstop choices) üêí",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(${2:Mandatory, Position = 0})]",
            "[${3:object}]$${4:ParameterName}$0",
        ],
        // "body": [
        //     "# ${1:Docstring}",
        //     "[Parameter(${2:Mandatory, Position = 0})]",
        //     "[${3:object}]$${4:ParameterName}$0",
        // ],
        "description": "nin ‚Åû A basic [Parameter()]"
    },
    // "Function 2‚á¢ Cmdlet": {
    //     "prefix": "ToAsk: Function‚á¢ [CmdletBinding] üêí",
    //     "description": "nin 2‚Åû CmdletBinding with initial params",
    //     "body": [
    //         "[CmdletBinding(",
    //         "",
    //         ")]",
    //         "param (",
    //         "    # ${3:docstring}",
    //         "    [Parameter(Mandatory, Position = 0,",
    //         "wip -- do the always CmdletWriteError",
    //         "in the try catch",
    //         "in the try here",
    //         // Best practice is to use doc strings, not the attribute
    //         // "        ",
    //         "    [${1:TypeName}]$${2:ParameterName}$0",
    //         ")"
    //     ]
    // },
    // "CmdletBinding()": {
    //     "prefix": "WIP -- [CmdletBinding()]",
    //     "description": "nin ‚Åû CmdletBinding with initial params",
    // "Func ‚á¢ User $Options @{..} ‚á¢ üêí": {
    // "prefix": "Function ‚á¢ Options üêí",
    // "description": "nin func with $Config defaults plus user -Options @{..} üêí",
    // nin ‚Åû The important
    "Generics ‚á¢ List<T> ‚á¢ üêí": {
        "prefix": "list [List<T>] üêí",
        "description": "nin ‚Åû Generics List",
        "body": [
            "[list[${1:object}]]\\$${2:items} = [list[${1:object}]]::new()",
        ],
    },
    "basic ‚á¢ [Hashtable] ‚á¢ üêí": {
        "prefix": "dict.hash [hashtable] üêí",
        "description": "nin ‚Åû hashtable",
        "body": [
            "[hashtable]\\$${1:meta} = @{",
            "   ${2:key} = ${3:value}",
            "}",
        ],
    },
    "Func ‚á¢ Pipeline üêí": {
        "prefix": "Function ‚á¢ Pipeline üêí",
        "description": "Defaults for a  new functionüêí",
        "body": [
            "function ${1:Get-Foo} {",
            "    <#",
            "    .synopsis",
            "        ${2:Stuff}",
            "    .description",
            "       .",
            // "        ${3:Desc}",
            "    .example",
            "          .",
            "    .outputs",
            "          [string | None]",
            "    ",
            "    #>",
            "    [CmdletBinding(PositionalBinding = \\$false)]",
            "    param(",
            "       [Parameter(Mandatory, Position = 0)]",
            "       [string]\\$Name",
            // "        ${4}",
            "    )",
            "    ",
            "    begin {}",
            "    process {",
            "       ${0:${TM_SELECTED_TEXT}}", // to use selected text, see: "Function ‚á¢ Tiny"
            // "    # todo: always wrap CmdletExceptionWrapper: From Sci",
            "    }",
            "    end {}",
            "}"
        ]
    },
    "Func ‚á¢ Pipeline ‚á¢ Collect Allüêí": {
        "prefix": "Function ‚á¢ Collect All Pipeline üêí",
        "description": "Collects all objects from the pipeline üêí",
        "body": [
            "function ${1:Get-Foo} {",
            "    <#",
            "    .synopsis",
            "        ${2:Stuff}",
            "    .description",
            "       .",
            "    .example",
            "          .",
            "    .outputs",
            "          [string | None]",
            "    ",
            "    #>",
            "    [CmdletBinding(PositionalBinding = \\$false)]",
            "    param(",
            "        [Parameter(Mandatory, Position = 0)]",
            "        [string]\\$Name",
            // "        ${4}",
            "    )",
            "    ",
            "    begin {",
            "        \\$NameList = [list[string]]::new()",
            "    }",
            "    process {",
            "        \\$Name | ForEach-Object {",
            "            \\$NameList.Add( \\$_ )",
            "        }",
            "    }",
            // "       ${0:${TM_SELECTED_TEXT}}", // to use selected text, see: "Function ‚á¢ Tiny"
            // "    # todo: always wrap CmdletExceptionWrapper: From Sci",
            "    end {",
            "        \\$NameList",
            "    }",
            "}"
        ]
    },
    "Func ‚á¢ Basic üêí": {
        "prefix": "Function ‚á¢ Basic üêí",
        "description": "Minimal defaults | Supports selected text.",
        "body": [
            "function ${1:Get-Foo} {",
            "    <#",
            "    .synopsis",
            "        ${2:Stuff}",
            "    .description",
            "        .",
            "    ",
            "    #>",
            "    [CmdletBinding(PositionalBinding = \\$false)]",
            "    param(",
            "        ${0}",
            "    )",
            "    ${4:${TM_SELECTED_TEXT}}", // works.. not sure whether I want to use selection
            "}"
        ]
    },
    // "Labelüêà": {
    //     "prefix": "prefixüê∂",
    //     "description": "descriptionü¶Ü",
    //     "body": [
    //         "bodyü¶á"
    //     ]
    // },
    "CalculatedProperty": {
        "prefix": "Calculated-Property ‚á¢ SingleLine üêí",
        "body": [
            "@{name='${1:PropertyName}';expression={${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}}}$0"
        ],
        "description": "nin ‚Åû a CalculatedProperty on a Single Line",
    },
    "CalculatedProperty: Multiline": {
        "prefix": "Calculated-Property ‚á¢ MultiLine üêí",
        "body": [
            "@{",
            "    Name = '${1:PropertyName}'",
            "    Expression = {",
            "        ${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}",
            "   }",
            "}",
            "$0"
        ],
        "description": "nin ‚Åû a CalculatedProperty using multiple lines",
    },
    "IfShouldProcess": {
        "prefix": "IfShouldProcess : <Selection> üêí",
        "description": "nin ‚Åû Creates ShouldProcess block from your Selection",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"${1:Target}\", \"${2:Operation}\")) {",
            "    ${0:$TM_SELECTED_TEXT}",
            "}"
        ],
    },
    "Parameter ‚á¢ Switch": {
        "prefix": "Param ‚á¢ [Switch] üêí",
        "description": "nin ‚Åû adds a [switch] parameter",
        "body": [
            "# ${1:Docstring}",
            "[Parameter()][switch]\\$${0}"
        ]
    },
    // "Function ‚á¢ Basic": {
    //     "prefix": "Function ‚á¢ Basic",
    //     "description": "nin ‚Åû A basic function",
    //     "body": [
    //         "function ${1:Name} {",
    //         "    <#",
    //         "    .synopsis",
    //         "        ${2}",
    //         "    .description",
    //         "        .",
    //         "    .example",
    //         "        PS>",
    //         "    .notes",
    //         "        .",
    //         "    #>",
    //         "    param (",
    //         "        ${0}",
    //         "    )",
    //         "    begin {}",
    //         "    process {}",
    //         "    end {}",
    //         "}",
    //     ],
    // },
    "Parameter: Completer ‚á¢ ValidateSet": {
        "prefix": "Param ‚á¢ Completer | [ValidateSet] üêí",
        // "prefix": "Completer ‚á¢ ValidateSet",
        "description": "nin ‚Åû Autocompleter parameter from a static list using ValidateSet()",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(",
            "    ${2:Mandatory}, ${3:Position = 0},",
            "    [ValidateSet(${4})]",
            "    [string[]]$${5:ParameterName})",
            "$0",
        ],
    },
    "Parameter: Completer 2 ‚á¢ ValidateSet": {
        "prefix": "Param 2‚á¢ Completer | [ValidateSet] üêí",
        // "prefix": "Completer ‚á¢ ValidateSet",
        "description": "nin 2‚Åû Autocompleter parameter from a static list using ValidateSet()",
        "body": [
            "# ${1:Docstring}",
            "[ValidateSet(${2:'a', 'b'})]",
            "[Parameter(${3:Mandatory, Position = 0})]",
            "[string[]]$${4:ParameterName}",
            "${0}"
        ],
    },
    "Switch ‚á¢ ParameterSetNameSwitch": {
        "prefix": "Switch ‚á¢ $PSCmdlet.ParameterSetName { .. } : üêí",
        "description": "nin ‚Åû Template for a switch with ParameterSetNames",
        "body": [
            "switch (\\$PSCmdlet.ParameterSetName) {",
            "    ${1:'x'} {",
            "        ${2}",
            "        break",
            "    }",
            "    ${0}",
            "    default {",
            "        throw \"Unhandled ParameterSet: $(\\$PSCmdlet.ParameterSetName)\"",
            "    }",
            "}",
        ]
    },
    "Web ‚á¢ Invoke-RestMethod": {
        "prefix": "Web ‚á¢ Invoke-RestMethod üêí",
        "description": "nin ‚Åû Invoke-RestMethod | template saves response data",
        "body": [
            "\\$splat_irm = @{",
            "    Uri                     = '${1:$TM_SELECTED_TEXT}'",
            "    Body                    = @{",
            "        ${2}",
            "    }",
            "    # Form = @{}",
            "    Method                  = 'Get'",
            "    SessionVariable         = 'sess_var'",
            "    StatusCodeVariable      = 'status_var'",
            "    ResponseHeadersVariable = 'response_var'",
            "    # ContentType = ''",
            "    # TimeoutSec = 0",
            "    # Token = 'foo'",
            "    # Authentication = 'OAuth'",
            "    Headers                 = @{}",
            "}",
            "",
            "\\$Response ??= Invoke-RestMethod @splat_irm${0}",
        ],
    },
    "Help ‚á¢ Comment Based": {
        //was not getting priority, since snippet ext:  "ninParameter [Parameter] : Basic",
        "prefix": "DocString Help Docstring üêí",
        "description": "nin ‚Åû The important docstring attributes. Selected Text Populates Synopis",
        "body": [
            "<#",
            ".synopsis",
            "    ${1:${TM_SELECTED_TEXT:Short Description}}",
            ".description",
            "    Long description",
            ".example",
            "    PS> .",
            ".inputs",
            "    Summary of Pipeline Inputs",
            ".outputs",
            "    None",
            ".notes",
            "    General notes",
            ".link",
            "    command",
            "#>",
            "${0}",
        ],
    },
}