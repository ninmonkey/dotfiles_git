{
    /*

    ### Sect: Why?

        - It includes default settings for addons
        - It might allow discovery of new settings

    Generated by command:

        # same code runs on code and code-insiders. It captures the name for you
        @(
            (get-date).tostring('o') | Join-string -op 'At: '
            $parent =  (ps -id $PID).Parent.Name
            & $parent @('--version') | Join-String -sep ', ' -op "$pre="
            & $parent @('--list-extensions', '--show-versions')
        ) | set-clipboard

    Version Info

        At: 2021-08-10T20:31:56.7830076-05:00
        =1.58.2, c3f126316369cd610563c75b1b1725e0679adfb3, x64
        adrieankhisbe.vscode-ndjson@0.100.0
        ahebrank.yaml2json@0.0.3
        alefragnani.Bookmarks@13.1.0
        arcticicestudio.nord-visual-studio-code@0.18.0
        bierner.docs-view@0.0.9
        brunnerh.insert-unicode@0.12.3
        bungcip.better-toml@0.3.2
        christian-kohler.path-intellisense@2.4.0
        CoenraadS.bracket-pair-colorizer@1.0.61
        CoenraadS.bracket-pair-colorizer-2@0.2.1
        connor4312.codesong@1.0.2
        darkriszty.markdown-table-prettify@3.4.0
        DavidAnson.vscode-markdownlint@0.43.2
        donjayamanne.githistory@0.6.18
        DotJoshJohnson.xml@2.5.1
        eamodio.amethyst-theme@4.3.0
        eamodio.gitlens@11.6.0
        eamodio.tsl-problem-matcher@0.4.0
        emilast.LogFileHighlighter@2.11.0
        Equinusocio.vsc-community-material-theme@1.4.2
        Equinusocio.vsc-material-theme@33.2.0
        equinusocio.vsc-material-theme-icons@1.2.2
        esbenp.prettier-vscode@8.1.0
        evan-buss.font-switcher@4.0.1
        file-icons.file-icons@1.0.29
        firefox-devtools.vscode-firefox-debug@2.9.4
        florianguitton.vscode-gedcom@0.0.4
        formulahendry.code-runner@0.11.5
        GitHub.github-vscode-theme@4.1.1
        GitHub.remotehub@0.11.0
        GitHub.vscode-pull-request-github@0.28.0
        hbenl.vscode-mocha-test-adapter@2.13.0
        hbenl.vscode-test-explorer@2.20.4
        icsharpcode.ilspy-vscode@0.11.2
        johnpapa.vscode-peacock@3.9.1
        juanmnl.vscode-theme-hydra@3.2.0
        littlefoxteam.vscode-python-test-adapter@0.7.0
        LouisWT.regexp-preview@0.1.5
        matangover.mypy@0.2.0
        mechatroner.rainbow-csv@1.9.1
        medo64.code-point@1.7.7
        mhutchie.git-graph@1.30.0
        ms-azure-devops.azure-pipelines@1.188.1
        ms-dotnettools.csharp@1.23.14
        ms-dotnettools.dotnet-interactive-vscode@1.0.2357010
        ms-dotnettools.vscode-dotnet-runtime@1.2.0
        ms-dotnettools.vscode-dotnet-sdk@0.7.0
        ms-mssql.mssql@1.10.1
        ms-python.python@2021.8.1105858891
        ms-python.vscode-pylance@2021.8.0
        ms-toolsai.jupyter@2021.8.1054968649
        ms-vscode-remote.remote-containers@0.187.1
        ms-vscode-remote.remote-ssh@0.65.7
        ms-vscode-remote.remote-ssh-edit@0.65.7
        ms-vscode-remote.remote-wsl@0.58.2
        ms-vscode-remote.vscode-remote-extensionpack@0.21.0
        ms-vscode.azure-account@0.9.8
        ms-vscode.cpptools@1.5.1
        ms-vscode.powershell@2021.8.0
        ms-vscode.powershell-preview@2021.8.0
        ms-vscode.test-adapter-converter@0.0.13
        ms-vscode.vscode-typescript-tslint-plugin@1.3.3
        msjsdiag.debugger-for-chrome@4.12.12
        nortakales.quick-regex-replacer@1.0.5
        octref.vscode-json-transform@0.1.2
        oderwat.indent-rainbow@7.5.0
        patbenatar.advanced-new-file@1.2.2
        PKief.material-icon-theme@4.9.0
        PowerQuery.vscode-powerquery@0.1.21
        RandomFractalsInc.snippets-viewer@1.9.0
        RandomFractalsInc.vscode-data-preview@2.3.0
        redhat.vscode-commons@0.0.6
        redhat.vscode-xml@0.18.0
        redhat.vscode-yaml@0.22.0
        richie5um2.vscode-sort-json@1.20.0
        RobbOwen.synthwave-vscode@0.1.8
        rogalmic.bash-debug@0.3.9
        rust-lang.rust@0.7.8
        sallar.vscode-duotone-dark@0.3.3
        samuelcolvin.jinjahtml@0.16.0
        shakram02.bash-beautify@0.1.1
        shd101wyy.markdown-preview-enhanced@0.5.22
        sleistner.vscode-fileutils@3.4.5
        stansw.vscode-odata@0.1.0
        stuart.unique-window-colors@1.0.51
        svipas.control-snippets@1.9.1
        thmsrynr.rightlines@0.0.1
        TylerLeonhardt.vscode-inline-values-powershell@0.0.5
        TylerLeonhardt.vscode-pester-test-adapter@0.0.23
        TylerLeonhardt.vscode-terminalcommanddocs@0.0.2
        TylerLeonhardt.vscode-types-installer-helper@0.0.2
        usernamehw.errorlens@3.3.2
        vadimcn.vscode-lldb@1.6.5
        VisualStudioExptTeam.vscodeintellicode@1.2.14
        vscode-icons-team.vscode-icons@11.6.0
        vsls-contrib.codetour@0.0.58
        webfreak.debug@0.25.1
        wwm.better-align@1.1.6
        yzhang.markdown-all-in-one@3.4.0
        zhuangtongfa.material-theme@3.11.3
    */
    // --------------
    // Customizes what kind of terminal to launch.
    //  - integrated: Use VS Code's integrated terminal.
    //  - external: Use the configured external terminal.
    "terminal.explorerKind": "integrated",
    // Customizes which terminal to run on Linux.
    "terminal.external.linuxExec": "xterm",
    // Customizes which terminal application to run on macOS.
    "terminal.external.osxExec": "Terminal.app",
    // Customizes which terminal to run on Windows.
    "terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",
    // Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
    "terminal.integrated.allowChords": true,
    // Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
    "terminal.integrated.allowMnemonics": false,
    // If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
    "terminal.integrated.altClickMovesCursor": true,
    // A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.linux": null,
    // A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.osx": null,
    // A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
    "terminal.integrated.automationShell.windows": null,
    // The number of milliseconds to show the bell within a terminal tab when triggered.
    "terminal.integrated.bellDuration": 1000,
    // A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
    //
    // &nbsp;
    //
    // Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
    //
    // &nbsp;
    //
    // The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
    //
    // &nbsp;
    //
    // Default Skipped Commands:
    //
    // - editor.action.toggleTabFocusMode
    // - workbench.action.debug.continue
    // - workbench.action.debug.pause
    // - workbench.action.debug.restart
    // - workbench.action.debug.run
    // - workbench.action.debug.start
    // - workbench.action.debug.stepInto
    // - workbench.action.debug.stepOut
    // - workbench.action.debug.stepOver
    // - workbench.action.debug.stop
    // - workbench.action.firstEditorInGroup
    // - workbench.action.focusActiveEditorGroup
    // - workbench.action.focusEighthEditorGroup
    // - workbench.action.focusFifthEditorGroup
    // - workbench.action.focusFirstEditorGroup
    // - workbench.action.focusFourthEditorGroup
    // - workbench.action.focusLastEditorGroup
    // - workbench.action.focusNextPart
    // - workbench.action.focusPreviousPart
    // - workbench.action.focusSecondEditorGroup
    // - workbench.action.focusSeventhEditorGroup
    // - workbench.action.focusSixthEditorGroup
    // - workbench.action.focusThirdEditorGroup
    // - workbench.action.lastEditorInGroup
    // - workbench.action.navigateDown
    // - workbench.action.navigateLeft
    // - workbench.action.navigateRight
    // - workbench.action.navigateUp
    // - workbench.action.nextEditor
    // - workbench.action.nextEditorInGroup
    // - workbench.action.nextPanelView
    // - workbench.action.nextSideBarView
    // - workbench.action.openNextRecentlyUsedEditor
    // - workbench.action.openNextRecentlyUsedEditorInGroup
    // - workbench.action.openPreviousRecentlyUsedEditor
    // - workbench.action.openPreviousRecentlyUsedEditorInGroup
    // - workbench.action.previousEditor
    // - workbench.action.previousEditorInGroup
    // - workbench.action.previousPanelView
    // - workbench.action.previousSideBarView
    // - workbench.action.quickOpen
    // - workbench.action.quickOpenLeastRecentlyUsedEditor
    // - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenPreviousEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditor
    // - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
    // - workbench.action.quickOpenView
    // - workbench.action.showCommands
    // - workbench.action.tasks.build
    // - workbench.action.tasks.reRunTask
    // - workbench.action.tasks.restartTask
    // - workbench.action.tasks.runTask
    // - workbench.action.tasks.showLog
    // - workbench.action.tasks.showTasks
    // - workbench.action.tasks.terminate
    // - workbench.action.tasks.test
    // - workbench.action.terminal.clear
    // - workbench.action.terminal.clearSelection
    // - workbench.action.terminal.copySelection
    // - workbench.action.terminal.deleteToLineStart
    // - workbench.action.terminal.deleteWordLeft
    // - workbench.action.terminal.deleteWordRight
    // - workbench.action.terminal.findNext
    // - workbench.action.terminal.findPrevious
    // - workbench.action.terminal.focus
    // - workbench.action.terminal.focusAtIndex1
    // - workbench.action.terminal.focusAtIndex2
    // - workbench.action.terminal.focusAtIndex3
    // - workbench.action.terminal.focusAtIndex4
    // - workbench.action.terminal.focusAtIndex5
    // - workbench.action.terminal.focusAtIndex6
    // - workbench.action.terminal.focusAtIndex7
    // - workbench.action.terminal.focusAtIndex8
    // - workbench.action.terminal.focusAtIndex9
    // - workbench.action.terminal.focusFind
    // - workbench.action.terminal.focusNext
    // - workbench.action.terminal.focusNextPane
    // - workbench.action.terminal.focusPrevious
    // - workbench.action.terminal.focusPreviousPane
    // - workbench.action.terminal.hideFind
    // - workbench.action.terminal.kill
    // - workbench.action.terminal.killEditor
    // - workbench.action.terminal.moveToEditor
    // - workbench.action.terminal.moveToLineEnd
    // - workbench.action.terminal.moveToLineStart
    // - workbench.action.terminal.moveToTerminalPanel
    // - workbench.action.terminal.navigationModeExit
    // - workbench.action.terminal.navigationModeFocusNext
    // - workbench.action.terminal.navigationModeFocusPrevious
    // - workbench.action.terminal.new
    // - workbench.action.terminal.newInActiveWorkspace
    // - workbench.action.terminal.paste
    // - workbench.action.terminal.pasteSelection
    // - workbench.action.terminal.resizePaneDown
    // - workbench.action.terminal.resizePaneLeft
    // - workbench.action.terminal.resizePaneRight
    // - workbench.action.terminal.resizePaneUp
    // - workbench.action.terminal.runActiveFile
    // - workbench.action.terminal.runSelectedText
    // - workbench.action.terminal.scrollDown
    // - workbench.action.terminal.scrollDownPage
    // - workbench.action.terminal.scrollToBottom
    // - workbench.action.terminal.scrollToNextCommand
    // - workbench.action.terminal.scrollToPreviousCommand
    // - workbench.action.terminal.scrollToTop
    // - workbench.action.terminal.scrollUp
    // - workbench.action.terminal.scrollUpPage
    // - workbench.action.terminal.selectAll
    // - workbench.action.terminal.selectToNextCommand
    // - workbench.action.terminal.selectToNextLine
    // - workbench.action.terminal.selectToPreviousCommand
    // - workbench.action.terminal.selectToPreviousLine
    // - workbench.action.terminal.sendSequence
    // - workbench.action.terminal.split
    // - workbench.action.terminal.splitInActiveWorkspace
    // - workbench.action.terminal.toggleFindCaseSensitive
    // - workbench.action.terminal.toggleFindRegex
    // - workbench.action.terminal.toggleFindWholeWord
    // - workbench.action.terminal.toggleTerminal
    // - workbench.action.toggleFullScreen
    // - workbench.action.toggleMaximizedPanel
    // - workbench.action.togglePanel
    "terminal.integrated.commandsToSkipShell": [],
    // Controls whether to confirm on exit if there are active terminal sessions.
    "terminal.integrated.confirmOnExit": false,
    // Controls whether text selected in the terminal will be copied to the clipboard.
    "terminal.integrated.copyOnSelection": false,
    // Controls whether the terminal cursor blinks.
    "terminal.integrated.cursorBlinking": false,
    // Controls the style of terminal cursor.
    "terminal.integrated.cursorStyle": "block",
    // Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
    "terminal.integrated.cursorWidth": 1,
    // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
    "terminal.integrated.cwd": "",
    // Controls where newly created terminals will appear.
    //  - editor: Create terminals in the editor
    //  - view: Create terminals in the terminal view
    "terminal.integrated.defaultLocation": "view",
    // The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
    "terminal.integrated.defaultProfile.linux": null,
    // The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
    "terminal.integrated.defaultProfile.osx": null,
    // The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
    //  - PowerShell: $(terminal-powershell) PowerShell
    // - path: C:\Program Files\PowerShell\7\pwsh.exe
    //  - Command Prompt: $(terminal-cmd) Command Prompt
    // - path: C:\WINDOWS\System32\cmd.exe
    // - args: []
    //  - Git Bash: $(terminal) Git Bash
    // - path: C:\Program Files\Git\bin\bash.exe
    // - args: [--login]
    //  - PowerShellfsds: $(terminal-powershell) PowerShellfsds
    // - path: C:\Program Files\PowerShell\7\pwsh.exe
    //  - Pwsh -NoProfile: $(terminal-powershell) Pwsh -NoProfile
    // - path: pwsh.exe
    // - args: [-NoProfile','-NoLogo]
    //  - PowerShell🐒: $(terminal-powershell) PowerShell🐒
    // - path: pwsh.exe
    // - args: [-NoLogo]
    //  - Windows PowerShell: $(terminal) Windows PowerShell
    // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
    // - args: [-NoLogo','-NoProfile]
    "terminal.integrated.defaultProfile.windows": null,
    // Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
    //  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
    //  - off: Do not set the `$LANG` environment variable.
    //  - on: Always set the `$LANG` environment variable.
    "terminal.integrated.detectLocale": "auto",
    // Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
    "terminal.integrated.drawBoldTextInBrightColors": true,
    // Controls whether the terminal bell is enabled, this shows up as a visual bell next to the terminal's name.
    "terminal.integrated.enableBell": false,
    // Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
    "terminal.integrated.enableFileLinks": true,
    // Persist terminal sessions for the workspace across window reloads.
    "terminal.integrated.enablePersistentSessions": true,
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
    "terminal.integrated.env.linux": {},
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
    "terminal.integrated.env.osx": {},
    // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
    "terminal.integrated.env.windows": {},
    // Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
    //  - off: Disable the indicator.
    //  - on: Enable the indicator.
    //  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
    "terminal.integrated.environmentChangesIndicator": "warnonly",
    // Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
    "terminal.integrated.environmentChangesRelaunch": true,
    // An experimental setting that aims to improve link detection in the terminal by improving when links are detected and by enabling shared link detection with the editor. Currently this only supports web links.
    "terminal.integrated.experimentalLinkProvider": true,
    // Scrolling speed multiplier when pressing `Alt`.
    "terminal.integrated.fastScrollSensitivity": 5,
    // Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
    "terminal.integrated.fontFamily": "",
    // Controls the font size in pixels of the terminal.
    "terminal.integrated.fontSize": 14,
    // The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeight": "normal",
    // The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
    "terminal.integrated.fontWeightBold": "bold",
    // Controls whether the terminal will leverage the GPU to do its rendering.
    //  - auto: Let VS Code detect which renderer will give the best experience.
    //  - on: Enable GPU acceleration within the terminal.
    //  - off: Disable GPU acceleration within the terminal.
    //  - canvas: Use the fallback canvas renderer within the terminal. This uses a 2d context instead of webgl and may be better on some systems.
    "terminal.integrated.gpuAcceleration": "auto",
    // Whether new shells should inherit their environment from VS Code which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
    "terminal.integrated.inheritEnv": true,
    // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
    "terminal.integrated.letterSpacing": 0,
    // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
    "terminal.integrated.lineHeight": 1,
    // Experimental: local echo will be disabled when any of these program names are found in the terminal title.
    "terminal.integrated.localEchoExcludePrograms": [
        "vim",
        "vi",
        "nano",
        "tmux"
    ],
    // Experimental: length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
    "terminal.integrated.localEchoLatencyThreshold": 30,
    // Experimental: terminal style of locally echoed text; either a font style or an RGB color.
    "terminal.integrated.localEchoStyle": "dim",
    // Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
    "terminal.integrated.macOptionClickForcesSelection": false,
    // Controls whether to treat the option key as the meta key in the terminal on macOS.
    "terminal.integrated.macOptionIsMeta": false,
    // When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
    //
    // - 1: The default, do nothing.
    // - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
    // - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
    // - 21: White on black or black on white.
    "terminal.integrated.minimumContrastRatio": 1,
    // A multiplier to be used on the `deltaY` of mouse wheel scroll events.
    "terminal.integrated.mouseWheelScrollSensitivity": 1,
}