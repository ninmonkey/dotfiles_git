{
    /*

    ### Sect: Gitlens

           tags: Git, Addon


        Gitlens is so long, I copied defaults here, instead of the real config.

    */
    // Specifies the length of abbreviated commit SHAs
    "gitlens.advanced.abbreviatedShaLength": 7,
    // Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
    "gitlens.advanced.abbreviateShaOnCopy": false,
    // Specifies additional arguments to pass to the `git blame` command
    "gitlens.advanced.blame.customArguments": null,
    // Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
    "gitlens.advanced.blame.delayAfterEdit": 5000,
    // Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
    "gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,
    // Specifies whether git output will be cached — changing the default is not recommended
    "gitlens.advanced.caching.enabled": true,
    // Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
    //  - null: Shows commits in reverse chronological order
    //  - date: Shows commits in reverse chronological order of the commit timestamp
    //  - author-date: Shows commits in reverse chronological order of the author timestamp
    //  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
    "gitlens.advanced.commitOrdering": null,
    // Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
    "gitlens.advanced.externalDiffTool": null,
    // Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
    "gitlens.advanced.externalDirectoryDiffTool": null,
    // Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
    "gitlens.advanced.fileHistoryFollowsRenames": false,
    // Specifies whether file histories will show commits from all branches
    "gitlens.advanced.fileHistoryShowAllBranches": false,
    // Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
    "gitlens.advanced.maxListItems": 200,
    // Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
    "gitlens.advanced.maxSearchItems": 200,
    // Specifies which messages should be suppressed
    "gitlens.advanced.messages": {
        "suppressCommitHasNoPreviousCommitWarning": false,
        "suppressCommitNotFoundWarning": false,
        "suppressCreatePullRequestPrompt": false,
        "suppressDebugLoggingWarning": false,
        "suppressFileNotUnderSourceControlWarning": false,
        "suppressGitDisabledWarning": false,
        "suppressGitMissingWarning": false,
        "suppressGitVersionWarning": false,
        "suppressImproperWorkspaceCasingWarning": false,
        "suppressLineUncommittedWarning": false,
        "suppressNoRepositoryWarning": false,
        "suppressRebaseSwitchToTextWarning": false
    },
    // Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
    "gitlens.advanced.quickPick.closeOnFocusOut": true,
    // Specifies how many folders deep to search for repositories
    "gitlens.advanced.repositorySearchDepth": 1,
    // Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
    "gitlens.advanced.similarityThreshold": null,
    // Deprecated. This setting is no longer used
    // Deprecated. This setting is no longer used
    "gitlens.advanced.useSymmetricDifferenceNotation": null,
    // Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
    "gitlens.autolinks": null,
    // Specifies whether to show avatar images in the gutter blame annotations
    "gitlens.blame.avatars": true,
    // Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
    "gitlens.blame.compact": true,
    // Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.blame.dateFormat": null,
    // Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
    "gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",
    // Specifies whether to provide a heatmap indicator in the gutter blame annotations
    "gitlens.blame.heatmap.enabled": true,
    // Specifies where the heatmap indicators will be shown in the gutter blame annotations
    //  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
    //  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
    "gitlens.blame.heatmap.location": "right",
    // Specifies whether to highlight lines associated with the current line
    "gitlens.blame.highlight.enabled": true,
    // Specifies where the associated line highlights will be shown
    //  - gutter: Adds a gutter indicator
    //  - line: Adds a full-line highlight background color
    //  - overview: Adds a decoration to the overview ruler (scroll bar)
    "gitlens.blame.highlight.locations": [
        "gutter",
        "line",
        "overview"
    ],
    // Specifies whether to ignore whitespace when comparing revisions during blame operations
    "gitlens.blame.ignoreWhitespace": false,
    // Specifies whether gutter blame annotations will be separated by a small gap
    "gitlens.blame.separateLines": true,
    // Specifies how the gutter blame annotations will be toggled
    //  - file: Toggles each file individually
    //  - window: Toggles the window, i.e. all files at once
    "gitlens.blame.toggleMode": "file",
    // Specifies where the indicators of the gutter changes annotations will be shown
    //  - gutter: Adds a gutter indicator
    //  - overview: Adds a decoration to the overview ruler (scroll bar)
    "gitlens.changes.locations": [
        "gutter",
        "overview"
    ],
    // Specifies how the gutter changes annotations will be toggled
    //  - file: Toggles each file individually
    //  - window: Toggles the window, i.e. all files at once
    "gitlens.changes.toggleMode": "file",
    // Specifies the command to be executed when an _authors_ code lens is clicked
    //  - false: Disables click interaction
    //  - gitlens.toggleFileBlame: Toggles file blame
    //  - gitlens.toggleFileHeatmap: Toggles file heatmap
    //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
    //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
    //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
    //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
    //  - gitlens.showCommitsInView: Searches for commits within the range
    //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
    //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
    //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
    //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
    //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
    //  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
    //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
    //  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
    "gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",
    // Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
    "gitlens.codeLens.authors.enabled": true,
    // Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
    "gitlens.codeLens.enabled": true,
    // Specifies whether to provide any Git code lens on symbols that span only a single line
    "gitlens.codeLens.includeSingleLineSymbols": false,
    // Specifies the command to be executed when a _recent change_ code lens is clicked
    //  - false: Disables click interaction
    //  - gitlens.toggleFileBlame: Toggles file blame
    //  - gitlens.toggleFileHeatmap: Toggles file heatmap
    //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
    //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
    //  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
    //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
    //  - gitlens.showCommitsInView: Searches for the commit
    //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
    //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
    //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
    //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
    //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
    //  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
    //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
    //  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
    "gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",
    // Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
    "gitlens.codeLens.recentChange.enabled": true,
    // Specifies where Git code lens will be shown in the document
    //  - document: Adds code lens at the top of the document
    //  - containers: Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)
    //  - blocks: Adds code lens at the start of block-like symbols (functions, methods, etc) lines
    "gitlens.codeLens.scopes": [
        "document",
        "containers"
    ],
    // Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
    //
    "gitlens.codeLens.scopesByLanguage": null,
    // Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
    "gitlens.codeLens.symbolScopes": [],
    // Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.currentLine.dateFormat": null,
    // Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
    "gitlens.currentLine.enabled": true,
    // Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
    "gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",
    // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.currentLine.pullRequests.enabled": true,
    // Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
    "gitlens.currentLine.scrollable": true,
    // Specifies debug mode
    "gitlens.debug": false,
    // Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.defaultDateFormat": null,
    // Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.defaultDateShortFormat": null,
    // Specifies whether commit dates should use the authored or committed date
    //  - authored: Uses the date when the changes were authored (i.e. originally written)
    //  - committed: Uses the date when the changes were committed
    "gitlens.defaultDateSource": "authored",
    // Specifies how dates will be displayed by default
    //  - relative: e.g. 1 day ago
    //  - absolute: e.g. July 25th, 2018 7:18pm
    "gitlens.defaultDateStyle": "relative",
    // Specifies the style of the gravatar default (fallback) images
    //  - identicon: A geometric pattern
    //  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
    //  - monsterid: A monster with different colors, faces, etc
    //  - retro: 8-bit arcade-style pixelated faces
    //  - robohash: A robot with different colors, faces, etc
    //  - wavatar: A face with differing features and backgrounds
    "gitlens.defaultGravatarsStyle": "robohash",
    // Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.defaultTimeFormat": null,
    // Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
    //  - null: Shows a menu to choose which file annotations to toggle
    //  - blame: Toggles gutter blame annotations
    //  - heatmap: Toggles gutter heatmap annotations
    //  - changes: Toggles gutter changes annotations
    "gitlens.fileAnnotations.command": null,
    // Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
    "gitlens.gitCommands.closeOnFocusOut": true,
    // Specifies whether to match all or any commit message search patterns
    "gitlens.gitCommands.search.matchAll": false,
    // Specifies whether to match commit search patterns with or without regard to casing
    "gitlens.gitCommands.search.matchCase": false,
    // Specifies whether to match commit search patterns using regular expressions
    "gitlens.gitCommands.search.matchRegex": true,
    // Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
    "gitlens.gitCommands.search.showResultsInSideBar": null,
    // Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
    //
    "gitlens.gitCommands.search.showResultsInView": null,
    // Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
    //  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
    //  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
    //  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
    //  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
    //  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
    //  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
    //  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
    //  - pull:menu: Skips pull confirmations when run from the Git Command Palette
    //  - push:command: Skips push confirmations when run from a command, e.g. a view action
    //  - push:menu: Skips push confirmations when run from the Git Command Palette
    //  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
    //  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
    //  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
    //  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
    //  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
    //  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
    //  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
    //  - switch:menu: Skips switch confirmations when run from the Git Command Palette
    //  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
    //  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
    "gitlens.gitCommands.skipConfirmations": [
        "fetch:command",
        "stash-push:command",
        "switch:command"
    ],
    // Specifies how Git commands are sorted in the _Git Command Palette_
    //  - name: Sorts commands by name
    //  - usage: Sorts commands by last used date
    "gitlens.gitCommands.sortBy": "usage",
    // Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
    "gitlens.heatmap.ageThreshold": 90,
    // Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
    "gitlens.heatmap.coldColor": "#0a60f6",
    // Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
    "gitlens.heatmap.hotColor": "#f66a0a",
    // Specifies where the indicators of the gutter heatmap annotations will be shown
    //  - gutter: Adds a gutter indicator
    //  - overview: Adds a decoration to the overview ruler (scroll bar)
    "gitlens.heatmap.locations": [
        "gutter",
        "overview"
    ],
    // Specifies how the gutter heatmap annotations will be toggled
    //  - file: Toggles each file individually
    //  - window: Toggles the window, i.e. all files at once
    "gitlens.heatmap.toggleMode": "file",
    // Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
    "gitlens.hovers.annotations.changes": true,
    // Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
    "gitlens.hovers.annotations.details": true,
    // Specifies whether to provide any hovers when showing blame annotations
    "gitlens.hovers.annotations.enabled": true,
    // Specifies when to trigger hovers when showing blame annotations
    //  - annotation: Only shown when hovering over the line annotation
    //  - line: Shown when hovering anywhere over the line
    "gitlens.hovers.annotations.over": "line",
    // Specifies whether to automatically link external resources in commit messages
    "gitlens.hovers.autolinks.enabled": true,
    // Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.hovers.autolinks.enhanced": true,
    // Specifies whether to show avatar images in hovers
    "gitlens.hovers.avatars": true,
    // Specifies the size of the avatar images in hovers
    "gitlens.hovers.avatarSize": 32,
    // Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
    //  - line: Shows only the changes to the line
    //  - hunk: Shows the set of related changes
    "gitlens.hovers.changesDiff": "line",
    // Specifies whether to provide a _changes (diff)_ hover for the current line
    "gitlens.hovers.currentLine.changes": true,
    // Specifies whether to provide a _commit details_ hover for the current line
    "gitlens.hovers.currentLine.details": true,
    // Specifies whether to provide any hovers for the current line
    "gitlens.hovers.currentLine.enabled": true,
    // Specifies when to trigger hovers for the current line
    //  - annotation: Only shown when hovering over the line annotation
    //  - line: Shown when hovering anywhere over the line
    "gitlens.hovers.currentLine.over": "annotation",
    // Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
    "gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}${\n\n---\n\nfootnotes}",
    // Specifies whether to provide any hovers
    "gitlens.hovers.enabled": true,
    // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.hovers.pullRequests.enabled": true,
    // Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
    //
    "gitlens.insiders": null,
    // Specifies whether to enable rich integrations with any supported remote services
    "gitlens.integrations.enabled": true,
    // Specifies the keymap to use for GitLens shortcut keys
    //  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
    //  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
    //  - none: No shortcut keys will be added
    "gitlens.keymap": "chorded",
    // Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
    "gitlens.liveshare.allowGuestAccess": true,
    // Specifies which commands will be added to which menus
    "gitlens.menus": {
        "editor": {
            "blame": false,
            "clipboard": true,
            "compare": true,
            "history": false,
            "remote": false
        },
        "editorGroup": {
            "blame": true,
            "compare": true
        },
        "editorTab": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true
        },
        "explorer": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": true
        },
        "scm": {
            "authors": true
        },
        "scmGroupInline": {
            "stash": true
        },
        "scmGroup": {
            "compare": true,
            "openClose": true,
            "stash": true
        },
        "scmItem": {
            "clipboard": true,
            "compare": true,
            "history": true,
            "remote": false,
            "stash": true
        }
    },
    // Specifies the active GitLens mode, if any
    "gitlens.mode.active": "",
    // Specifies the active GitLens mode alignment in the status bar
    //  - left: Aligns to the left
    //  - right: Aligns to the right
    "gitlens.mode.statusBar.alignment": "right",
    // Specifies whether to provide the active GitLens mode in the status bar
    "gitlens.mode.statusBar.enabled": true,
    // Specifies the user-defined GitLens modes
    "gitlens.modes": {
        "zen": {
            "name": "Zen",
            "statusBarItemName": "Zen",
            "description": "for a zen-like experience, disables many visual features",
            "codeLens": false,
            "currentLine": false,
            "hovers": false,
            "statusBar": false
        },
        "review": {
            "name": "Review",
            "statusBarItemName": "Reviewing",
            "description": "for reviewing code, enables many visual features",
            "codeLens": true,
            "currentLine": true,
            "hovers": true
        }
    },
    // Specifies how much (if any) output will be sent to the GitLens output channel
    //  - silent: Logs nothing
    //  - errors: Logs only errors
    //  - verbose: Logs all errors, warnings, and messages
    //  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
    "gitlens.outputLevel": "errors",
    // Specifies the configuration of a partner integration
    "gitlens.partners": null,
    // Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
    "gitlens.remotes": null,
    // Specifies whether to show the Welcome (Quick Setup) experience on first install
    "gitlens.showWelcomeOnInstall": true,
    // Specifies whether to show the What's New notification after upgrading to new feature releases
    "gitlens.showWhatsNewAfterUpgrades": true,
    // Specifies how branches are sorted in quick pick menus and views
    //  - date:desc: Sorts branches by the most recent commit date in descending order
    //  - date:asc: Sorts branches by the most recent commit date in ascending order
    //  - name:asc: Sorts branches by name in ascending order
    //  - name:desc: Sorts branches by name in descending order
    "gitlens.sortBranchesBy": "date:desc",
    // Specifies how contributors are sorted in quick pick menus and views
    //  - count:desc: Sorts contributors by commit count in descending order
    //  - count:asc: Sorts contributors by commit count in ascending order
    //  - date:desc: Sorts contributors by the most recent commit date in descending order
    //  - date:asc: Sorts contributors by the most recent commit date in ascending order
    //  - name:asc: Sorts contributors by name in ascending order
    //  - name:desc: Sorts contributors by name in descending order
    "gitlens.sortContributorsBy": "count:desc",
    // Specifies how tags are sorted in quick pick menus and views
    //  - date:desc: Sorts tags by date in descending order
    //  - date:asc: Sorts tags by date in ascending order
    //  - name:asc: Sorts tags by name in ascending order
    //  - name:desc: Sorts tags by name in descending order
    "gitlens.sortTagsBy": "date:desc",
    // Specifies the blame alignment in the status bar
    //  - left: Aligns to the left
    //  - right: Aligns to the right
    "gitlens.statusBar.alignment": "right",
    // Specifies the command to be executed when the blame status bar item is clicked
    //  - gitlens.toggleFileBlame: Toggles file blame
    //  - gitlens.toggleFileHeatmap: Toggles file heatmap
    //  - gitlens.toggleFileChanges: Toggles file changes since before the commit
    //  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
    //  - gitlens.toggleCodeLens: Toggles Git code lens
    //  - gitlens.diffWithPrevious: Compares the current line commit with the previous
    //  - gitlens.diffWithWorking: Compares the current line commit with the working tree
    //  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
    //  - gitlens.showCommitsInView: Searches for the commit
    //  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
    //  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
    //  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
    //  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
    //  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
    //  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
    //  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
    //  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
    "gitlens.statusBar.command": "gitlens.showQuickCommitDetails",
    // Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
    "gitlens.statusBar.dateFormat": null,
    // Specifies whether to provide blame information in the status bar
    "gitlens.statusBar.enabled": true,
    // Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
    "gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",
    // Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.statusBar.pullRequests.enabled": true,
    // Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
    "gitlens.statusBar.reduceFlicker": true,
    // Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
    "gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",
    // Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
    "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",
    // Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
    "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",
    // Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
    "gitlens.terminalLinks.enabled": true,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
    "gitlens.views.branches.avatars": true,
    // Specifies how the _Branches_ view will display branches
    //  - list: Displays branches as a list
    //  - tree: Displays branches as a tree when branch names contain slashes `/`
    "gitlens.views.branches.branches.layout": "tree",
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
    "gitlens.views.branches.files.compact": true,
    // Specifies how the _Branches_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.branches.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
    "gitlens.views.branches.files.threshold": 5,
    // Specifies whether to query for pull requests associated with branches and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.branches.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with branches in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.branches.pullRequests.showForBranches": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.branches.pullRequests.showForCommits": true,
    // Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
    "gitlens.views.branches.reveal": true,
    // Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
    //  - false: Hides the branch comparison
    //  - branch: Compares the branch with a user-selected reference
    "gitlens.views.branches.showBranchComparison": "branch",
    // Deprecated. Use `gitlens.views.formats.commits.description` instead
    //
    "gitlens.views.commitDescriptionFormat": null,
    // Deprecated. Use `gitlens.views.formats.files.description` instead
    //
    "gitlens.views.commitFileDescriptionFormat": null,
    // Deprecated. Use `gitlens.views.formats.files.label` instead
    //
    "gitlens.views.commitFileFormat": null,
    // Deprecated. Use `gitlens.views.commits.files.label` instead
    //
    "gitlens.views.commitFormat": null,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
    "gitlens.views.commits.avatars": true,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
    "gitlens.views.commits.files.compact": true,
    // Specifies how the _Commits_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.commits.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
    "gitlens.views.commits.files.threshold": 5,
    // Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.commits.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.commits.pullRequests.showForBranches": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.commits.pullRequests.showForCommits": true,
    // Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
    "gitlens.views.commits.reveal": true,
    // Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
    //  - false: Hides the branch comparison
    //  - branch: Compares the current branch with a user-selected reference
    //  - working: Compares the working tree with a user-selected reference
    "gitlens.views.commits.showBranchComparison": "working",
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
    "gitlens.views.contributors.avatars": true,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
    "gitlens.views.contributors.files.compact": true,
    // Specifies how the _Contributors_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.contributors.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
    "gitlens.views.contributors.files.threshold": 5,
    // Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.contributors.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.contributors.pullRequests.showForCommits": true,
    // Specifies whether to show commits from all branches in the _Contributors_ view
    "gitlens.views.contributors.showAllBranches": false,
    // Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
    "gitlens.views.contributors.showStatistics": false,
    // Specifies the default number of items to show in a view list. Use 0 to specify no limit
    "gitlens.views.defaultItemLimit": 10,
    // Specifies whether to show avatar images instead of status icons in the _File History_ view
    "gitlens.views.fileHistory.avatars": true,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
    "gitlens.views.fileHistory.files.compact": true,
    // Specifies how the _File History_ view will display files when showing the history of a folder
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.fileHistory.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
    "gitlens.views.fileHistory.files.threshold": 5,
    // Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
    "gitlens.views.formats.commits.description": "${author, }${agoOrDate}",
    // Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
    "gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",
    // Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
    "gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",
    // Specifies the format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
    "gitlens.views.formats.files.label": "${working  }${file}",
    // Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
    "gitlens.views.formats.stashes.description": "${agoOrDate}",
    // Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
    "gitlens.views.formats.stashes.label": "${message}",
    // Specifies whether to show avatar images instead of status icons in the _Line History_ view
    "gitlens.views.lineHistory.avatars": true,
    // Deprecated. This setting is no longer used
    //
    "gitlens.views.lineHistory.enabled": null,
    // Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
    "gitlens.views.pageItemLimit": 40,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
    "gitlens.views.remotes.avatars": true,
    // Specifies how the _Remotes_ view will display branches
    //  - list: Displays branches as a list
    //  - tree: Displays branches as a tree when branch names contain slashes `/`
    "gitlens.views.remotes.branches.layout": "tree",
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
    "gitlens.views.remotes.files.compact": true,
    // Specifies how the _Remotes_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.remotes.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
    "gitlens.views.remotes.files.threshold": 5,
    // Specifies whether to query for pull requests associated with branches and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.remotes.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with branches in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.remotes.pullRequests.showForBranches": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.remotes.pullRequests.showForCommits": true,
    // Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
    "gitlens.views.remotes.reveal": true,
    // Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
    "gitlens.views.repositories.autoRefresh": true,
    // Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
    "gitlens.views.repositories.autoReveal": true,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
    "gitlens.views.repositories.avatars": true,
    // Specifies how the _Repositories_ view will display branches
    //  - list: Displays branches as a list
    //  - tree: Displays branches as a tree when branch names contain slashes `/`
    "gitlens.views.repositories.branches.layout": "tree",
    // Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
    //  - false: Hides the branch comparison
    //  - branch: Compares the branch with a user-selected reference
    "gitlens.views.repositories.branches.showBranchComparison": "branch",
    // Specifies whether to show the _Repositories_ view in a compact display density
    "gitlens.views.repositories.compact": false,
    // Deprecated. This setting is no longer used
    //
    "gitlens.views.repositories.enabled": null,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
    "gitlens.views.repositories.files.compact": true,
    // Specifies how the _Repositories_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.repositories.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
    "gitlens.views.repositories.files.threshold": 5,
    // Specifies whether to include working tree file status for each repository in the _Repositories_ view
    "gitlens.views.repositories.includeWorkingTree": false,
    // Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.repositories.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.repositories.pullRequests.showForBranches": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.repositories.pullRequests.showForCommits": true,
    // Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
    //  - false: Hides the branch comparison
    //  - branch: Compares the current branch with a user-selected reference
    //  - working: Compares the working tree with a user-selected reference
    "gitlens.views.repositories.showBranchComparison": "working",
    // Specifies whether to show the branches for each repository in the _Repositories_ view
    "gitlens.views.repositories.showBranches": true,
    // Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
    "gitlens.views.repositories.showCommits": true,
    // Specifies whether to show the contributors for each repository in the _Repositories_ view
    "gitlens.views.repositories.showContributors": true,
    // Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
    "gitlens.views.repositories.showIncomingActivity": false,
    // Specifies whether to show the remotes for each repository in the _Repositories_ view
    "gitlens.views.repositories.showRemotes": true,
    // Specifies whether to show the stashes for each repository in the _Repositories_ view
    "gitlens.views.repositories.showStashes": true,
    // Specifies whether to show the tags for each repository in the _Repositories_ view
    "gitlens.views.repositories.showTags": true,
    // Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
    "gitlens.views.repositories.showUpstreamStatus": true,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
    "gitlens.views.searchAndCompare.avatars": true,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
    "gitlens.views.searchAndCompare.files.compact": true,
    // Specifies how the _Search & Compare_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.searchAndCompare.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
    "gitlens.views.searchAndCompare.files.threshold": 5,
    // Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.searchAndCompare.pullRequests.enabled": true,
    // Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
    "gitlens.views.searchAndCompare.pullRequests.showForCommits": true,
    // Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
    "gitlens.views.showRelativeDateMarkers": true,
    // Deprecated. Use `gitlens.views.formats.stashes.description` instead
    //
    "gitlens.views.stashDescriptionFormat": null,
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
    "gitlens.views.stashes.files.compact": true,
    // Specifies how the _Stashes_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.stashes.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
    "gitlens.views.stashes.files.threshold": 5,
    // Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
    "gitlens.views.stashes.reveal": true,
    // Deprecated. Use `gitlens.views.formats.files.description` instead
    //
    "gitlens.views.stashFileDescriptionFormat": null,
    // Deprecated. Use `gitlens.views.formats.files.label` instead
    //
    "gitlens.views.stashFileFormat": null,
    // Deprecated. Use `gitlens.views.stashes.files.label` instead
    //
    "gitlens.views.stashFormat": null,
    // Deprecated. Use `gitlens.views.formats.files.description` instead
    //
    "gitlens.views.statusFileDescriptionFormat": null,
    // Deprecated. Use `gitlens.views.formats.files.label` instead
    //
    "gitlens.views.statusFileFormat": null,
    // Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
    "gitlens.views.tags.avatars": true,
    // Specifies how the _Tags_ view will display tags
    //  - list: Displays tags as a list
    //  - tree: Displays tags as a tree when tags names contain slashes `/`
    "gitlens.views.tags.branches.layout": "tree",
    // Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
    "gitlens.views.tags.files.compact": true,
    // Specifies how the _Tags_ view will display files
    //  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
    //  - list: Displays files as a list
    //  - tree: Displays files as a tree
    "gitlens.views.tags.files.layout": "auto",
    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
    "gitlens.views.tags.files.threshold": 5,
    // Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
    "gitlens.views.tags.reveal": true,
}