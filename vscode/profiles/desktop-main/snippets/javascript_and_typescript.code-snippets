{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "dom.OnLoadEvents": {
        "scope": "javascript,typescript,html", // added: 2023-09-12
        "description": "document OnLoad, OnReady, triggers",
        "prefix": "OnDomLoad events",
        "body": [
            "window.addEventListener( \"load\", ( event ) => {",
            "   console.info(\"event ▸ on('load')\" )",
            "} );",
            "",
            "document.addEventListener( \"readystatechange\", ( event ) => {",
            "   console.info(`event ▸ on('readystate') := ${ document.readyState }\n` )",
            "} );",
            "",
            "document.addEventListener( \"DOMContentLoaded\", ( event ) => {",
            "   console.info(`event ▸ on('DOMContentLoaded')` )",
            "} );",
        ]
    },
    "dom.common | Get DOM Element by Id": {
        "scope": "javascript,typescript",
        "description": "document.QueryById | $(\"#element_id\")",
        "prefix": "GetElemId",
        "body": [
            /*
            pattern:
                - name and selector have the same value
                - tab again to optionally customize the second
                    - this fully selects the new text, so one backspace cleanly removes it

            output:
                for typing: 'name'

                const $name = document.getElementById("#name");
            */
            // "const $${1:name} = document.getElementById('#${2:${1:selector}}');",
            "const $${1:element_id} = document.getElementById('#${2:${1:selector}}');",
        ]
    },
    "Arrow Function =>": {
        "scope": "javascript,typescript",
        "prefix": "Arrow Function ⁞ nin",
        "description": "nin🐒 ⁞ foo => { expr }",
        "body": [ /*
            input:
                using ⋯

            output:
                ⋯

            */
            "const = () => {",
            "   ${0}",
            "}"
        ],
    },
    "Fetch": {
        "scope": "javascript,typescript",
        "prefix": "fetch ⁞ nin",
        "description": "nin🐒 ⁞ Fetch() request",
        "body": [
            /*
            input:
                using ⋯

            output:
                ⋯

            */
            "try {",
            "   const res = await fetch('$1');",
            "   const data = await res.json();",
            "   $0",
            "} catch (err) {",
            "   console.error(err);",
            "}"
        ],
    },
    "Load Data Func": {
        "scope": "javascript,typescript",
        "prefix": "LoadDataFunc ⁞ nin",
        "description": "nin🐒 ⁞ merged",
        "body": [
            /*
            input:
                using ⋯

            output:
                ⋯

            */
            "const $1 = async () => {",
            "   try {",
            "      const res = await fetch('$2');",
            "      const data = await res.json();",
            "      $0",
            "   } catch (err) {",
            "      console.error(err);",
            "   }",
            "}"
        ],
    },
    "Add Event Listener": {
        "scope": "javascript,typescript",
        "prefix": "addEvent ⁞ nin",
        "description": "nin🐒 ⁞ register Event",
        "body": [
            "$1.addEventListener('$2', (e) => {",
            "   $0",
            "});"
            /*
            input:
                using ⋯

            output:
                ⋯

            */
        ],
    },
    "for loops": {
        "scope": "javascript,typescript",
        "prefix": "for Loop ⁞ nin",
        "description": "nin🐒 ⁞ Basic enumeration",
        "body": [ /*
            input:
                using ⋯

            output:
                ⋯

            */
            "for(let $index=0; $index < $array.length; $index++) {",
            "   const element = $array[$index];",
            "   ",
            "}"
        ],
    },
    // "DOM.common.queryById | Unique Element2": {
    //     "scope": "javascript,typescript",
    //     "description": "document.QueryById | $(\"#element_id\")",
    //     "prefix": "alt getElementById",
    //     "body": [
    //         /*
    //             pattern:
    //             - name and selector have the same value
    //             - tab again to optionally customize the second
    //             - this fully selects the new text, so one backspace cleanly removes it
    //             output:
    //             for typing: 'name'
    //             const $name = document.getElementById("#name");
    //             */
    //         // "const $el = $bob $el",
    //         "const $elem = document.getElementById('#$elem');", // $note
    //     ]
    // }
}