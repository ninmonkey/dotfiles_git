{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages.
    /*
    global snippets use
        scope: ""

    disabled snippets use any non existing lang:
        scope: "disable" or "off"

        description:
            Examples of different input types
            this isn't an actual snippet file to use
            it's an example template

        docs:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets

        regex transform:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_transform-examples

        extension snippets tutorial:
            https://code.visualstudio.com/api/language-extensions/snippet-guide

        vscode variables:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables

        🎨🖥️⁞┐⇽⇾— ⚙️💡📋📹🔑🔥⇒🕷️🕹️→


C:\Users\cppmo_000\AppData\Roaming\Code\User\snippets\escape_text.code-snippets

    ninmonkey. created: 2021-06-30

    */
    "🐒🦍regex: Escapes Spaces with %20 for filepath urls": { // updated: 2024-06-18
        // "scope": "snippets",
        // "scope": "html,markdown,plaintext,snippets,code-snippets,code-workspace,json,jsonc,yaml,ps1,md,powershell",
        "prefix": "replaceSpace fixSpace",
        "body": [
            "${TM_SELECTED_TEXT/ /%20/g}"
        ],
        "description": "🦍 Replaces spaces in selected text with %20 . For example filepath formats <file:///> . 2024-06-01"
    },
    "🐒🦍regex: Undo Escapes Spaces with %20 for filepath urls": { // updated: 2024-06-18
        // "scope": "snippets",
        // "scope": "html,markdown,plaintext,snippets,code-snippets,code-workspace,json,jsonc,yaml,ps1,md,powershell",
        "prefix": "undoReplaceSpace undoFixSpace",
        "body": [
            "${TM_SELECTED_TEXT/%20/ /g}"
        ],
        "description": "🦍 Converts %20 escaped filepaths back into spaces. For example filepath formats <file:///> . 2024-06-01"
        // test inp:  <file:///H:\data\2024\ninmonkey.com\posted\Using Web APIs in Power Query\2024-05-31-GettingMetadaFromWeb.Contents▸Part1\post.▸Capture-Web.Contents-Metadata.wp_source.html>
        // test out: <file:///H:\data\2024\ninmonkey.com\posted\Using%20Web%20APIs%20in%20Power%20Query\2024-05-31-GettingMetadaFromWeb.Contents▸Part1\post.▸Capture-Web.Contents-Metadata.wp_source.html>
    },
// "${TM_FILEPATH/\\\\/\\//g}"
    "🐒🦍regex: Fix Backslash escaped filepaths": { // updated: 2024-06-18
        // this could be editor command1
        // safety, should probably require '['"]' on both ends of matches
        // "scope": "powershell,ps1,wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        // "scope": "disabled", //json,jsonc",
        // "prefix": "replaceBackslash fixPath fixBackslash",
        "prefix": "replaceBackslash fixPath",
        // "prefix": "replaceBackslash filepaths",
        "description": "🦍 Transforms \\\\ ⇒ /",
        "body": [
            "${TM_SELECTED_TEXT/\\x5c/\\//gi}" // this version replaces with the right string
            // "${TM_SELECTED_TEXT/\\\/\\//gi}" // this version replaces with the right string
            // "${TM_SELECTED_TEXT/./\\//gi}" // working, almost. this version replaces with the right string
            // "${TM_SELECTED_TEXT/./\//gi}"
            // "${TM_SELECTED_TEXT/[\\]/🦇/gi}"
            // was: "${TM_SELECTED_TEXT/(\\\\{2})/\\//gi}", // out: /
        ]
    },
    "🐒🦍.regex: Replace or Escape Double Quotes with Double Double": { // updated: 2024-05-??
        /*
        in:
            "scope": "snippets",
            "prefix": "SnipTemplate ReplaceBackslash",
        out:
            ""scope"": ""snippets"",
            ""prefix"": ""SnipTemplate ReplaceBackslash"",
        */

        // "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        // "scope": "disabled", //json,jsonc",
        // "scope": "powershell,ps1,wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        "prefix": "replaceDouble with Double",
        "description": "Transforms \" ⇒ \"\" 🐪",
        "body": [
            "${TM_SELECTED_TEXT/\\x22/\"\"/gi}"
            // "${TM_SELECTED_TEXT/[\"]/\\\"/gi}" # or also
        ]
        // "body": [
        //     "${TM_SELECTED_TEXT/[\"]/\\\"/gi}"
        // ]
    },
    "🐒🦍.regex: Undo Replace or Escape Double Quotes with Double Double": { // updated: 2024-05-??
        /*
        in:
            ""scope"": ""snippets"",
            ""prefix"": ""SnipTemplate ReplaceBackslash"",
        out:
            "scope": "snippets",
            "prefix": "SnipTemplate ReplaceBackslash",
        */
        "prefix": "undoReplaceDouble with Double",
        "description": "Transforms \"\" ⇒ \" 🐪",
        "body": [
            "${TM_SELECTED_TEXT/\\x22\\x22/\"/gi}"
        ]
        // "${TM_SELECTED_TEXT/[\"]/\\\"/gi}" # or also
        // "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        // "scope": "disabled", //json,jsonc",
        // "scope": "powershell,ps1,wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        // "body": [
        //     "${TM_SELECTED_TEXT/[\"]/\\\"/gi}"
        // ]
    },
    "🐒snippet: Insert New Snippet definition": {
        "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        "prefix": "Snippet: New 🏃‍♂️",
        "description": "Transforms \" ⇒ \\\"",
        "body": [
            "\"$Name\": {",
            "    \"prefix\": \"$Prefix ⁞ nin\",",
            "    \"description\": \"nin🐒 ⁞ $Description\",",
            "    \"body\": [        /*",
            "        input:",
            "            using ⋯",
            "",
            "        output:",
            "            ⋯",
            "",
            "        */",
            "    ],",
            "},"
        ]
    },
    "regex: strip extension": {
        // "description": "c:\\windows\\bar",
        // "scope": "json,jsonc",
        "scope": "example",
        "prefix": "[wip]\"_ re\"_\"_ex: strip the final .text",
        "description": "regex strip",
        "body": [
            "${TM_SELECTED_TEXT/(.*)\\..+?$/$1/}"
        ]
    },
    // "configPath": "c:\windows",
    "regex: quote all lines, up to selection": {
        "scope": "json,jsonc",
        "prefix": "re: QuoteText (as Json)",
        "description": "regex: quote all lines, to selection. at this point it's better to use an extension",
        "body": [
            "${TM_SELECTED_TEXT/^(.*)$/\"$1\",/gim}"
        ]
    },
}