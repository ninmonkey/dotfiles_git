{
    /* todo:

    [1] Variable Template
        declare
            @query varchar(max) = 'Rut%';

        -- quoted_identifier()

        select @query
        select quotename(@query)


        declare
            @table_name varchar(max) = 'budPortalSSATicket'
        select
            top 40 *
        from
            INFORMATION_SCHEMA.COLUMNS sc
        where
            sc.TABLE_NAME = @table_name
        order by
            TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION;
        -- select * from crvAllEmployees where LastName like 'Rut%'

    // }
    */
    /*  TODO List:

    - [ ] <https://www.mytecbits.com/microsoft/sql-server/list-of-column-names>
    - [ ] table schema
            SELECT OBJECT_SCHEMA_NAME (c.object_id) SchemaName,
                    o.Name AS Table_Name,
                    c.Name AS Field_Name,
                    t.Name AS Data_Type,
                    t.max_length AS Length_Size,
                    t.precision AS Precision
            FROM sys.columns c
                INNER JOIN sys.objects o ON o.object_id = c.object_id
                LEFT JOIN  sys.types t on t.user_type_id  = c.user_type_id
            WHERE o.type = 'U'
            -- and o.Name = 'YourTableName'
            ORDER BY o.Name, c.Name
    */

    "sdfs": {
        "prefix": "Fix newlines",
        "description": "replace newlines",
        "body": [
            "${TM_SELECTED_TEXT/\\n//g}",
            // "${TM_FILENAME/[\\.-]/_/g}"
        ]
    },
    "Example: Row_Number over Partition": {
        // https://docs.microsoft.com/en-us/sql/t-sql/functions/row-number-transact-sql?view=sql-server-ver15#examples
        "prefix": "Example Partition Row Number ",
        "description": "üêá | ROW_NUMBER() over [part] | order",
        "body": [
            "",
            "/*",
            "sketch:",
            "ROW_NUMBER() OVER (",
            "    [PARTITION BY partition_expression, ... ]",
            "    ORDER BY sort_expression [ASC | DESC], ...",
            ")",
            "*/",
            "",
            "select",
            "    row_number() over(",
            "        partition by ${1:[Name]} -- optional",
            "        order by ${2:[Name] Asc}",
            "    ) as ${3:[RowNum]}${0},",
            "    *",
            "from [dbo].[cvARCustByJCJMStreet]",
            "order by",
            "    ${2:[Name] Asc}",
            "    ,${3:[RowNum] Asc}${0}",
            "",
        ]
    },
    "Todo: üöß SQL Snippets list üìå": {
        "prefix": "Todo: Snippets needed",
        "description": "Todo: Snippets needed",
        "body": [
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-nullif/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-coalesce/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-case/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-data-types/",
            "",
            "",
            "https://www.sqlservertutorial.net/sql-server-window-functions/",
            "   try lag() first",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-offset-fetch/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-between/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-self-join/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-correlated-subquery/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-subquery/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-insert-into-select/",
            "https://www.sqlservertutorial.net/sql-server-basics/sql-server-data-types/",
            "GroupBy using Sum()",
            "   https://www.sqlservertutorial.net/sql-server-basics/sql-server-group-by/",
            "   https://www.sqlservertutorial.net/sql-server-basics/sql-server-having/",
        ]
    },
    "Expression.Coalesce": {
        "prefix": "Coalesce( x, [x,...])",
        "description": "üêá | Null Coalesce",
        "body": [
            "coalesce( ${1:A, B, C} ) as [${2:Label}]${0}"
        ]
    },
    "Query.Cte": {
        "prefix": "cte -> Common Table Expression",
        "description": "üêá | CTE. Supports SELECTEDVALUE",
        "body": [
            "with ${1:cte} as (",
            "   ${TM_SELECTED_TEXT}",
            ")",
            "select top 10 ${2:*} from ${1:cte}${0}",
        ]
    },
    "Query : PartitionBy": {
        "prefix": "Row_Number() -> Partition By",
        "description": "üêá | Row number and partitionBy expression",
        "body": [
            "/*",
            "sketch:",
            "ROW_NUMBER() OVER (",
            "    [PARTITION BY partition_expression, ... ]",
            "    ORDER BY sort_expression [ASC | DESC], ...",
            ")",
            "*/",
            "Select",
            "   row_number() over(",
            "       partition by ${1:[Name]} -- optional",
            "       order by ${2:[Name] Asc}",
            "   ) as ${3:[RowNum]}${0},",
            "   *",
            "from",
            "   [dbo].[cvARCustByJCJMStreet]",
            "order by",
            "    ${2:[Name] Asc}",
            "    ,${3:[RowNum] Asc}${0}",
            "",
        ]
    },
    "Cv : Get Employee Info": {
        "prefix": "Employee Info",
        "description": "üêá | Quickly get info on an employee",
        "body": [
            "select",
            "   emp.OverheadJob,",
            "   emp.Region,",
            "   emp.Supervisor,",
            "   emp.ForemanEmail,",
            "* ",
            "from",
            "   crvAllEmployees as emp",
            "where",
            "   emp.Employee in ( ${1:'370'} )",
            "    ${2:or lower(emp.FullName) like lower('%name%')}",
            "    ${3:or lower(emp.Email) like lower('%name%')}",
            "order by",
            "    emp.Employee DESC",
        ]
    },
    "Compare: Lowercase": {
        "prefix": "Lowercase Like Compare",
        "description": "üêá | Lower() %like%",
        "body": [
            "lower(${1:$TM_SELECTED_TEXT}) like lower('${2:%name%}') ${0}",
        ]
    },
    // order by Customer offset 3 rows fetch next 6 rows only
    "Offset X, Fetch Y: Order By": {
        "prefix": "Results are offset X, count Y",
        "description": "üêá | Offset X, Fetch Y",
        "body": [
            "$TM_SELECTED_TEXT order by ${1} offset ${2:5} rows fetch next ${3:5} rows only${0}",
        ]
    },
    "Select: Top N": {
        "prefix": "Select top N rows",
        "description": "üêá | Top N",
        "body": [
            "select top ${1:1000} * from $TM_SELECTED_TEXT${0}",
        ]
    },
    "Schema: Table.GetColumns": {
        "prefix": "Schema Table.GetColumns",
        "description": "üêá | Table.GetColumns",
        "body": [
            "select * from INFORMATION_SCHEMA.COLUMNS",
            "WHERE TABLE_NAME = N'${1:$TM_SELECTED_TEXT}'${0}",
        ]
    },
    "Schema: Abbr. Table.GetColumns": {
        "prefix": "Schema Table.GetColumns Abbr",
        "description": "üêá | Table.GetColumns",
        "body": [
            "select",
            "    -- [m].*",
            "    [m].[COLUMN_NAME],",
            "    [m].[COLLATION_NAME],",
            "    [m].[CHARACTER_SET_NAME],",
            "    [m].[IS_NULLABLE],",
            "    [m].[DATA_TYPE],",
            "    [m].[DOMAIN_NAME],",
            "    [m].[CHARACTER_SET_CATALOG],",
            "    [m].[CHARACTER_SET_SCHEMA],",
            "    [m].[COLLATION_CATALOG],",
            "    [m].[COLLATION_SCHEMA],",
            "    [m].[DOMAIN_CATALOG],",
            "    [m].[DOMAIN_SCHEMA]",
            "",
            "from INFORMATION_SCHEMA.COLUMNS as [m]",
            "WHERE TABLE_NAME = N'${1:$TM_SELECTED_TEXT}'${0}",
        ]
    },
    "Schema: Datatype: Table.GetColumns": {
        "prefix": "Schema Table Datatypes, Collation",
        "description": "üêá | Columns important for SQL models.",
        "body": [
            "select COLUMN_NAME as 'Name', DATA_TYPE as 'Type', COLLATION_NAME as 'Collation', * from INFORMATION_SCHEMA.COLUMNS",
            "WHERE TABLE_NAME = N'${1:$TM_SELECTED_TEXT}'${0}",
        ]
    },
    "Schema: Verbose": {
        "prefix": "Schema Verbose",
        "description": "üêá | Table.GetColumns",
        "body": [
            "select /* simplified */",
            "   TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME",
            "from INFORMATION_SCHEMA.COLUMNS",
            "WHERE",
            "   1 = 1",
            "   or lower(TABLE_NAME) like lower('%customer%')",
            "   or lower(TABLE_NAME) like lower('%address%')",
            "   or lower(TABLE_NAME) like lower('%jobs%')",
            "    ",
            "select /* verbose */",
            "* from INFORMATION_SCHEMA.COLUMNS",
            "WHERE",
            "   1 = 1",
            "   or lower(TABLE_NAME) like lower('%customer%')",
            "   or lower(TABLE_NAME) like lower('%address%')",
            "   or lower(TABLE_NAME) like lower('%jobs%')",
        ]
    },
    "Variables: Array for Filters": {
        "prefix": "Variables Array for Filters",
        "description": "üêá | Array for Filters",
        "body": [
            "-- SELECT value FROM STRING_SPLIT('Roberto,Gail,Dylan', ',');",
            "",
            "DECLARE @SearchEmployeeNumbers TABLE (Employee int)",
            "insert into @SearchEmployeeNumbers values (370), (17513)",
            "select * from @SearchEmployeeNumbers",
            "",
            "-- find tickets by employee",
            "select top 20 [Type], [SubType], [SubmittedBy], * from [budSpotRecognition] as [spot]",
            "where [spot].[SubmittedBy] in (",
            "    select [query].[Employee] from @SearchEmployeeNumbers as [query]",
            ")",
        ]
    },
    "Search Using Table": {
        "prefix": "search From Inline Table",
        "description": "üêá | Using Inline Table Variable Conditions",
        "body": [
            "-- SELECT value FROM STRING_SPLIT('Roberto,Gail,Dylan', ',');",
            "",
            "DECLARE @SearchEmployeeNumbers TABLE (Employee int)",
            "insert into @SearchEmployeeNumbers values (370), (17513)",
            "select * from @SearchEmployeeNumbers",
            "",
            "-- find tickets by employee",
            "select top 20 [Type], [SubType], [SubmittedBy], * from [budSpotRecognition] as [spot]",
            "where [spot].[SubmittedBy] in (",
            "    select [query].[Employee] from @SearchEmployeeNumbers as [query]",
            ")",
        ]
    }
}