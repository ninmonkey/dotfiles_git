{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages.
    /*
    global snippets use
        scope: ""

    disabled snippets use any non existing lang:
        scope: "disable" or "off"

        description:
            Examples of different input types
            this isn't an actual snippet file to use
            it's an example template

        docs:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets

        regex transform:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_transform-examples

        extension snippets tutorial:
            https://code.visualstudio.com/api/language-extensions/snippet-guide

        vscode variables:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables

        🎨🖥️⁞┐⇽⇾— ⚙️💡📋📹🔑🔥⇒🕷️🕹️→

    ninmonkey. created: 2021-06-30

    */
    "🐒regex: Fix Backslash escaped filepaths": {
        // this could be editor command
        // safety, should probably require '['"]' on both ends of matches
        "scope": "ps1,wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        "prefix": "re: Fix Backslash filepaths",
        "description": "Transforms \\\\ ⇒ /",
        "body": [
            "${TM_SELECTED_TEXT/(\\\\{2})/\\//gi}", // out: /
        ]
    },
    "🐒regex: Escape Double Quotes": {
        "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        "prefix": "re: Escape Double Qoutes: escape quotes",
        "description": "Transforms \" ⇒ \\\"",
        "body": [
            "${TM_SELECTED_TEXT/[\"]/\\\"/gi}"
        ]
    },
    "🐒snippet: Insert New Snippet definition": {
        "scope": "wip,json,jsonc,code-snippets,code-workspace", //json,jsonc",
        "prefix": "Snippet: New 🏃‍♂️",
        "description": "Transforms \" ⇒ \\\"",
        "body": [
            "\"$Name\": {",
            "    \"prefix\": \"$Prefix ⁞ nin\",",
            "    \"description\": \"nin🐒 ⁞ $Description\",",
            "    \"body\": [        /*",
            "        input:",
            "            using ⋯",
            "",
            "        output:",
            "            ⋯",
            "",
            "        */",
            "    ],",
            "},"
        ]
    },
    "CmdletBinding": {
        "prefix": "zznin CmdletBinding()",
        "body": [
            "[CmdletBinding()]",
            "param (",
            "    [Parameter(Mandatory, Position=0,",
            "        HelpMessage=\"doc\")]",
            "    [${1:TypeName}]$${2:ParameterName}$0",
            ")"
        ],
        "description": "adds cmdlet attributes."
    },
    "regex: strip extension": {
        // "description": "c:\\windows\\bar",
        // "scope": "json,jsonc",
        "scope": "example",
        "prefix": "[wip]\"_ re\"_\"_ex: strip the final .text",
        "description": "regex strip",
        "body": [
            "${TM_SELECTED_TEXT/(.*)\\..+?$/$1/}"
        ]
    },
    // "configPath": "c:\windows",
    "regex: quote all lines, up to selection": {
        "scope": "json,jsonc",
        "prefix": "re: QuoteText (as Json)",
        "description": "regex: quote all lines, to selection. at this point it's better to use an extension",
        "body": [
            "${TM_SELECTED_TEXT/^(.*)$/\"$1\",/gim}"
        ]
    },
}