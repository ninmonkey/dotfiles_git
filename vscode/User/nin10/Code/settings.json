{
    "launch": {
        "configurations": [
            {
                "args": [
                    "--extensionDevelopmentPath=${workspaceFolder}"
                ],
                "name": "Launch Extension",
                "outFiles": [
                    "${workspaceFolder}/out/**/*.js"
                ],
                "preLaunchTask": "npm",
                "request": "launch",
                "type": "pwa-extensionHost"
            },
            {
                "name": "Py:🐍 <variable>.py",
                "type": "python",
                "request": "launch",
                "args": [
                    "-Nop"
                ],
                "showReturnValue": true,
                "program": "${file}",
                // "cwd": "${file.py}",
                // "internalConsoleOptions": "openOnFirstSessionStart",
                "justMyCode": true,
                // "pythonArgs": [],
                // "redirectOutput": true,
                // "program": "${workspaceFolderBasename}/Day1/py/day1.py",
                // "program": "${workspaceFolder}/Day1/day1-i2.py",
                // "program": "${workspaceFolder}Day1/py/day1.py",
                // "program": "${file}",
                // "console": "integratedTerminal",
                // "console": "externalTerminal",
                // "redirectOutput": true,
                // "autoReload": {}
            },
            /*

      ### Sect: Build in-Dotnet launchers

             tags: dotnet, defaults, launch.json

      */
            // attach to -> remote dotnet core console
            // Attach a debugger to a .NET Core Console App on a remote machine.
            // launch -> [🐛debugger] dotnet core console app
            // launch -> [🌍Browser] + [🐛debugger] dotnet core console app
            // Attach a debugger to a .NET Core Console App.
            //   // attach to -> local dotnet core console
            // Attach a debugger to a .NET Core Console App.
            // [1] Attach -> [🐛debugger] to [🏠Local] dotnet core [Console💻] app
            {
                "name": "[1] .NET Core Attach ▂ 🐛+💻▂",
                "type": "coreclr",
                "request": "attach"
            },
            ///
            // [2] Attach -> [🐛debugger] to [Remote🖧] dotnet core [Console💻] app
            // [2] 👫Attach -> [🐛debugger] to a .NET Core [Console💻] App on a [remote🖧] machine.
            {
                "name": "[2] .NET Core Attach ▂ 🐛+💻 ▂ is [1] + (🖧Remote)▂",
                "type": "coreclr",
                "request": "attach",
                "pipeTransport": {
                    "pipeCwd": "${workspaceFolder}",
                    "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                    "pipeArgs": [],
                    "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                }
            },
            // Launch a .NET Core Console App with a debugger.
            // [3] Launch -> [🐛debugger] to dotnet core [Console💻] app
            {
                "name": "[3] .NET Core 🏃‍♀️Launch ▂ 🐛+💻▂",
                "type": "coreclr",
                "request": "launch",
                "preLaunchTask": "build",
                "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
                "args": [],
                "cwd": "${workspaceFolder}",
                "stopAtEntry": false,
                "console": "internalConsole"
            },
            // [4] launch -> [🌍Browser] + [🐛debugger] a .NET Core [🌍Web] App
            // Launch a .NET Core Web App with both a browser and a debugger.
            {
                "name": "[4] .NET Core 🏃‍♀️Launch ▂ 🐛+[🌍Browser]▂(🌍Web)▂",
                "type": "coreclr",
                "request": "launch",
                "preLaunchTask": "build",
                "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
                "args": [],
                "cwd": "${workspaceFolder}",
                "stopAtEntry": false,
                "serverReadyAction": {
                    "action": "openExternally",
                    "pattern": "\\bNow listening on:\\s+(https?://\\S+)"
                },
                "env": {
                    "ASPNETCORE_ENVIRONMENT": "Development"
                },
                "sourceFileMap": {
                    "/Views": "${workspaceFolder}/Views"
                }
            },
            // [5] Launch -> .NET Core [Console💻] App on a [Remote🖧] machine.
            // Launch a .NET Core Console App on a remote machine.
            {
                "name": "[5] .NET Core 🏃‍♀️Launch (💻console) ▂on (🖧Remote)▂",
                "type": "coreclr",
                "request": "launch",
                "preLaunchTask": "build",
                "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
                "args": [],
                "cwd": "${workspaceFolder}",
                "stopAtEntry": false,
                "console": "internalConsole",
                "pipeTransport": {
                    "pipeCwd": "${workspaceFolder}",
                    "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                    "pipeArgs": [],
                    "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                }
            },
            /*

      ### Sect: From JustinGrote

      tags: dotnet, launch.json, justinGrote
        ref: https://gist.github.com/ninmonkey/b60e735760c78cc6b70443162d2bfa55

      */
            // [1] JustinGrote:
            {
                "name": "[1] JG Pwsh: Interactive Pwsh (💻Console)",
                "presentation": {
                    "group": "Powershell"
                },
                "request": "launch",
                "type": "PowerShell"
            },
            // [2] JustinGrote:
            {
                "cwd": "${file}",
                "name": "[2] JG Pwsh: Run",
                "presentation": {
                    "group": "Powershell"
                },
                "request": "launch",
                "script": "${file}",
                "type": "PowerShell"
            },
            // [3] JustinGrote:
            {
                "args": [
                    "${command:SpecifyScriptArgs}"
                ],
                "cwd": "${file}",
                "name": "[3] JG Pwsh: Run w/ Args",
                "presentation": {
                    "group": "Powershell"
                },
                "request": "launch",
                "script": "${file}",
                "type": "PowerShell"
            },
            // [4] JustinGrote:
            {
                "args": [
                    "${command:SpecifyScriptArgs}"
                ],
                "name": "[4] JG Pwsh: Pester",
                "presentation": {
                    "group": "Powershell"
                },
                "request": "launch",
                "script": "Invoke-Pester",
                "type": "PowerShell"
            },
            // [5] JustinGrote:
            {
                "name": "[5] JG Pwsh: Attach",
                "presentation": {
                    "group": "Powershell"
                },
                "processId": "${command:PickPSHostProcess}",
                "request": "attach",
                "runspaceId": 1,
                "type": "PowerShell"
            },
            /*

      ### Sect: Personal Launchers

      tags: dotnet, launch.json

      */
            {
                "name": "Main.ps1 🏃‍♂️",
                "type": "PowerShell",
                "request": "launch",
                "script": "${workspaceFolder}/main.ps1",
                "cwd": "${workspaceFolder}",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                }
            },
            {
                "name": "Cur.ps1 🏃‍♂️",
                "type": "PowerShell",
                "request": "launch",
                "script": "${file}",
                "presentation": {
                    "hidden": false,
                    "group": "",
                    "order": 1
                },
                "args": [
                    "-Nop"
                ],
                // "cwd": "${workspaceFolder}"
                "cwd": "${file}" // else workspace
                // "cwd": "C:/Users/cppmo_000/SkyDrive/Documents/2021/Powershell"
            },
            {
                "presentation": {
                    "hidden": false,
                    "group": "VisualTest"
                    // "order": 1
                },
                "name": "🐛🎨 cur: Invoke-GithubInfo visualTest ",
                "type": "PowerShell",
                "request": "launch",
                "script": "${workspaceFolder}/test/public/visual_test/Invoke-GithubInfo.visual_test.ps1",
                // "cwd": "${file}"
                "cwd": "${workspaceFolder}"
            },
            {
                "name": "[🐛] run a specific *.tests.ps1",
                "type": "PowerShell",
                "request": "launch",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "script": "Invoke-pester",
                "args": [
                    "-Path 'public\\ConvertFrom-LiteralPath.tests.ps1'"
                ],
                "cwd": "${workspaceFolder}"
            },
            // {
            //     "name": "PowerShell: Launch Script",
            //     "type": "PowerShell",
            //     "request": "launch",
            //     "script": "enter path or command to execute e.g.: ${workspaceFolder}/src/foo.ps1 or Invoke-Pester",
            //     "cwd": "${workspaceFolder}"
            // },
            {
                "name": "cur.ps1",
                "type": "PowerShell",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "request": "launch",
                "script": "${file}",
                "cwd": "${file}"
            },
            {
                "name": "cur 🐜 (temp_cur_test.ps1)",
                "type": "PowerShell",
                "request": "launch",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "script": "${workspaceFolder}/private/temp_cur_test.ps1",
                "cwd": "${workspaceFolder}"
            },
            {
                "presentation": {
                    "hidden": false,
                    "group": "VisualTest"
                    // "order": 1
                },
                "name": "🐛🎨 cur: Format-Dict visualTest ",
                "type": "PowerShell",
                "request": "launch",
                "script": "${workspaceFolder}/test/public/visual_test/Format-Dict.visual_test.ps1",
                // "cwd": "${file}"
                "cwd": "${workspaceFolder}"
            },
            {
                "presentation": {
                    "hidden": false,
                    "group": "VisualTest"
                    // "order": 1
                },
                "name": "🐛🎨 cur: visualTest ",
                "type": "PowerShell",
                "request": "launch",
                "script": "${workspaceFolder}/test/public/visual_test/_format_RgbColorStringy.visual_tests.ps1",
                // "cwd": "${file}"
                "cwd": "${workspaceFolder}"
            },
            {
                "name": "cur: Module Test🐛",
                "type": "PowerShell",
                "request": "launch",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "script": "${workspaceFolder}/test/private/_import_error_test.ps1",
                // "cwd": "${file}"
                "cwd": "${workspaceFolder}"
            },
            {
                "name": "🐛 : [Details] — ", // [nin.PowerShell]",
                "type": "PowerShell",
                "request": "launch",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "script": "Invoke-Pester",
                "args": [
                    "-Output",
                    "Detailed"
                ],
                "cwd": "${workspaceFolder}"
            },
            {
                "name": "🐛 : | default | — ", // [nin.PowerShell]",
                "type": "PowerShell",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "request": "launch",
                "script": "Invoke-Pester",
                // "args": [],
                "cwd": "${workspaceFolder}"
            },
            {
                "name": "🐛 | 🏃 | #WIP |",
                "type": "PowerShell",
                "request": "launch",
                "script": "Invoke-Pester",
                "cwd": "${workspaceFolder}",
                "presentation": {
                    "hidden": true,
                    "group": "",
                    "order": 1
                },
                "args": [
                    "-Output",
                    "Detailed",
                    "-TagFilter",
                    // "wiph"
                    "wip-hash"
                ]
            }
            /*

        end of : Settings -> launch -> configurations -> [..]

      */
        ],
        "compounds": [
            // {
            //   "name": "Compound",
            //   "configurations": [],
            //   "preLaunchTask": "",
            //   "presentation": {
            //     "hidden": false,
            //     "group": "",
            //     "order": 1
            //   },
            //   "stopAll": false
            // }
        ]
    },
    // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
    /*

  ### Sect: About

      Profile:            Jake, Desktop.
      Original Rewrite:   2021-05-07
      This is the *very* verbose version of the config file
\
      Generate Table Of Contents using:
          rg '\s*###*\s*(SubSect|Sect):\s*(?P<Title>.*$)' -- "$src"
      or
          rg '\s*###*\s*(S\w+):\s*(?P<Title>.*$)' -- "$src"



    - [Disable Extensions using Task Args](https://code.visualstudio.com/api/working-with-extensions/testing-extension#disabling-other-extensions-while-debugging)
      */
    /*

### Sect: Screencast mode config

       tags:

*/
    /*

### Sect: Screencast Mode

       tags: Screencast

*/
    // "screencastMode.fontSize": 16,
    "screencastMode.fontSize": 20,
    // Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
    "screencastMode.keyboardOverlayTimeout": 500, // 300, // 800
    "screencastMode.mouseIndicatorColor": "#8dc4a0",
    "screencastMode.mouseIndicatorColor": "#c7e169",
    "screencastMode.mouseIndicatorColor": "#c7e180",
    "screencastMode.mouseIndicatorColor": "#e0ff1a80",
    "screencastMode.mouseIndicatorSize": 30, // fdef: 20
    "screencastMode.onlyKeyboardShortcuts": true, // def: true
    // Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
    "screencastMode.verticalOffset": 80, // ddef: 20
    "screencastMode.verticalOffset": 90, // def: 20
    // "terminal.integrated.minimumContrastRatio": 1,
    /*


  ### Sect: Config Settings to Experiment with

      */
    "terminal.integrated.persistentSessionReviveProcess": "never", // new experiment config: <https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-process-reconnection>
    // will this prevent prompt from synapse (venv) automatically changing your prompt
    "python.analysis.typeCheckingMode": "basic",
    "python.terminal.activateEnvInCurrentTerminal": false,
    "python.terminal.activateEnvironment": false,
    "debug.openExplorerOnEnd": false, // with auto tester, you want this to false
    "debug.focusWindowOnBreak": true,
    "editor.selectionHighlight": true,
    "editor.autoSurround": "languageDefined",
    "editor.autoClosingBrackets": "beforeWhitespace",
    "editor.autoClosingOvertype": "always",
    "editor.trimAutoWhitespace": true,
    "editor.dragAndDrop": true,
    // "editor.codeActionsOnSave":{
    //     "source.fixAll": true,
    //     "source.organizeImports": true
    // },
    "debug.console.wordWrap": true,
    "debug.console.historySuggestions": false, // may huge impact on removing 'spam' in debug's intellisense
    "debug.console.collapseIdenticalLines": true,
    "editor.copyWithSyntaxHighlighting": true,
    "editor.codeLens": true,
    "editor.find.seedSearchStringFromSelection": true,
    "editor.find.cursorMoveOnType": true,
    "editor.fontLigatures": true,
    "editor.folding": true,
    "editor.foldingHighlight": true, //collapsed folded blocks highlight the single line
    "editor.foldingStrategy": "auto",
    "editor.showFoldingControls": "mouseover", // hide icons until you hover the gutter
    "editor.highlightActiveIndentGuide": true, // highight **just one** specific line-block (the current block)
    // "editor.fontWeight": "normal", // bold 300, 900,
    "editor.hover.delay": 300, // 10, 710,
    "editor.hover.enabled": true, // false,
    // "editor.hover.sticky": false,
    "editor.inlineHints.enabled": true, // does what? doesn't seem to be "run tests" or "linting"
    // Code action kinds to be run on save.
    // "editor.codeActionsOnSave": {
    //     "source.fixAll": false,
    //     "source.organizeImports": false,
    // },
    "editor.lightbulb.enabled": true,
    // "editor.occurrencesHighlight": true,
    // "editor.overviewRulerBorder": true, // overview does what?
    // "editor.hideCursorInOverviewRuler": true, // does what?
    /*

    ### Sect: Minimap

           tags:

    */
    "editor.minimap.enabled": true,
    //
    // mode: small right
    "editor.minimap.renderCharacters": true,
    //
    // mode: renderBlocks wide
    // "editor.minimap.renderCharacters": false,
    // "debug.focusWindowOnBreak": true,
    "editor.minimap.maxColumn": 40,
    "editor.minimap.scale": 1, // nice on large monitor
    "editor.minimap.showSlider": "mouseover",
    "editor.minimap.showSlider": "always",
    //
    // mode: small left
    "editor.minimap.side": "right",
    "editor.linkedEditing": true,
    // "editor.minimap.size": ,
    "editor.minimap.size": "fill",
    "editor.minimap.scale": 1,
    // "editor.inlineHints.fontSize": 0,
    // "editor.padding.bottom": 0,
    // "editor.padding.top": 0,
    "editor.matchBrackets": "near",
    "editor.matchBrackets": "always", // shows the block you're in, without touching bracket
    "editor.parameterHints.cycle": true,
    "editor.parameterHints.enabled": true,
    "editor.peekWidgetDefaultFocus": "tree",
    // "editor.quickSuggestions": false | true | Obj
    "editor.quickSuggestions": {
        "other": true,
        "comments": false,
        "strings": false
    },
    "diffEditor.ignoreTrimWhitespace": false,
    // more: "diffEditor.*"
    // "workbench.editor.limit.value": 10,
    // 20 more: "workbench.editor.*"
    // "workbench.editor.untitled.hint": "text",
    // "explorer.openEditors.sortOrder": "alphabetical",
    // "editor.stickyTabStops": false,
    "diffEditor.wordWrap": "inherit",
    "editor.wrappingStrategy": "simple",
    // "pesterExplorer.testResultsFilePath": "TestExplorerResults.xml",
    "pesterExplorer.logpanel": true,
    // "pesterExplorer.logfile": "pesterExplorer.log",
    // "pesterExplorer.testRootDirectory": "/public",
    // "pesterExplorer.testRootDirectory": "./public",
    // "pesterExplorer.testRootDirectory": ".",
    /*
      Can I make person JSON config rules?

      "json.schemas": [
          {
              "fileMatch": [
                  "/myfile"
              ],
              "url": "schemaURL"
          }
      ],
      */
    /*
      html.format.wrapAttributes
          "aligned-multiple"              // Wrap when line length is exceeded, align attributes vertically.
          "auto"                          // Wrap attributes only when line length is exceeded.
          "force"                         // Wrap each attribute except first
          "force-aligned"                 // Wrap each attribute except first and keep aligned.
          "force-expand-multiline         // Wrap each attribute
          "preserve",                     // Preserve wrapping of attributes
          "preserve-aligned",             // Preserve wrapping of attributes but align

          */
    "html.format.wrapAttributes": "auto",
    "editor.definitionLinkOpensInPeek": true,
    "editor.definitionLinkOpensInPeek": false,
    /*

  ###### SubSect: Truly Experimental

      */
    "search.experimental.searchInOpenEditors": true,
    "python.insidersChannel": "weekly",
    /*

  ###### SubSect: Notebooks: ⇢ .ipynb, Jupyter, nteract, ...

      see also settings:
          powershell.notebooks.*

      /*
      "notebook.breadcrumbs.showCodeCells": and
      "notebook.outline.showCodeCells":
              https://code.visualstudio.com/updates/v1_53#_outline-and-breadcrumbs

          */
    "notebook.breadcrumbs.showCodeCells": true,
    "workbench.panel.defaultLocation": "right",
    "workbench.panel.defaultLocation": "bottom",
    "terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",
    "terminal.integrated.showExitAlert": true,
    "notebook.outline.showCodeCells": true,
    // "powershell.notebooks.saveMarkdownCellsAs": "LineComment",
    /*

  ###### SubSect: Editor ⇢ Tabs, Pins, Icons, Decorations

      */
    "workbench.editor.showTabs": false,
    "workbench.editor.showTabs": true, // default
    "workbench.editor.showIcons": false,
    "workbench.editor.showIcons": true, // default
    // see: <https://code.visualstudio.com/updates/v1_53#_wrap-tabs>
    "workbench.editor.wrapTabs": false, // default
    // "workbench.editor.tabSizing": "shrink", // super important if you 'wrapTabs'
    // "workbench.editor.tabSizing": "fit", // super important if you 'wrapTabs'
    "workbench.editor.tabSizing": "fit", // super important if you 'wrapTabs'
    // "workbench.editor.wrapTabs": true,
    /*
      "workbench.editor.pinnedTabSizing":
      Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when #workbench.editor.showTabs# is disabled.
      "compact":      A pinned tab will show in a compact form with only icon or first letter of the editor name.
      "normal":       [default] A pinned tab inherits the look of non pinned tabs.
      "shrink":       A pinned tab shrinks to a compact fixed size showing parts of the editor name.
      */
    "workbench.editor.pinnedTabSizing": "shrink",
    "workbench.editor.pinnedTabSizing": "normal", // default
    "workbench.editor.decorations.colors": true,
    "workbench.editor.decorations.badges": true,
    "workbench.editor.enablePreviewFromCodeNavigation": true,
    /*

  ###### SubSect: Searching

      */
    /*

      "search.mode":
              Default search mode

              The search.mode setting is now available to allow configuring what search UI commands like Search: Find in Files, and the explorer's Find in Folder... and Find in Workspace context menu entries use,

          "view"             Search in the search view, either in the panel or sidebar.
          "newEditor"        Search in a new search editor
          "reuseEditor"      Search in an existing search editor if present, otherwise in a new search editor

      */
    // "search.mode": "view",
    // "search.mode": "reuseEditor",
    "search.searchEditor.doubleClickBehaviour": "goToLocation", // "openLocationToSide", "goToLocation"
    "search.searchEditor.defaultNumberOfContextLines": 1, // grep -C <n>
    "search.searchEditor.reusePriorSearchConfiguration": true,
    "search.mode": "newEditor",
    "editor.links": true,
    // "editor.glyphMargin": true,
    // "editor.fontWeight": "normal",
    // schema for Powershell
    /*

  ### Sect: Real Config Starts Here

      */
    /*

  ### Sect: Suggestions, Intellisence, Autocomplete, Completers

      */
    "editor.suggest.insertMode": "insert",
    // "editor.quickSuggestionsDelay": 10,
    "editor.quickSuggestionsDelay": 800,
    "editor.wordBasedSuggestionsMode": "allDocuments",
    "editor.wordBasedSuggestionsMode": "matchingDocuments", // "allDocuments" "currentDocuments", "matchingDocuments"
    /*

      editor: suggest
          https://code.visualstudio.com/docs/editor/intellisense#_customizing-intellisense

      */
    "editor.wordBasedSuggestions": true,
    "editor.suggest.showWords": false, // first test
    "editor.suggest.showKeywords": true,
    // "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?", // do not use 'simple' drives me crazy
    // "editor.suggestSelection": "recentlyUsedByPrefix",
    // "editor.suggestSelection": "first",
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "choseToUpdateConfiguration",
    "editor.suggest.showStatusBar": true, // https://code.visualstudio.com/updates/v1_51#_status-bar-for-suggestions
    // "editor.suggest.insertMode":"insert", // https://code.visualstudio.com/updates/v1_51#_move-cursor-to-select-suggestions
    // "editor.colorDecorators": true,
    "editor.suggest.filterGraceful": true,
    "editor.suggest.localityBonus": false,
    // "editor.acceptSuggestionOnEnter": "smart",
    "editor.suggest.showFields": true,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.links": true, // this might be the cause of the copy paste issues
    // "editor.copyWithSyntaxHighlighting": true,
    "editor.emptySelectionClipboard": false,
    /*

  ### Sect: Git, Github

      */
    /*
      "git:*"
          <https://code.visualstudio.com/updates/v1_53#_git-new-settings>
          "git.autofetch"
          "git.ignoreRebaseWarning"
          "git.requireGitUserConfig"
      */
    // "git.autofetch": false,           // all | true | false
    "git.ignoreRebaseWarning": false, // [default]false | true
    "git.requireGitUserConfig": true, // [def]true | false
    /*

  ### Sect: Log Levels and Trace / tracing

      */
    "powershell.developer.editorServicesLogLevel": "Diagnostic",
    "powerquery.trace.server": "verbose",
    "powerquery.trace.server": "messages",
    "python.analysis.logLevel": "Warning", // error/warnining/info/trace
    // "powershell editor services.trace.server": "verbose",
    // "powershell editor services.trace.server": "diagnostic",
    /*

  ### Sect: Language Config

      */
    // "markdown.extension.orderedList.autoRenumber": true,
    "[python]": {
        "gitlens.codeLens.symbolScopes": [
            "!Module"
        ],
        // "editor.quickSuggestions": {
        //     "strings": true
        // },
        "editor.semanticHighlighting.enabled": true,
        "editor.wordBasedSuggestions": false,
        "editor.defaultFormatter": "ms-python.vscode-pylance",
        "editor.formatOnSave": true,
        "editor.formatOnSaveMode": "modifications",
        "editor.formatOnType": false
    },
    "[jsonc]": {
        // "editor.quickSuggestions": {
        //     "strings": true
        // },
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.formatOnSave": true,
        "editor.suggest.showSnippets": false,
        "editor.fontSize": 13,
        // "editor.fontFamily": "'cascadia code pl semilight', verdana, 'cascadia code', monospace",
        // "editor.fontFamily": "'cascadia code pl semilight', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
        // "editor.fontFamily": "'cascadia code pl', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
        // "editor.fontFamily": "'cascadia code mono', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
        // "editor.fontFamily": "'cascadia code', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
        // weight: cascadia code mono: 450 /w 17px
        // weight: cascadia code: [default] /w 17px
        // "editor.fontWeight": "400",
        // "editor.fontSize": 17,
        "editor.formatOnPaste": false,
        // "editor.fontWeight": "500",
        // "editor.fontWeight": "400",
    },
    // "json.maxItemsComputed": 10000,
    "[json][jsonc][markdown]": {
        // "editor.fontSize": 13,
    },
    "[markdown-math][markdown_latex_combined]": {},
    "[dotnet-interactive.markdown]": {},
    "[json]": {
        "editor.suggest.showSnippets": false,
        // "editor.quickSuggestions": {
        //     "strings": true
        // },
        // "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.formatOnSave": true,
        "editor.formatOnPaste": false,
        // "editor.formatOnType": true,
        "editor.formatOnPaste": false,
        "editor.semanticHighlighting.enabled": true,
        // "editor.maxTokenizationLineLength": 20000
        "editor.detectIndentation": false,
        "editor.tabSize": 4
    },
    "workbench.tree.indent": 14, //  # might be good for XML / JSON that's nested
    "[xml]": {
        "editor.formatOnSave": true,
        /* for formatting, try these depending on what's installed
       */
        "editor.defaultFormatter": "esbenp.prettier-vscode", // prettier
        "editor.defaultFormatter": "vscode.html-language-features", // built-in
        "editor.defaultFormatter": "redhat.vscode-xml"
    },
    "xml.format.preserveAttributeLineBreaks": false,
    "xmlTools.splitAttributesOnFormat": true,
    "xml.format.splitAttributes": true,
    "xml.format.splitAttributesIndentSize": 2,
    // "xmlTools.xmlFormatterImplementation": "v2",
    "xmlTools.enableXmlTreeView": true,
    "xml.codeLens.enabled": true,
    "[html]": {
        // "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.suggest.insertMode": "replace",
        "gitlens.codeLens.scopes": [
            "document"
        ],
        "editor.defaultFormatter": "vscode.html-language-features"
    },
    "[markdown]": {
        // "editor.defaultFormatter": "vscode.markdown-language-features",
        // "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
        // "editor.defaultFormatter": "shd101wyy.markdown-preview-enhanced",
        // "editor.defaultFormatter": "yzhang.markdown-all-in-one",
        "editor.wordWrap": "on",
        "editor.quickSuggestions": false,
        "editor.formatOnSave": true,
        // "editor.formatOnType": true,
        /* hard line breaks in MD are declared using two trailing spaces */
        "files.trimTrailingWhitespace": false,
        "editor.defaultFormatter": "yzhang.markdown-all-in-one"
    },
    "[csv]": {
        "editor.wordWrap": "off",
        // "files.trimFinalNewlidnes": true,
        "files.insertFinalNewline": false
    },
    "[powerquery]": {
        "editor.formatOnSave": false,
        "editor.semanticHighlighting.enabled": true
        // "editor.semanticHighlighting.enabled": false,
        // todo: edit theme
    },
    "editor.fontSize": 13,
    "[log]": {
        "editor.wordWrap": "on",
        "editor.wrappingIndent": "deepIndent",
        "editor.wrappingStrategy": "simple",
        "editor.fontSize": 11,
    },
    "[javascript]": {
        "editor.defaultFormatter": "vscode.typescript-language-features",
        // "editor.formatOnType": true,
        "editor.formatOnSave": true,
        "editor.formatOnPaste": false
    },
    /*
    ### Sect: Prettier

           tags: Formatting, Addon

    */
    // Include parentheses around a sole arrow function parameter
    "prettier.arrowParens": "always",
    // Controls the printing of spaces inside object literals
    "prettier.bracketSpacing": true,
    // Path to the prettier configuration file
    "prettier.configPath": "",
    // This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
    // A list of languages IDs to disable this extension on
    "prettier.disableLanguages": [],
    // A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
    "prettier.documentSelectors": [],
    // Control whether Prettier formats quoted code embedded in the file.
    "prettier.embeddedLanguageFormatting": "auto",
    // Controls whether prettier is enabled or not.
    "prettier.enable": true,
    // Enable debug logs for troubleshooting.
    "prettier.enableDebugLogs": false,
    // Specify the end of line used by prettier
    "prettier.endOfLine": "lf",
    // Specify the global whitespace sensitivity for HTML files.
    //  Valid options:
    // - `css` - Respect the default value of CSS display property.
    // - `strict` - Whitespaces are considered sensitive.
    // - `ignore` - Whitespaces are considered insensitive.
    "prettier.htmlWhitespaceSensitivity": "css",
    // Path to a .prettierignore file
    "prettier.ignorePath": ".prettierignore",
    // Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
    "prettier.insertPragma": false,
    // If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
    "prettier.jsxBracketSameLine": false,
    // Use single quotes instead of double quotes in JSX
    "prettier.jsxSingleQuote": false,
    // Package manager is now automatically detected by VS Code. This setting is no longer used.
    // The package manager you use to install node modules.
    // "prettier.packageManager": "npm",
    // Path to the prettier module
    "prettier.prettierPath": "",
    // Fit code within this line limit
    // (Markdown) wrap prose over multiple lines
    "prettier.proseWrap": "preserve",
    // Change when properties in objects are quoted
    "prettier.quoteProps": "as-needed",
    // Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
    //
    // > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
    "prettier.requireConfig": false,
    // Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
    "prettier.requirePragma": false,
    // When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
    // > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
    "prettier.resolveGlobalModules": false,
    // Whether to add a semicolon at the end of every line
    "prettier.semi": true,
    // If true, will use single instead of double quotes
    "prettier.singleQuote": false,
    // Controls the printing of trailing commas wherever possible. Valid options:
    // - `none` - No trailing commas
    // - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
    // - `all` - Trailing commas wherever possible (function arguments)
    "prettier.trailingComma": "es5",
    // Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
    "prettier.useEditorConfig": true,
    // Indent lines with tabs
    "prettier.useTabs": false,
    // Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
    "prettier.vueIndentScriptAndStyle": false,
    // If true, this extension will process files in node_modules
    "prettier.withNodeModules": false,
    "prettier.printWidth": 140,
    "prettier.tabWidth": 4, // 2
    "terminal.integrated.drawBoldTextInBrightColors": false,
    // "editor.quickSuggestions": {
    //     "other": true,
    //     "comments": false,
    //     "strings": false
    // },
    /*

  ###### SubSect: Extension: ⇢ Markdown

      section: Markdown + related MD extensins

      */
    // Controls the font family used in the markdown preview.
    // "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",
    // // Controls the font size in pixels used in the markdown preview.
    // "markdown.preview.fontSize": 14,
    // // Controls the line height used in the markdown preview. This number is relative to the font size.
    // "markdown.preview.lineHeight": 1.6,
    "markdown-preview-enhanced.codeBlockTheme": "auto.css",
    // "markdown-preview-enhanced.configPath": "a",
    "markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,
    "markdown-preview-enhanced.enableEmojiSyntax": true,
    // "markdown-preview-enhanced.enableExtendedTableSyntax": false,
    // "markdown-preview-enhanced.frontMatterRenderingOption": "table",
    "markdownlint.run": "onType",
    "markdownlint.config": {
        "ul-indent": true,
        "ul-style": true,
        "MD028": false,
        "MD025": {
            "front_matter_title": ""
        }
    },
    // https: //github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens
    // "gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}\n\n${commands}",
    "markdownlint.ignore": [
        // "a"
    ],
    "markdownlint.customRulesAlwaysAllow": [],
    // "markdown"
    "markdownlint.customRules": [
        "{docsmsft.docs-linting}/markdownlint-custom-rules/rules.js"
    ],
    /*
  ###### SubSect: Extension: ⇢ mypy ( todo: sort / cleanup / test these)

      */
    "editor.inlineHints.fontFamily": "'cascadia code', Consolas, 'Courier New', monospace",
    "editor.codeLensFontFamily": "'cascadia code pl', 'cascadia code', arial, 'cascadia code', 'monospace'", // this changes "run tests" inside .ps1 pester blocks
    "editor.codeLensFontSize": 14,
    "debug.openDebug": "openOnDebugBreak",
    "editor.wordWrapColumn": 140,
    // "terminal.integrated.fontFamily": "corbel, 'cascadia code', fira code retina, cascadia code, consolas",
    "zenMode.centerLayout": true,
    "zenMode.hideActivityBar": true,
    "zenMode.hideTabs": true,
    "zenMode.hideLineNumbers": true,
    "zenMode.silentNotifications": true,
    "zenMode.hideStatusBar": true,
    "zenMode.fullScreen": false,
    "zenMode.restore": true,
    "debug.openDebug": "openOnDebugBreak",
    "editor.wordWrapColumn": 140,
    "terminal.integrated.rendererType": "auto",
    // "workbench.editor.focusRecentEditorAfterClose": true,
    "gitlens.views.repositories.files.layout": "list",
    // "terminal.integrated.inheritEnv": false,
    // try some new
    // "corbel, 'cascadia code', calibri, Consolas,  Consolas, 'Courier New', monospace",
    // "editor.inlayHints.fontFamily": "'cascadia code pl semilight', verdana, 'cascadia code', monospace",
    "codepoint.statusbar": "description",
    "workbench.quickOpen.closeOnFocusLost": false, // it means the command palette
    "workbench.quickOpen.preserveInput": true,
    "task.quickOpen.detail": true,
    "task.quickOpen.history": 30,
    "task.quickOpen.showAll": false,
    "task.quickOpen.skip": false,
    "gitlens.advanced.quickPick.closeOnFocusOut": true,
    // "editor.suggest.statusBar.visible": true,
    // "editor.formatOnSave": true,
    // "editor.formatOnPaste": true,
    // "editor.formatOnType": true,
    // "editor.largeFileOptimizations": false,
    // "python.linting.mypyEnabled": true,
    // "debug.inlineValues": true,
    /*
      test: mypy:

      sdfssfdsf


      config: https://mypy.readthedocs.io/en/latest/config_file.html

      */
    // "mypy.configFile": "",
    /*
      "mypy.executable": "",
      "mypy.targets": [
          "."
      ],
      /*

      test: python

      */
    /*
      "python.linting.mypyArgs": [
          "--ignore-missing-imports",
          "--follow-imports=silent",
          "--show-column-numbers"
      ],
      "pythonlinting.mypyCategorySeverity.error": "Warning",
      "python.linting.mypyCategorySeverity.note": "Warning",
      */
    // "python.linting.mypyPath": "mypy",
    // "python.linting.mypyPath": "mypy",
    // "python.analysis.memory.keepLibraryAst": false,
    // "python.analysis.errors": false,
    // "python.analysis.errors": [],\
    /*

  ###### SubSect: Extension: ⇢ markdown

      */
    "markdown.extension.orderedList.autoRenumber": true,
    /*

  ###### SubSect: Extension: ⇢ "ms-vscode.powershell[-preview]"


      */
    // "editor.wordSeparators": "`~!@#%^&*()-=+[{]}\\|;:'\",.<>/?",
    // "powershell.powerShellDefaultVersion": "",
    // "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    "editor.find.autoFindInSelection": "multiline",
    "[powershell]": {
        // "editor.suggest.snippetsPreventQ12uickSuggestions": false,
        // "editor.fontSize": 15,
        "editor.suggest.showWords": false,
        "breadcrumbs.showInterfaces": true,
        "editor.semanticHighlighting.enabled": false,
        "editor.semanticHighlighting.enabled": true,
        "editor.suggest.showIssues": true,
        "editor.suggest.showColors": true,
        "editor.suggest.showFunctions": true,
        "editor.suggestLineHeight": 0,
        // "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
        "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?", // break on $ and -
        "editor.wordSeparators": "`~!@#%^&*()=+[{]}\\|;:'\",.<>/?", // combine $ and -
        "editor.wordSeparators": "`~!@#%^&*()-=+[{]}\\|;:'\",.<>/?",
        "editor.formatOnSave": true,
        "editor.snippetSuggestions": "bottom",
        "editor.snippetSuggestions": "none",
        "files.encoding": "utf8bom",
        // "editor.formatOnSaveMode": "file",
        "editor.formatOnSaveMode": "modifications",
        "editor.formatOnSaveMode": "modificationsIfAvailable",
        "editor.formatOnPaste": false,
        "editor.formatOnType": false, // currently it's NYI in the extension
        "editor.formatOnType": true, // not implemented yet?
        "files.trimTrailingWhitespace": true,
        "editor.suggest.filterGraceful": true,
        "editor.suggest.insertMode": "insert",
        "editor.suggest.showFolders": true,
        "editor.suggest.showFields": true,
        "editor.suggest.showFiles": true,
        "editor.suggest.showInterfaces": true,
        "editor.suggest.showVariables": true,
        "editor.suggest.showProperties": true,
        "editor.rename.enablePreview": true,
        "editor.suggest.showOperators": true,
        "editor.suggest.showTypeParameters": true,
        "editor.foldingHighlight": true,
        "outline.showFields": true,
        "editor.definitionLinkOpensInPeek": false,
        "editor.smartSelect.selectLeadingAndTrailingWhitespace": true,
        "files.autoGuessEncoding": false,
        "editor.detectIndentation": false, // required for tabsize
        "editor.tabSize": 4,
        // if autoIndent is set to 'full' it breaks indentation on 'move line up/down'
        /*



        testing a bunch of props, most are set to default




        */
        /*

### Sect: other

       tags: Tag1, Tag2

*/
        "editor.inlineSuggest.enabled": false,
        // "editor.inlayHints.enabled": false, // error lens, debugger, etc
        // "editor.suggest.localityBonus": false,
        "editor.suggest.localityBonus": false, // seems worse if you enable it.
        "editor.suggest.showIcons": true,
        "editor.suggest.shareSuggestSelections": false,
        "editor.suggest.showStatusBar": true,
        "editor.suggestFontSize": 12, // was < 12 | 14 >
        "editor.codeLensFontSize": 12,
        "editor.inlayHints.fontSize": 12,
        "editor.suggestOnTriggerCharacters": true,
        "editor.suggestSelection": "recentlyUsedByPrefix",
        "editor.acceptSuggestionOnCommitCharacter": true,
        "editor.acceptSuggestionOnEnter": "smart",
        "editor.autoClosingBrackets": "languageDefined",
        "editor.autoClosingDelete": "auto",
        "editor.autoClosingOvertype": "auto",
        "editor.autoClosingQuotes": "languageDefined",
        "editor.find.autoFindInSelection": "multiline",
        "editor.suggest.showSnippets": true,
        "editor.suggest.preview": true,
        "editor.autoSurround": "languageDefined",
        "editor.colorDecorators": true,
        "editor.columnSelection": false,
        "editor.copyWithSyntaxHighlighting": true,
        // "editor.cursorSurroundingLines": 0,
        "editor.quickSuggestionsDelay": 800,
        "editor.quickSuggestionsDelay": 400,
        "editor.quickSuggestionsDelay": 800,
        "editor.suggest.snippetsPreventQuickSuggestions": false,
        "editor.wordBasedSuggestions": true,
        // "editor.wordBasedSuggestionsMode": "matchingDocuments",
        "editor.wordBasedSuggestionsMode": "matchingDocuments",
        "editor.quickSuggestions": {
            "other": true,
            "comments": false,
            "strings": true
        },
        /*

  ### Sect: Chris Dent Config

                 tags:

          */
        // "diffEditor.ignoreTrimWhitespace": true,
        "editor.trimAutoWhitespace": true,
        "editor.renderFinalNewline": false,
        "files.insertFinalNewline": true,
        "files.trimFinalNewlines": true,
        // final
        "editor.inlayHints.enabled": true,
        "editor.inlineSuggest.mode": "subwordSmart",
        // "editor.inlayHints.fontFamily": "cascadia code",
        // "editor.codeLensFontFamily": "'cascadia code'",
        // "editor.fontFamily": "'cascadia code', Consolas, 'Courier New', monospace",
        // "editor.fontFamily": "'cascadia code', Consolas, 'Courier New', monospace",
        "breadcrumbs.showVariables": false,
        // suggest
        // suggest
    }, // end of [powershell]
    "editor.suggestFontSize": 14,
    "editor.codeLensFontSize": 12,
    "editor.inlayHints.fontSize": 12,
    // "powershell.buttons.showPanelMovementButtons": true,
    // "powershell.buttons.showRunButtons": true,
    // "powershell.codeFolding.enable": true,
    // "powershell.codeFolding.showLastLine": true,
    // "powershell.developer.bundledModulesPath": "",
    // "powershell.developer.waitForSessionFileTimeoutSeconds": 240,
    // "powershell.notebooks.saveMarkdownCellsAs": "LineComment",
    // "powershell.codeFormatting.ignoreOneLineBlock": true,
    "powershell.codeFormatting.autoCorrectAliases": true,
    "powershell.codeFormatting.useConstantStrings": true,
    "powershell.codeFormatting.useCorrectCasing": true,
    "powershell.codeFormatting.whitespaceAroundPipe": true,
    "powershell.codeFormatting.whitespaceBetweenParameters": false,
    "powershell.integratedConsole.suppressStartupBanner": true,
    "powershell.notebooks.saveMarkdownCellsAs": "BlockComment",
    "powershell.notebooks.showToggleButton": true,
    // "powershell.powerShellDefaultVersion": "pwsh",
    "powershell.powerShellDefaultVersion": "PowerShell (x64)",
    "powershell.codeFormatting.alignPropertyValuePairs": true,
    "powershell.codeFormatting.newLineAfterOpenBrace": false,
    "powershell.promptToUpdatePowerShell": false,
    // Specifies the path to a PowerShell Script Analyzer settings file. To override the default settings for all projects, enter an absolute path, or enter a path relative to your workspace.
    "powershell.scriptAnalysis.settingsPath": "C:/Users/cppmo_000/skydrive/Documents/2021/dotfiles_git/powershell/PSScriptAnalyzerSettings.psd1",
    // "powershell.scriptAnalysis.settingsPath": "PSScriptAnalyzerSettings.psd1",
    "powershell.scriptAnalysis.enable": true,
    /*

  ### Sect: Chris Dent Powershell Config

             tags:

      */
    "editor.renderLineHighlight": "all",
    // "editor.renderLineHighlightOnlyWhenFocus": true,
    "workbench.commandPalette.preserveInput": true,
    "powershell.codeFormatting.addWhitespaceAroundPipe": true,
    "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
    "powershell.codeFormatting.whitespaceAfterSeparator": true,
    "powershell.codeFormatting.whitespaceAroundOperator": true,
    "powershell.codeFormatting.whitespaceBeforeOpenBrace": true,
    "powershell.codeFormatting.whitespaceBeforeOpenParen": true,
    "powershell.codeFormatting.whitespaceInsideBrace": true,
    "fileutils.typeahead.enabled": true,
    // "firefox.profile": "",
    "dotfiles.repository": "https://github.com/owner/repository.git",
    "workbench.commandPalette.history": 50,
    "workbench.editor.languageDetection": true,
    "workbench.hover.delay": 500,
    /*

  ###### SubSect: Extension: ⇢ xml "redhat.vscode-xml"

      */
    // schema for Powershell
    "xml.fileAssociations": [
        {
            "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Format.xsd",
            "pattern": "**/*.Format.ps1xml"
        },
        {
            "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Types.xsd",
            "pattern": "**/*.Types.ps1xml"
        }
    ],
    /*

  ###### SubSect: Extension: ⇢ dotnet / C#: 'csharpextensions'

      */
    "csharpextensions.privateMemberPrefix": "_",
    "csharpextensions.useThisForCtorAssignments": false,
    /*

  ###### SubSect: editorAssociations ViewType Overrides / File Type Overrides


      applies schemas to PowerShell '.Format.ps1xml' and '.Types.ps1xml'
  */
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook"
    },
    /*

  ###### SubSect: Files ⇢ Files.Associations

      */
    "files.defaultLanguage": "${activeEditorLanguage}",
    "files.trimTrailingWhitespace": true,
    "files.encoding": "utf8",
    "files.autoGuessEncoding": false,
    "files.associations": {
        // these have higher precendence than extensions
        "*.dax": "sql",
        "*.json": "jsonc",
        // powershell
        "*.ps1xml": "xml", // unsure if you have to disable this for 'xml' schema to work?
        // microsoft / vs studio
        "*.wixproj": "xml",
        "*.mproj": "xml",
        "*.odc": "html",
        // ripgrep, bat
        ".batrc": "shellscript",
        ".ripgreprc": "shellscript",
        "nuget.config": "xml",
        "*.psm1": "powershell",
    },
    /*

  ###### SubSect: Files ⇢ Files.Exclude

      */
    /* Example configs
      // [1] files by extensions
      "files.exclude": {
          "/*.lnk": true
      // [2] files with multiple extensions
      "files.exclude": {
          "/*.{ext1,ext2,ext3}": true
      },
      // [3] files with siblings by name
      "files.exclude": {
          "/*.source-extension": {
              "when": "$(basename).target-extension"
          }
      },
      // [4] folder by name (any location)
      "files.exclude": {
          "/name": true
      },
      // [5] folder by name (top level)
      "files.exclude": {
          "name": true
      },
      // [6] folders with multiple names (by level)
      "files.exclude": {
          "{folder1,folder2,folder3}": true
      },
      */
    // [7] default value
    // default value
    "files.exclude": {
        "**/*.exe": true,
        "**/*.lnk": true,
        "**/.git": true,
        "**/*.pbix": true,
        "**/*.zip": true,
        // venv, cache, or compiled
        "**/*.py[co]": true,
        "**/__pycache__": true,
        "**/node_modules": true,
        "**/.mypy_cache": true,
        "**/venv": true
        // "**/*.js": {
        //     "when": "$(basename).min.js",
        //     "exclude": false,
        //     ""
        // },
        // "**/*.js": false,
    },
    "files.watcherExclude": {
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/node_modules/*/**": true,
        "**/.hg/store/**": true
    },
    /*

  ###### SubSect: Files ⇢ Search.Exclude

      */
    "search.exclude": {
        // "**/*.mez": true,
        "**/*.lnk": true,
        "**/*.log": true
    },
    "breadcrumbs.filePath": "off",
    "breadcrumbs.filePath": "last", // theme-tag: minimalism
    "breadcrumbs.filePath": "on", // theme-tag: information
    "breadcrumbs.enabled": false, // theme-tag: minimalism,
    "breadcrumbs.enabled": true, //
    "breadcrumbs.icons": false, // theme-tag: minimalism
    "breadcrumbs.icons": true, // doesn't seem to change much, not even outline
    /*

  ### Sect: Unsorted / misc / to go through

      */
    "python.formatting.provider": "black",
    // "editor.renderControlCharacters": true,
    // "editor.fontLigatures": true,
    "workbench.editor.labelFormat": "medium",
    "vscode-json-editor.theme": "dark",
    "python.pythonPath": "C:/Users/cppmo_000/AppData/Local/Microsoft/WindowsApps/python3.9.exe",
    "python.jediEnabled": false,
    /* debug and verbose logging settings */
    // "powershell editor services.trace.server": "verbose",
    // "powershell editor services.trace.server": "diagnostic",
    /* ... */
    // "terminal.integrated.automationShell.windows": "",
    // "terminal.integrated.fontWeight": ,
    "terminal.integrated.cwd": "",
    "terminal.integrated.detectLocale": "auto",
    "terminal.integrated.env.windows": {},
    "terminal.integrated.unicodeVersion": "11",
    // "editor.autoIndent": false,
    // "editor.renderControlCharacters": true,
    // "editor.fontLigatures": true,
    "workbench.editor.labelFormat": "medium",
    /*

### Sect: Python (regular)

       tags: Python, BaseExtension

*/
    "python.formatting.provider": "black",
    "python.pythonPath": "c:/Users/cppmo_000/Documents/2020/python/one_offs/Heroes of the Storm stats/venv/Scripts/python.exe",
    "python.languageServer": "Pylance",
    "pylance.insidersChannel": "off",
    "python.autoComplete.showAdvancedMembers": true,
    "python.analysis.autoImportCompletions": true,
    "python.analysis.completeFunctionParens": true,
    /*

    ### Sect: Pylance / Python extension

           tags: Python, Pylance, Extension

    */
    "python.analysis.typeCheckingMode": "strict",
    "python.analysis.diagnosticMode": "openFilesOnly",
    "python.autoComplete.addBrackets": true,
    "python.autoComplete.extraPaths": [],
    "python.autoComplete.typeshedPaths": [],
    /* debug and verbose logging settings */
    // "powershell editor services.trace.server": "verbose",
    // "powershell editor services.trace.server": "diagnostic",
    "powerquery.trace.server": "verbose",
    /* ... */
    "editor.wordWrap": "on",
    // "terminal.integrated.automationShell.windows": "",
    // "terminal.integrated.fontWeight": ,
    // "files.trimFinalNewlines": true,
    "files.insertFinalNewline": false,
    // use 'find in selection' only if lines are selected
    "editor.find.autoFindInSelection": "multiline",
    // "editor.find.seedSearchStringFromSelection": true,
    // "debug.focusWindowOnBreak": true,
    "debug.allowBreakpointsEverywhere": true,
    "debug.console.closeOnEnd": true,
    "vscode-json-editor.theme": "dark",
    // "breadcrumbs.enabled": true, // extra row on toolbar on tabs
    // "breadcrumbs.showArrays": true,
    "search.useReplacePreview": true,
    // "explorer.sortOrder": "modified", // nice for log files
    "editor.renderLineHighlightOnlyWhenFocus": true,
    "breadcrumbs.symbolSortOrder": "type",
    "editor.wordWrapColumn": 160,
    "editor.wrappingIndent": "deepIndent",
    "editor.detectIndentation": false,
    // "diffEditor.ignoreTrimWhitespace": true,
    // "editor.suggest.maxVisibleSuggestions": 15, : this is obsolete as of 2020-11
    // "html.autoClosingTags": true,
    // "powershell.enableProfileLoading": true,
    "workbench.settings.editor": "json",
    // "workbench.settings.enableNaturalLanguageSearch": false,
    // "workbench.settings.settingsSearchTocBehavior": "filter",
    // "workbench.editor.labelFormat": "long",
    // "editor.cursorWidth": 60,
    "editor.cursorBlinking": "smooth", // "smooth",
    // "editor.cursorStyle": "block-outline",
    "editor.cursorStyle": " underline",
    /* cursor config for screenshots */
    "editor.cursorBlinking": "solid", // "smooth",
    "editor.cursorStyle": "block-outline",
    // "editor.cursorSurrounding"underline"s": 50,
    // "terminal.integrated.cursorWidth": 1,
    // "terminal.integrated.cursorWidth": 1,
    "terminal.integrated.scrollback": 2000,
    // "terminal.integrated.allowMnemonics": false, ?
    // "terminal.integrated.windowsEnableConpty": true,
    "terminal.integrated.showLinkHover": true,
    "terminal.integrated.sendKeybindingsToShell": false,
    "terminal.integrated.splitCwd": "workspaceRoot",
    "terminal.integrated.titleMode": "sequence",
    "terminal.integrated.tabs.enabled": true,
    "editor.letterSpacing": 0,
    // "editor.hideCursorInOverviewRuler": false,
    "docsView.documentationView.updateMode": "live",
    // "debug.console.historySuggestions": true,
    // makes left click instant
    "editor.cursorSmoothCaretAnimation": false,
    // "[toml]": {
    // },
    // "editor.autoClosingBrackets": "beforeWhitespace",
    /*

    /*

  ### Sect: Terminal Config

      */
    /*

  docs: <https://code.visualstudio.com/docs/editor/integrated-terminal#_windows>
      examples:
          // CMD, Win PS, GitBash, and WSL
          "terminal.integrated.shell.windows": "C:/Windows/System32/cmd.exe"
          // PowerShell
          "terminal.integrated.shell.windows": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
          // Git Bash
          "terminal.integrated.shell.windows": "C:/Program Files/Git/git-cmd.exe",
          "terminal.integrated.shellArgs.windows": [ "--command=usr/bin/bash.exe", "-l", "-i" ]
          // Bash on Ubuntu (on Windows)
          "terminal.integrated.shell.windows": "C:/Windows/System32/bash.exe"
      */
    // "terminal.integrated.cwd": "c:/data/jake",
    "terminal.integrated.commandsToSkipShell": [
        "workbench.action.files.newUntitledFile",
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.showAllSymbols"
    ],
    // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
    // "terminal.integrated.shell.windows": "C:/Program Files/Git/git-bash.exe",
    // "terminal.integrated.shell.linux": "C:/Windows/System32/cmd.exe",
    // // "terminal.integrated.shell.windows": "C:/Windows/System32/cmd.exe",
    // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
    // "terminal.external.windowsExec": "powershell",
    // "terminal.integrated.shellArgs.windows": [
    // "-nop"
    // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
    // ],
    "terminal.integrated.rendererType": "canvas",
    // 4: 12,
    // "terminal.integrated.inheritEnv": false
    // "terminal.integrated.shell.windows": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
    // "terminal.integrated.shell.windows": "C:/Windows/System32/bash.exe"
    /*

      external term
          was using: // "terminal.external.windowsExec": "C:/Program Files/PowerShell/7/pwsh.exe",

      */
    "terminal.external.windowsExec": "wt",
    // "terminal.explorerKind": "external",
    // "terminal.integrated.shell.windows": "C:/WINDOWS/System32/WindowsPowerShell/v1.0/powershell.exe",
    /*
      This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `#terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows#`. This will currently take priority over the new profiles settings but that will change in the future.
      */
    // "terminal.integrated.shell.windows": "C:/Program Files/PowerShell/7/pwsh.exe",
    // "terminal.integrated.shellArgs.windows": [
    //     "-NoLogo"
    // ],
    /*

  ### Sect: Custom Colors/Themes/Fonts/Styles/CSS

      */
    /*

  ###### SubSect: Window title templates
      see more: '//dotfiles_git/vscode/settings_global/Example Config Options ⇢ Window.Title Format Strings.json'

      */
    // output: NinMonkey.Console ⁞ settings.json ⁞ c:\foo\bar
    "window.title": "${dirty}${rootName}${separator}${activeEditorShort}|${separator}${activeFolderMedium}",
    // output: NinMonkey.Console ⁞ settings.json ⁞ bar
    "window.title": "${dirty}${rootName}${separator}${activeEditorShort}${separator}${activeFolderShort}",
    // output: settings.json <- bar
    "window.title": "${activeEditorShort}$ <- ${activeFolderShort}",
    // output: Format-FileSize.ps1 ⇽ [public]
    "window.title": "${activeEditorShort}$ ⇽ ${activeFolderShort}",
    // output: Invoke-IPython.ps1 [native_wrapper] ⁞ NinMonkey.Console (Workspace)
    "window.title": "${dirty}${activeEditorShort}$ [${activeFolderShort}]${separator}${rootName}",
    // output: NinMonkey.Console (Workspace) ⁞ Invoke-IPython.ps1 ⁞ public\native_wrapper
    "window.title": "${dirty}${rootName}${separator}${activeEditorShort}${separator}${activeFolderMedium}",
    // "window.title": "${dirty}${rootName} ┐ ${activeEditorShort}$ ⇽ ${folderName}",
    "window.titleSeparator": " ⁞ ", // or: ┐ ⇽
    "window.titleSeparator": " ┐ ",
    // "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",
    // this is a decent compromise to make both workspace and non-workspace titles short-ish and readable
    "window.title": "${dirty}${activeEditorShort} 📄 ${rootName} 📁 ${activeEditorShort}",
    // 📄📁⁞ ┐⇽
    /*

  ###### SubSect: ErrorLens. Addon

      */
    "errorLens.errorColor": "rgba(22,0,0,0.1)",
    "errorLens.errorTextColor": "rgba(242,240,240,0.1)",
    "errorLens.hintColor": "rgba(20,140,140,0.1)",
    "errorLens.fontStyle": "normal",
    "errorLens.hintTextColor": "rgba(22,240,240,0.1)",
    "errorLens.warningColor": "rgba(10,30,0,1)",
    "errorLens.warningTextColor": "rgba(23,240,240,0.1)",
    "errorLens.infoColor": "rgba(0,20,0,0.4)",
    "errorLens.infoTextColor": "rgba(2,240,240,1.0)",
    // "errorLens.excludePatterns": [],
    /*

  ###### SubSect: Workbench theme overrides

          docs: <https://code.visualstudio.com/api/references/theme-color>
      */
    "editor.rulers": [
        120
    ],
    "workbench.colorCustomizations": {
        // new built-in bracket colors
        // "editorBracketMatch.background": "#29b0c2",
        // custom for addons:
        "errorLens.errorBackground": "#e4545400",
        "errorLens.errorMessageBackground": "#e4545400",
        "errorLens.errorForeground": "#ff646400",
        "errorLens.warningBackground": "#ff942f00",
        "errorLens.warningForeground": "#fa973a00",
        "errorLens.warningMessageBackground": "#fff00000",
        // highlight 'active' window, without being too bold
        "window.activeBorder": "#a75715e3", // pretty bright
        "window.activeBorder": "#a857ff85", // pretty bright
        // "window.inactiveBorder": "#a7b67080",
        // "statusBar.border": "magenta",
        "window.inactiveBorder": "#a7b67000",
        "editorRuler.foreground": "#ff4081",
        "editorRuler.foreground": "#774958",
        // "tree.indentGuidesStroke": "#ff0000"
        // "debugView.valueChangedHighlight": "#ff0000"
        // "diffEditor.insertedTextBackground": "#ff0000",
        // "diffEditor.insertedTextBorder": "#ff0000",
        // "diffEditor.removedTextBackground": "#ff0000",
        // "diffEditor.border": "#ff0000",
        // "window.inactiveBorder": "#ff000069",
        // "editorCursor.foreground": "#ff0000"
        // "editorCursor.background": "#ff0000"
        /*
              editor find
          */
        /*
          "editor.findMatchBackground": "#ff0000",
          "editor.findMatchBorder": "#ff0000",
          "editor.findMatchHighlightBackground": "#ff0000",
          "editor.findRangeHighlightBackground": "#ff0000",
          "editor.findMatchHighlightBorder": "#ff0000",
          "editor.findRangeHighlightBorder": "#ff0000",
          "editorOverviewRuler.findMatchForeground": "#ff0000",
          "searchEditor.findMatchBackground": "#ff0000",
          "searchEditor.findMatchBorder": "#ff0000",
          "editor.snippetFinalTabstopHighlightBorder": "#ff0000",
          "editor.snippetFinalTabstopHighlightBackground": "#ff0000",
          "editorOverviewRuler.modifiedForeground": "#ff0000",
          */
        "errorLens.warningMessageBackground": "#2f323813",
        "errorLens.warningMessageBackground": "#ff880000",
        "errorLens.warningMessageBackground": "#ff942f19", // # def
        "errorLens.warningMessageBackground": "#ff88001e",
        "errorLens.warningMessageBackground": "#5f2d448c", // interesting pinkish
        "errorLens.warningMessageBackground": "#362B1F", // default ?
        "errorLens.warningMessageBackground": "#362b1f6b", // dim
        "errorLens.warningBackground": "#ff000000", // invisible BG
        "errorLens.errorForeground": "#ff0000b6",
        "errorLens.errorForeground": "#f77777ad", // peach
        "errorLens.errorForeground": "#f77777ad",
        // "errorLens.errorMessageBackground": "#c8ff02e8",
        "errorLens.errorMessageBackground": "#332424", // default:#332424
        "errorLens.errorMessageBackground": "#e4545419",
        "errorLens.errorBackground": "#362b1f6b", // default:#332424
        "errorLens.errorBackground": "#362b1f34", // dim
        "errorLens.warningForeground": "#F2962D", // orange default
        "errorLens.warningForeground": "#f2962d32", // default -> dim 2x
        "errorLens.warningForeground": "#f2962d6c", // default -> dim 1x
        // custom dim theme
        "editorBracketHighlight.foreground1": "#ffffff80", // dim gray
        "editorBracketHighlight.foreground1": "#ffd780", // # dim
        "editorBracketHighlight.foreground1": "#ffd780", // #def
        "editorBracketHighlight.foreground2": "#da70d6", //def
        "editorBracketHighlight.foreground2": "#da70d686", // dim
        "editorBracketHighlight.foreground3": "#179fff", // def
        "editorBracketHighlight.foreground3": "#179f80", // dim
        // default cycles after 3
        "editorBracketHighlight.foreground4": "#ff0065", // magenta
        "editorBracketHighlight.foreground4": "#ffffff80", // dim gray
        // "editorBracketHighlight.foreground5": "#ff0080",
        // "editorBracketHighlight.foreground5": "#ff0040",
        // "editorBracketHighlight.foreground6": "#ff0040",
        // "editorBracketHighlight.foreground6": "#ff0040",
        //sep
        // "editorBracketHighlight.unexpectedBracket.foreground": "#ff1212cc",
        "editorBracketMatch.border": "#888888",
        // work bench tests
        // "editorLineNumber.foreground": "#ff0000",
        // "editorLineNumber.foreground": "#487285", // dim: blueish foreground color
        "editorLineNumber.foreground": "#858585", // default: gray fade
        "editorLineNumber.foreground": "#858585a1", // dim
        "editorLineNumber.foreground": "#4e4e4ea1", // default: gray fade
        // "editorLineNumber.activeForeground": "#609AB2", // blueish foreground color
        // "editorLineNumber.activeForeground": "#6ad4ee",
        "editorLineNumber.activeForeground": "#c6c6c6", // def: fg
        "editorLineNumber.activeForeground": "#929292", // dim
        // new: 2021-12
        "editorWarning.foreground": "#00fff252", // main squiggle
    },
    "notebook.experimental.useMarkdownRenderer": true,
    "notebook.diff.enablePreview": true,
    "debug.inlineValues": "auto",
    "terminal.integrated.allowChords": true,
    "terminal.integrated.automationShell.windows": null,
    "terminal.integrated.allowWorkspaceConfiguration": false,
    // "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.enableFileLinks": true,
    "terminal.integrated.environmentChangesIndicator": "warnonly",
    /*
      none:       none
      minimal:    only print errors, hide green text.
      normal:     no difference?
      detailed:   Normal with green successful tests displayed
      diagnostic: most verbose, prints filters used to select tests to run

      "powershell.pester.debugOutputVerbosity": "Diagnostic",

          [none | minimal | normal | detailed | diagnostic]

      "powershell.pester.outputVerbosity":

          [Diagnostic | None | Detailed | FromPreference | Minimal | Normal]


          default value 'FromPreference', will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none

      */
    // "powershell.pester.outputVerbosity": "Minimal", //"Diagnostic",
    "powershell.pester.outputVerbosity": "Detailed", //"Diagnostic",
    "powershell.pester.outputVerbosity": "Detailed", //"Diagnostic",
    "powershell.pester.debugOutputVerbosity": "Detailed", // "Detailed", //Diagnostic",
    "terminal.integrated.environmentChangesRelaunch": true,
    // "terminal.integrated.fontWeight": "500",
    "terminal.integrated.experimentalUseTitleEvent": false, // An experimental setting that will use the terminal title event for the dropdown title. This setting will only apply to new terminals
    "terminal.integrated.cursorBlinking": false,
    // "terminal.integrated.cursorStyle": "line", # no like.
    "terminal.integrated.cursorStyle": "underline",
    "terminal.integrated.cursorStyle": "block",
    "terminal.integrated.altClickMovesCursor": true, // sometimes wonky
    "terminal.integrated.localEchoStyle": "dim", // ?
    "terminal.integrated.localEchoStyle": "underlined", // ?
    "terminal.integrated.experimentalLinkProvider": true,
    "terminal.integrated.rightClickBehavior": "copyPaste",
    "terminal.integrated.sendKseybindingsToShell": false,
    "terminal.integrated.wordSeparators": " ()[]{}',\"`─", // default changes per-language
    "terminal.integrated.tabs.focusMode": "doubleClick",
    "terminal.integrated.inheritEnv": true,
    "terminal.integrated.useWslProfiles": true,
    "terminal.integrated.tabs.hideCondition": "singleTerminal",
    "terminal.integrated.tabs.showActiveTerminal": "always",
    "terminal.integrated.tabs.showActiveTerminal": "singleTerminal",
    "terminal.integrated.tabs.showActiveTerminal": "never",
    "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
    "terminal.integrated.localEchoLatencyThreshold": 30,
    "terminal.integrated.cursorWidth": 2,
    // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
    "terminal.integrated.cwd": "",
    // Controls where newly created terminals will appear.
    //  - editor: Create terminals in the editor
    //  - view: Create terminals in the terminal view
    "terminal.integrated.defaultLocation": "view",
    // The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
    "terminal.integrated.defaultProfile.linux": null,
    // The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
    "terminal.integrated.defaultProfile.osx": null,
    // The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
    //  - PowerShell: $(terminal-powershell) PowerShell
    // - path: C:\Program Files\PowerShell\7\pwsh.exe
    //  - Command Prompt: $(terminal-cmd) Command Prompt
    // - path: C:\WINDOWS\System32\cmd.exe
    // - args: []
    //  - Git Bash: $(terminal) Git Bash
    // - path: C:\Program Files\Git\bin\bash.exe
    // - args: [--login]
    //  - PowerShellfsds: $(terminal-powershell) PowerShellfsds
    // - path: C:\Program Files\PowerShell\7\pwsh.exe
    //  - Pwsh -NoProfile: $(terminal-powershell) Pwsh -NoProfile
    // - path: pwsh.exe
    // - args: [-NoProfile','-NoLogo]
    //  - Pwsh: $(terminal-powershell) Pwsh
    // - path: pwsh.exe
    // - args: [-NoLogo]
    //  - Windows PowerShell: $(terminal) Windows PowerShell
    // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
    // - args: [-NoLogo','-NoProfile]
    // "terminal.integrated.defaultProfile.windows": "PowerShell🐒",
    "terminal.integrated.defaultProfile.windows": "Pwsh🐒",
    "terminal.integrated.localEchoExcludePrograms": [
        // default
        "vim",
        "vi",
        "nano",
        "tmux"
    ],
    "debug.terminal.clearBeforeReusing": false,
    "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
    /*

  ###### SubSect: Semantic highlighting

      */
    "csharp.semanticHighlighting.enabled": true,
    "editor.semanticHighlighting.enabled": true, // or "ConfiguredByTheme"
    "editor.semanticTokenColorCustomizations": {
        // per-theme
        "[Default Dark+]": {
            "enabled": true,
            "rules": {
                // single value
                "parameter": "#d4d4d4",
                // vs many
                "parameter": {
                    "foreground": "#ff0000",
                    "foreground": "#464545", // nintheme
                    "underline": true,
                    "bold": true,
                    "italic": true,
                    "fontStyle": "italic bold underline"
                }
            }
        },
        // "variable": "#fae",
        // "variable": "#9dccfe",
        // or global
        "enabled": true,
        "rules": {
            /*
              "parameter": "#d4d4d4",
              "variable": "#9dccfe"
              "xmlDocCommentAttributeQuotes": "#ff0000",
              "*.builtin": {
                  "foreground": "#FF0000",
                  "fontStyle": "bold"
              }
              */
        }
    },
    "oneDarkPro.bold": true,
    "pesterExplorer.autoDiscoverOnOpen": true,
    "editor.renderWhitespace": "none",
    "powershell.codeFormatting.pipelineIndentationStyle": "None",
    "redhat.telemetry.enabled": false,
    "snippets.viewer.sortSnippetsByName": true,
    "python.defaultInterpreterPath": "C:\\Users\\cppmo_000\\AppData\\Local\\Microsoft\\WindowsApps\\python3.9.exe",
    "errorLens.enabledDiagnosticLevels": [
        "error",
        "warning",
        "hint",
        "info"
    ],
    "workbench.iconTheme": "vscode-icons",
    "vsicons.associations.files": [
        // justin grote's config: <https://discord.com/channels/180528040881815552/447476910499299358/801102446209794088>
        {
            "extensions": [
                "arm.json"
            ],
            "format": "svg",
            "icon": "azure"
        },
        {
            "extensions": [
                "parameters.json"
            ],
            "format": "svg",
            "icon": "config"
        },
        {
            "extensions": [
                "tests.ps1"
            ],
            "format": "svg",
            "icon": "test"
        },
        {
            "extensions": [
                "clixml"
            ],
            "format": "svg",
            "icon": "xml"
        }
    ],
    "vsicons.associations.folders": [
        {
            "extends": "dist",
            "extensions": [
                "BuildOutput",
                "Output"
            ],
            "format": "svg",
            "icon": "dist"
        },
        {
            "extends": "helper",
            "extensions": [
                "BuildHelpers"
            ],
            "format": "svg",
            "icon": "helper"
        }
    ],
    // "editor.rulers": [
    //     120,
    // ],
    // "window.titleBarStyle": "native",
    // "window.dialogStyle": "native",
    "editor.formatOnSave": true,
    /*




      details

          https://code.visualstudio.com/docs/editor/variables-reference
      */
    "terminal.integrated.profiles.windows": {
        "Pwsh🐒": {
            "color": "terminal.ansiMagenta",
            "overrideName": true,
            "path": [
                "pwsh.exe",
                "C:/Program Files/PowerShell/7/pwsh.exe"
            ],
            "args": [
                "-NoLogo"
            ],
            "icon": "terminal-powershell"
        },
        "Command Prompt": {
            "path": [
                "${env:windir}\\Sysnative\\cmd.exe",
                "${env:windir}\\System32\\cmd.exe"
            ],
            "args": [],
            "icon": "terminal-cmd"
        },
        "Git Bash": {
            "source": "Git Bash",
            "icon": "terminal-bash"
        },
        "WinPosh? (auto?)": {
            "overrideName": true,
            "source": "PowerShell",
            "icon": "terminal-powershell"
        },
        "Pwsh -NoProfile": {
            "overrideName": true,
            "path": [
                "pwsh.exe",
                "C:/Program Files/PowerShell/7/pwsh.exe"
            ],
            "args": [
                "-NoProfile",
                "-NoLogo"
            ],
            "icon": "terminal-powershell"
        },
        "Windows PowerShell -NoP": {
            "overrideName": true,
            "icon": "arrow-both",
            "path": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "args": [
                "-NoLogo",
                "-NoProfile"
            ]
        },
        "C:\\Program Files\\PowerShell\\7\\pwsh.exe (migrated)": {
            "path": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
            "args": [
                "-NoLogo"
            ]
        }
    },
    //   "sortJSON.contextMenu": {
    //       "sortJSON": true,
    //       "sortJSONReverse": true,
    //       "sortJSONKeyLength": true,
    //       "sortJSONKeyLengthReverse": true,
    //       "sortJSONAlphaNum": true,
    //       "sortJSONAlphaNumReverse": true,
    //       "sortJSONValues": true,
    //       "sortJSONValuesReverse": true,
    //       "sortJSONType": true,
    //       "sortJSONTypeReverse": true
    //   },
    "markdown.preview.doubleClickToSwitchToEditor": true,
    "markdown.preview.markEditorSelection": true,
    "markdown.preview.scrollEditorWithPreview": true,
    "markdown.preview.linkify": true,
    "workbench.editor.enablePreview": false,
    "workbench.editor.enablePreviewFromQuickOpen": true,
    "workbench.editor.limit.enabled": false,
    "workbench.editor.limit.perEditorGroup": false,
    "workbench.editor.limit.value": 10,
    "workbench.editor.highlightModifiedTabs": true,
    "workbench.editor.mouseBackForwardToNavigate": true,
    // "workbench.editor.splitSizing": "split",
    "workbench.editor.closeOnFileDelete": false,
    "python.analysis.extraPaths": [],
    "powershell.integratedConsole.showOnStartup": false,
    /*

        ### Sect: New inline suggestions


               tags: experiment, snippet, test, suggest

    */
    /* most of these are default */
    // "editor.suggest.snippetsPreventQ12uickSuggestions": false,
    // "editor.snippetSuggestions": "inline",
    // "editor.suggest.snippetsPreventQuickSuggestions": true,
    // "editor.suggest.showSnippets": true,
    "editor.acceptSuggestionOnCommitCharacter": true,
    "editor.acceptSuggestionOnEnter": "smart",
    "editor.autoIndent": "advanced",
    "editor.suggest.showClasses": true,
    "editor.rename.enablePreview": true,
    "editor.semanticHighlighting.enabled": true,
    "editor.snippetSuggestions": "bottom",
    "editor.snippetSuggestions": "top",
    "editor.snippetSuggestions": "bottom",
    "editor.snippetSuggestions": "none",
    "editor.suggest.filterGraceful": true,
    "editor.suggest.insertMode": "insert",
    "editor.suggest.preview": true,
    "editor.suggest.preview": true,
    "editor.suggest.previewMode": true,
    "editor.suggest.showInlineDetails": true,
    "editor.suggest.showSnippets": true,
    "editor.suggest.showSnippets": true,
    "editor.suggest.snippetsPreventQuickSuggestions": true,
    "editor.tabCompletion": "off",
    "snippets.viewer.combineLanguageSnippets": false,
    // "snippets.viewer.skipLanguageSnippets": "",
    "snippets.viewer.expandSnippetFiles": true,
    "snippets.viewer.focusOnActiveEditorSnippets": true, // will merge extension and your custom snippets
    "snippets.viewer.showBuiltInExtensionSnippets": true,
    "snippets.viewer.showOnlyActiveEditorLanguageSnippets": true,
    "workbench.list.automaticKeyboardNavigation": true, // false means only show your snippets
    // "python.autoComplete.addBrackets": false,
    // "terminal.integrated.automationShell.linux": null,
    // Controls which mode to use for rendering the suggest preview.
    //  - prefix: Only render a preview if the replace text is a prefix of the insert text.
    //  - subwordDiff: Only render a preview if the replace text is a subword of the insert text.
    "editor.suggest.previewMode": "prefix",
    // When enabled IntelliSense shows `snippet`-suggestions.
    "editor.suggest.showSnippets": true,
    // Controls the visibility of the status bar at the bottom of the suggest widget.
    "editor.suggest.showStatusBar": true,
    // Controls whether an active snippet prevents quick suggestions.
    "editor.suggest.snippetsPreventQuickSuggestions": true,
    "editor.suggestOnTriggerCharacters": true,
    // Controls how suggestions are pre-selected when showing the suggest list.
    //  - first: Always select the first suggestion.
    //  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
    //  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
    "editor.suggestSelection": "recentlyUsed",
    // Enables tab completions.
    //  - on: Tab complete will insert the best matching suggestion when pressing tab.
    //  - off: Disable tab completions.
    //  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
    "editor.tabCompletion": "off",
    /*

    ### Sect: Preview/limited buffer count config

           tags: Tag1, Tag2

    */
    // Controls whether the last typed input to the command palette should be restored when opening it the next time.
    "workbench.commandPalette.preserveInput": true,
    // Controls whether opened editors show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
    "workbench.editor.enablePreview": true,
    // Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
    "workbench.editor.enablePreviewFromCodeNavigation": false,
    // Controls whether editors opened from Quick Open show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
    "workbench.editor.enablePreviewFromQuickOpen": false,
    // Controls whether tabs are closed in most recently used order or from left to right.
    "workbench.editor.focusRecentEditorAfterClose": true,
    // Controls whether a top border is drawn on modified (dirty) editor tabs or not. This value is ignored when `workbench.editor.showTabs` is disabled.
    "workbench.editor.highlightModifiedTabs": true,
    // Controls the format of the label for an editor.
    //  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
    //  - short: Show the name of the file followed by its directory name.
    //  - medium: Show the name of the file followed by its path relative to the workspace folder.
    //  - long: Show the name of the file followed by its absolute path.
    "workbench.editor.labelFormat": "default",
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    /*

    ### Sect: Insert-Unicode

           tags: Addon, Text, Unicode

    */
    // Determines whether user and workspace favorite directory trees are separated into their own folders or merged when using the insert favorite command.
    "insert-unicode.favoritesScopeBehavior": "merge",
    // The maximal number of characters identified in the 'Identify' panel. Lower this limit if you experience performance issues.
    "insert-unicode.identifyViewCharacterLimit": 100,
    // The number of milliseconds to wait before updating the 'Identify' panel after the selection has changed. Increase this delay if you experience performance issues.
    "insert-unicode.identifyViewUpdateDelay": 100,
    // Include entries made up of a sequence of Unicode code points; some Emoji are defined this way.
    "insert-unicode.include-sequences": true,
    // Include skin tone variations of Emoji in the search. This adds five entries for every Emoji that supports skin tone modifiers. (Only has an impact if sequences are enabled; See: include-sequences)
    "insert-unicode.include-skin-tone-variants": false,
    // The maximal number of items shown on one search page.
    "insert-unicode.page-size": 500,
    // The maximal number of recently used characters to show at the top of the list.
    "insert-unicode.recentlyUsedLimit": 20,
    // Relevant for the 'Identify Unicode Characters' command. If set to 'true', the results of the 'Identify Unicode Characters' command will always be displayed in a new file. When 'false', an info notification is shown which also offers the option to open the contents as file.
    "insert-unicode.show-identified-characters-in-file": false,
    // Always use a normal space character instead of higher width spaces when using the 'insertFont' command. Some of the fonts use a different space character to account for larger character widths.
    "insert-unicode.unicode-font-use-regular-space": false,
    // Disable the paged search and perform live filtering on the entire Unicode set. Can have performance issues.
    "insert-unicode.disable-pre-filtering": true,
    // Enables showing and searching Unicode character aliases.
    "insert-unicode.enableAliases": true,
    // Shows recently inserted characters at the top of the list.
    "insert-unicode.enableRecentlyUsed": true,
    // Directory tree of favorite unicode characters which can be accessed via the 'Insert from Favorites' commands.
    // Use the 'Manage Favorites' command to edit this setting.
    // (Every tree node can have a 'directories' and 'items' property. 'directories' is a dictionary where the keys are the directory names and the values are tree nodes. 'items' is an array of arrays, because some emoji are constructed from sequences of code points. Any sequence of code points can be used.
    // JSON does not support hex notation, but it can be passed wrapped in a string, e.g.: "0x1f525".)
    "insert-unicode.favorites": {
        "directories": {
            "arrows": {
                "directories": {},
                "items": [
                    [
                        11139,
                        11190,
                        767,
                        8426,
                        8598,
                        8601,
                        8624,
                        8626,
                        8624,
                        8656,
                        9194,
                        9194,
                        9198,
                        10154
                    ]
                ]
            },
            "block: Spacing": {
                "directories": {},
                "items": [
                    [
                        8
                    ],
                    [
                        8645,
                        8645,
                        8645,
                        8656,
                        8676,
                        8678,
                        8867,
                        9198,
                        9204,
                        9488,
                        9511,
                        9518,
                        9563,
                        9559,
                        9570,
                        9569,
                        9609,
                        9612,
                        9627,
                        9664,
                        9665,
                        9639
                    ]
                ]
            },
            "delims": {
                "directories": {},
                "items": [
                    [
                        8211
                    ],
                    [
                        8212
                    ],
                    [
                        8213
                    ]
                ]
            }
        },
        "items": [
            [
                2
            ],
            [
                544
            ]
        ]
    },
    // Controls if the number of opened editors should be limited or not. When enabled, less recently used editors that are not dirty will close to make space for newly opening editors.
    // "workbench.editor.limit.enabled": false,
    // Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
    // "workbench.editor.limit.perEditorGroup": false,
    // Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
    // "workbench.editor.limit.value": 10,
    // Navigate between open files using mouse buttons four and five if provided.
    // Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
    //  - normal: A pinned tab inherits the look of non pinned tabs.
    //  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
    //  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
    // "workbench.editor.pinnedTabSizing": "normal",
    /*

    ### Sect: Diff (native)

           tags: Diff, Style, <experiment>

    */
    // Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
    "git.openDiffOnClick": true,
    // Controls whether the editor shows CodeLens.
    "diffEditor.codeLens": true, // <experiment>
    // When enabled, the diff editor ignores changes in leading or trailing whitespace.
    "diffEditor.ignoreTrimWhitespace": true,
    // Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
    "diffEditor.maxComputationTime": 5000,
    // Controls whether the diff editor shows +/- indicators for added/removed changes.
    "diffEditor.renderIndicators": false,
    //
    //  - off: Lines will never wrap.
    //  - on: Lines will wrap at the viewport width.
    //  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
    "diffEditor.wordWrap": "inherit",
    /*

    ### Sect: Diff (gitlens)

           tags: Addon, Diff, Style

    */
    /*

    ### Sect: Diff (notebook)

           tags: Diff, Addon?

    */
    // Whether to use the enhanced text diff editor for notebook.
    "notebook.diff.enablePreview": true,
    // Hide Metadata Differences
    "notebook.diff.ignoreMetadata": false,
    // Hide Outputs Differences
    "notebook.diff.ignoreOutputs": false,
    /*

    ### Sect: diff (more git)

           tags: Native?, Addon?, Diff, Git

    */
    // Controls whether Git should check for unsaved files before committing.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeCommit": "always",
    // Controls whether Git should check for unsaved files before stashing changes.
    //  - always: Check for any unsaved files.
    //  - staged: Check only for unsaved staged files.
    //  - never: Disable this check.
    "git.promptToSaveFilesBeforeStash": "always",
    // Prune when fetching.
    "git.pruneOnFetch": false,
    // Fetch all tags when pulling.
    "git.pullTags": true,
    // Force git to use rebase when running the sync command.
    "git.rebaseWhenSync": false,
    // Controls whether to require explicit Git user configuration or allow Git to guess if missing.
    "git.requireGitUserConfig": true,
    // List of paths to search for git repositories in.
    "git.scanRepositories": [],
    // Controls whether to show the commit input in the Git source control panel.
    "git.showCommitInput": true,
    // Controls whether to show an inline Open File action in the Git changes view.
    "git.showInlineOpenFileAction": true,
    // Controls whether git actions should show progress.
    "git.showProgress": true,
    // Controls whether to show a notification when a push is successful.
    "git.showPushSuccessNotification": false,
    // Control which changes are automatically staged by Smart Commit.
    //  - all: Automatically stage all changes.
    //  - tracked: Automatically stage tracked changes only.
    "git.smartCommitChanges": "all",
    // Suggests to enable smart commit (commit all changes when there are no staged changes).
    "git.suggestSmartCommit": true,
    // Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
    "git.supportCancellation": false,
    // Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
    "git.terminalAuthentication": true,
    // Controls which date to use for items in the Timeline view.
    //  - committed: Use the committed date
    //  - authored: Use the authored date
    "git.timeline.date": "committed",
    // Controls whether to show the commit author in the Timeline view.
    "git.timeline.showAuthor": true,
    // Controls how untracked changes behave.
    //  - mixed: All changes, tracked and untracked, appear together and behave equally.
    //  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
    //  - hidden: Untracked changes are hidden and excluded from several actions.
    "git.untrackedChanges": "mixed",
    // Controls whether to use the message from the commit input box as the default stash message.
    "git.useCommitInputAsStashMessage": false,
    // Controls whether force pushing uses the safer force-with-lease variant.
    "git.useForcePushWithLease": true,
    // Controls whether to enable automatic GitHub authentication for git commands within VS Code.
    "github.gitAuthentication": true,
    // URI of your GitHub Enterprise Instance
    "github-enterprise.uri": "",
    // Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
    "merge-conflict.autoNavigateNextConflict.enabled": false,
    // Create a CodeLens for merge conflict blocks within editor.
    "merge-conflict.codeLens.enabled": true,
    // Create decorators for merge conflict blocks within editor.
    "merge-conflict.decorators.enabled": true,
    // Controls where the diff view should be opened when comparing changes in merge conflicts.
    //  - Current: Open the diff view in the current editor group.
    //  - Beside: Open the diff view next to the current editor group.
    //  - Below: Open the diff view below the current editor group.
    "merge-conflict.diffViewPosition": "Current",
    // Controls the positioning of the actionbar on rows in the search view.
    //  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
    //  - right: Always position the actionbar to the right.
    "search.actionsPosition": "right",
    // Controls whether the search results will be collapsed or expanded.
    //  - auto: Files with less than 10 results are expanded. Others are collapsed.
    //  - alwaysCollapse
    //  - alwaysExpand
    "search.collapseResults": "alwaysExpand",
    // Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
    "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/*.code-search": true
    },
    // Controls whether to follow symlinks while searching.
    "search.followSymlinks": true,
    // When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
    "search.maintainFileSearchCache": false,
    // Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
    // new <https://code.visualstudio.com/updates/v1_58#_search-max-results-setting>
    "search.maxResults": 20000,
    // Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the sidebar's search view, or in a search editor
    //  - view: Search in the search view, either in the panel or sidebar.
    //  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
    //  - newEditor: Search in a new search editor.
    "search.mode": "view",
    // Controls sorting order of editor history in quick open when filtering.
    //  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
    //  - recency: History entries are sorted by recency. More recently opened entries appear first.
    "search.quickOpen.history.filterSortOrder": "default",
    // Whether to include results from recently opened files in the file results for Quick Open.
    "search.quickOpen.includeHistory": true,
    // Whether to include results from a global symbol search in the file results for Quick Open.
    "search.quickOpen.includeSymbols": false,
    // The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
    "search.searchEditor.defaultNumberOfContextLines": 1,
    // Configure effect of double clicking a result in a search editor.
    //  - selectWord: Double clicking selects the word under the cursor.
    //  - goToLocation: Double clicking opens the result in the active editor group.
    //  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
    "search.searchEditor.doubleClickBehaviour": "goToLocation",
    // When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
    "search.searchEditor.reusePriorSearchConfiguration": true,
    // Search all files as you type.
    "search.searchOnType": true,
    // When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
    "search.searchOnTypeDebouncePeriod": 300,
    // Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
    "search.seedOnFocus": false,
    // Enable seeding search from the word nearest the cursor when the active editor has no selection.
    "search.seedWithNearestWord": false,
    // Controls whether to show line numbers for search results.
    "search.showLineNumbers": false,
    // Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
    "search.smartCase": false,
    // Controls sorting order of search results.
    //  - default: Results are sorted by folder and file names, in alphabetical order.
    //  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
    //  - type: Results are sorted by file extensions, in alphabetical order.
    //  - modified: Results are sorted by file last modified date, in descending order.
    //  - countDescending: Results are sorted by count per file, in descending order.
    //  - countAscending: Results are sorted by count per file, in ascending order.
    "search.sortOrder": "default",
    // Controls whether to use global `.gitignore` and `.ignore` files when searching for files.
    "search.useGlobalIgnoreFiles": false,
    // Controls whether to use `.gitignore` and `.ignore` files when searching for files.
    "search.useIgnoreFiles": true,
    "editor.mouseWheelScrollSensitivity": 1.2,
    "todo-tree.general.tags": [
        "BUG",
        "HACK",
        "FIXME",
        "TODO",
        "XXX",
        "[ ]",
        "[x]"
    ],
    "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
    // new: semantic coloring config
    // https://code.visualstudio.com/updates/v1_59#_extended-theme-customization-syntax
    // new: jupyter layout and sytels
    // https://code.visualstudio.com/updates/v1_59#_notebook-layout-improvements
    // new: automatic language detection
    "workbench.editor.untitled.experimentalLanguageDetection": true,
    // then filter specific languages to not use
    // "[markdown]": { "workbench.editor.untitled.experimentalLanguageDetection": false }
    //new: native testing: https://code.visualstudio.com/updates/v1_59#_testing-apis
    // tuts: https://code.visualstudio.com/api/extension-guides/testing
    "testExplorer.useNativeTesting": true,
    // new: default path sep:
    "explorer.copyRelativePathSeparator": "/",
    "editor.find.seedSearchStringFromSelection": "selection",
    // new: confirm on kill terminal and editor based terms
    // https://code.visualstudio.com/updates/v1_59#_child-process-tracking-and-close-warnings
    "terminal.integrated.confirmOnExit": "always",
    // "editor.FontFamily": "'cascadia code', consolas, monospace",
    // "editor.FontFamily": "'cascadia code', consolas, monospace",
    "terminal.integrated.confirmOnKill": "editor",
    // new action (for keybind)
    // "workbench.action.createTerminalEditorSide":
    /*
      this mode is a bit crazy, adds a dynamic pane
      showing your 'calculated defaults' relative the selected file on
      the right (user/workspace/folder)
      */
    "window.newWindowDimensions": "offset",
    "window.confirmBeforeClose": "keyboardOnly", // https://code.visualstudio.com/updates/v1_51#_prevent-accidental-close
    "window.restoreWindows": "preserve",
    // "workbench.settings.useSplitJSON": true,
    "workbench.settings.useSplitJSON": false,
    "workbench.settings.openDefaultSettings": true,
    "workbench.settings.openDefaultSettings": false,
    "workbench.settings.openDefaultKeybindings": true,
    "workbench.settings.openDefaultKeybindings": false,
    "editor.inlayHints.enabled": true,
    "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
    "javascript.inlayHints.enumMemberValues.enabled": true,
    // more new tests
    // Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
    "editor.glyphMargin": true,
    // Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
    "editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",
    // Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
    "editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",
    // Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
    "editor.gotoLocation.alternativeImplementationCommand": "",
    // Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
    "editor.gotoLocation.alternativeReferenceCommand": "",
    // Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
    "editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",
    // This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
    //
    "editor.gotoLocation.multiple": null,
    // Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleDeclarations": "peek",
    // Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleDefinitions": "peek",
    // Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleImplementations": "peek",
    // Controls the behavior the 'Go to References'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleReferences": "peek",
    // Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
    //  - peek: Show peek view of the results (default)
    //  - gotoAndPeek: Go to the primary result and show a peek view
    //  - goto: Go to the primary result and enable peek-less navigation to others
    "editor.gotoLocation.multipleTypeDefinitions": "peek",
    // Controls whether the cursor should be hidden in the overview ruler.
    "editor.hideCursorInOverviewRuler": false,
    // Controls whether the editor should highlight the active indent guide.
    "editor.highlightActiveIndentGuide": false,
    "editor.highlightActiveIndentGuide": true,
    // Controls the delay in milliseconds after which the hover is shown.
    "editor.hover.delay": 300,
    // Controls whether the hover is shown.
    "editor.hover.enabled": true,
    // Controls whether the hover should remain visible when mouse is moved over it.
    "editor.hover.sticky": true,
    // Enables the inlay hints in the editor.
    "editor.inlayHints.enabled": true,
    // Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
    "editor.inlayHints.fontFamily": "'cascadia code pl', verdana, 'cascadia code', monospace",
    // Controls font size of inlay hints in the editor. When set to `0`, the 90% of `editor.fontSize` is used.
    "editor.inlayHints.fontSize": 0,
    // Controls whether to automatically show inline suggestions in the editor.
    "editor.inlineSuggest.enabled": false,
    // Controls which mode to use for rendering inline suggestions.
    //  - prefix: Only render an inline suggestion if the replace text is a prefix of the insert text.
    //  - subword: Only render an inline suggestion if the replace text is a subword of the insert text.
    //  - subwordSmart: Only render an inline suggestion if the replace text is a subword of the insert text, but the subword must start after the cursor.
    "editor.inlineSuggest.mode": "subwordSmart",
    // Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
    "editor.insertSpaces": true,
    // more experiment
    // Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
    //  - ignore: Don't insert or remove any semicolons.
    //  - insert: Insert semicolons at statement ends.
    //  - remove: Remove unnecessary semicolons.
    "typescript.format.semicolons": "ignore",
    // Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
    "typescript.implementationsCodeLens.enabled": true,
    // Enable/disable inlay hints for member values in enum declarations:
    // ```typescript
    //
    // enum MyValue {
    // 	A /* = 0 */;
    // 	B /* = 1 */;
    // }
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.enumMemberValues.enabled": false,
    "typescript.inlayHints.enumMemberValues.enabled": true,
    // Enable/disable inlay hints for implicit return types on function signatures:
    // ```typescript
    //
    // function foo() /* :number */ {
    // 	return Date.now();
    // }
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.functionLikeReturnTypes.enabled": false,
    "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
    // Enable/disable inlay hints for parameter names:
    // ```typescript
    //
    // parseInt(/* str: */ '123', /* radix: */ 8)
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    //  - none: Disable parameter name hints.
    //  - literals: Enable parameter name hints only for literal arguments.
    //  - all: Enable parameter name hints for literal and non-literal arguments.
    "typescript.inlayHints.parameterNames.enabled": "all",
    // Suppress parameter name hints on arguments whose text is identical to the parameter name.
    "typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
    // Enable/disable inlay hints for implicit parameter types:
    // ```typescript
    //
    // el.addEventListener('click', e /* :MouseEvent */ => ...)
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.parameterTypes.enabled": false,
    "typescript.inlayHints.parameterTypes.enabled": true,
    // Enable/disable inlay hints for implicit types on property declarations:
    // ```typescript
    //
    // class Foo {
    // 	prop /* :number */ = Date.now;
    // }
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.propertyDeclarationTypes.enabled": false,
    "typescript.inlayHints.propertyDeclarationTypes.enabled": true,
    // Enable/disable inlay hints for implicit variable types:
    // ```typescript
    //
    // const foo /* :number */ = Date.now();
    //
    // ```
    // Requires using TypeScript 4.4+ in the workspace.
    "typescript.inlayHints.variableTypes.enabled": false,
    "typescript.inlayHints.variableTypes.enabled": true,
    // more experiment
    // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
    "typescript.locale": "",
    // Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
    "typescript.npm": "",
    // Preferred path style for auto imports.
    //  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
    //  - relative: Prefers a relative path to the imported file location.
    //  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
    //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
    "typescript.preferences.importModuleSpecifier": "shortest",
    // Preferred path ending for auto imports.
    //  - auto: Use project settings to select a default.
    //  - minimal: Shorten `./component/index.js` to `./component`.
    //  - index: Shorten `./component/index.js` to `./component/index`.
    //  - js: Do not shorten path endings; include the `.js` extension.
    "typescript.preferences.importModuleSpecifierEnding": "auto",
    // Enable/disable searching `package.json` dependencies for available auto imports.
    //  - auto: Search dependencies based on estimated performance impact.
    //  - on: Always search dependencies.
    //  - off: Never search dependencies.
    "typescript.preferences.includePackageJsonAutoImports": "auto",
    // Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
    "typescript.preferences.quoteStyle": "auto",
    // The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "typescript.preferences.renameShorthandProperties": true,
    // Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
    "typescript.preferences.useAliasesForRenames": true,
    // Enable/disable references CodeLens in TypeScript files.
    "typescript.referencesCodeLens.enabled": true,
    // Enable/disable references CodeLens on all functions in TypeScript files.
    "typescript.referencesCodeLens.showOnAllFunctions": true,
    // Report style checks as warnings.
    "typescript.reportStyleChecksAsWarnings": true,
    // Enable/disable auto import suggestions.
    "typescript.suggest.autoImports": true,
    // Complete functions with their parameter signature.
    "typescript.suggest.completeFunctionCalls": true,
    // Enable/disable suggestion to complete JSDoc comments.
    "typescript.suggest.completeJSDocs": true,
    // Enabled/disable autocomplete suggestions.
    "typescript.suggest.enabled": true,
    // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
    "typescript.suggest.includeAutomaticOptionalChainCompletions": true,
    // Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
    "typescript.suggest.includeCompletionsForImportStatements": true,
    // Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
    "typescript.suggest.includeCompletionsWithSnippetText": true,
    // Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
    "typescript.suggest.jsdoc.generateReturns": true,
    // Enable/disable suggestions for paths in import statements and require calls.
    "typescript.suggest.paths": true,
    // Enable/disable suggestion diagnostics for TypeScript files in the editor.
    "typescript.suggestionActions.enabled": true,
    // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
    "typescript.surveys.enabled": true,
    // Controls auto detection of tsc tasks.
    //  - on: Create both build and watch tasks.
    //  - off: Disable this feature.
    //  - build: Only create single run compile tasks.
    //  - watch: Only create compile and watch tasks.
    "typescript.tsc.autoDetect": "on",
    // experiment
    /*

    ### Sect: Native.testing.*

           tags: Tag1, Tag2

    */
    // Configures when the error peek view is automatically opened.
    //  - failureAnywhere: Open automatically no matter where the failure is.
    //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
    //  - never: Never automatically open.
    "testing.automaticallyOpenPeekView": "failureInVisibleDocument",
    // Controls whether to automatically open the peek view during auto-run mode.
    "testing.automaticallyOpenPeekViewDuringAutoRun": false,
    // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
    "testing.autoRun.delay": 1000,
    // Controls which tests are automatically run.
    //  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
    //  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
    "testing.autoRun.mode": "all",
    // Controls whether the running test should be followed in the test explorer view
    "testing.followRunningTest": true,
    // https://code.visualstudio.com/updates/v1_59#_child-process-tracking-and-close-warnings
    "terminal.integrated.confirmOnExit": "hasChildProcesses",
    "terminal.integrated.confirmOnKill": "editor",
    "terminal.integrated.defaultLocation": "",
    "powershell.startAutomatically": false,
    // new action (for keybind)
    "powershell.buttons.showPanelMovementButtons": true,
    // "powershell.integratedConsole.focusConsoleOnExecute": true,
    // new config: <https://code.visualstudio.com/updates/v1_60#_new-settings>
    "debug.confirmOnExit": "always",
    "debug.internalConsoleOptions": "openOnFirstSessionStart",
    "debug.console.acceptSuggestionOnEnter": "on",
    // Along with the web extension guide, the yo code extension generator now has an option to scaffold a Web Extension
    // new config: <https://code.visualstudio.com/updates/v1_60#_custom-rendering-of-box-drawing-and-block-element-characters>
    "terminal.integrated.customGlyphs": true,
    // "terminal.integrated.persistentSessionScrollback": 100,
    // f you want to avoid accidentally closing the window during a debug session, you can enable the new setting debug.confirmOnExit. With this set to always, you will be prompted to confirm that you want to stop the debug session when closing the window.
    "debug.confirmOnExit": "never",
    // new config: <https://code.visualstudio.com/updates/v1_60#_inlay-hints-for-javascript-and-typescript>
    // "typescript.inlayHints.parameterNames":
    "javascript.inlayHints.parameterNames.enabled": "literals",
    "javascript.inlayHints.parameterNames.enabled": "all",
    "javascript.inlayHints.functionLikeReturnTypes.enabled": true,
    // not new, just hadn't used
    "csharp.semanticHighlighting.enabled": true,
    /*

    ### Sect: Log levels

           tags: Tag1, Tag2

    */
    // Specifies the level of logging output from the OmniSharp server.
    "omnisharp.loggingLevel": "information",
    // Defines type of log messages language server writes into the output window.
    "python.analysis.logLevel": "Error",
    // The logging level the extension logs at, defaults to 'error'
    "python.logging.level": "error",
    // The logging level the extension logs at.
    "jupyter.logging.level": "debug",
    // Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', and 'Error'
    "powershell.developer.editorServicesLogLevel": "Diagnostic",
    // "powershell.developer.editorServicesLogLevel": "Normal",
    // Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.
    "powershell.developer.editorServicesWaitForDebugger": false,
    // When the PowerShell extension is starting up, it checks for a session file in order to connect to the language server. This setting determines how long until checking for the session file times out. (default is 240 seconds or 4 minutes)
    "powershell.developer.waitForSessionFileTimeoutSeconds": 240,
    // Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger.
    "powershell.enableProfileLoading": true,
    // Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'.
    "powershell.helpCompletion": "BlockComment",
    // Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false.
    "powershell.integratedConsole.focusConsoleOnExecute": true,
    // Use the vscode API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're use to 'Clear-Host' clearing scroll history as wellclear-terminal-via-lsp.
    "powershell.integratedConsole.forceClearScrollbackBuffer": false,
    // Shows the integrated console when the PowerShell extension is initialized.
    "powershell.integratedConsole.showOnStartup": true,
    // Do not show the Powershell Integrated Console banner on launch
    "powershell.integratedConsole.suppressStartupBanner": false,
    // Falls back to the legacy (lightweight) ReadLine experience. This will disable the use of PSReadLine in the PowerShell Integrated Console.
    "powershell.integratedConsole.useLegacyReadLine": false,
    // Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value Diagnostic will print additional information about discovery, skipped and filtered tests, mocking and more.
    "powershell.pester.debugOutputVerbosity": "Diagnostic",
    // Defines the verbosity of output to be used. For Pester 5 and newer the default value FromPreference, will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none. For Pester 4 the FromPreference and Normal options map to All, and Minimal option maps to Fails.
    "powershell.pester.outputVerbosity": "FromPreference",
    // Use code lens that is compatible with Pester 4. Disabling this will show 'Run Tests' on all It, Describe and Context blocks, and will correctly work only with Pester 5 and newer.
    // "powershell.pester.useLegacyCodeLens": true,
    // Specifies whether you should be prompted to update your version of PackageManagement if it's under 1.4.6.
    "powershell.promptToUpdatePackageManagement": false,
    // Specifies whether you should be prompted to update your version of PowerShell.
    "powershell.promptToUpdatePowerShell": false,
    // Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features are not enabled until the extension starts.
    "powershell.startAutomatically": false,
    "powershell.startAutomatically": true,
    "testExplorer.addToEditorContextMenu": true,
    "testExplorer.showOnRun": true,
    // not new, just hadn't used
    "csharp.semanticHighlighting.enabled": true,
    /*

    ### Sect: Log levels

           tags: Tag1, Tag2

    */
    // Specifies the level of logging output from the OmniSharp server.
    "omnisharp.loggingLevel": "information",
    // Defines type of log messages language server writes into the output window.
    "python.analysis.logLevel": "Error",
    // The logging level the extension logs at, defaults to 'error'
    "python.logging.level": "error",
    // The logging level the extension logs at.
    "jupyter.logging.level": "debug",
    // Sets the logging verbosity level for the PowerShell Editor Services host executable.  Valid values are 'Diagnostic', 'Verbose', 'Normal', 'Warning', and 'Error'
    "powershell.developer.editorServicesLogLevel": "Diagnostic",
    // "powershell.developer.editorServicesLogLevel": "Normal",
    // Launches the language service with the /waitForDebugger flag to force it to wait for a .NET debugger to attach before proceeding.
    "powershell.developer.editorServicesWaitForDebugger": false,
    // When the PowerShell extension is starting up, it checks for a session file in order to connect to the language server. This setting determines how long until checking for the session file times out. (default is 240 seconds or 4 minutes)
    "powershell.developer.waitForSessionFileTimeoutSeconds": 240,
    // Loads user and system-wide PowerShell profiles (profile.ps1 and Microsoft.VSCode_profile.ps1) into the PowerShell session. This affects IntelliSense and interactive script execution, but it does not affect the debugger.
    "powershell.enableProfileLoading": true,
    // Controls the comment-based help completion behavior triggered by typing '##'. Set the generated help style with 'BlockComment' or 'LineComment'. Disable the feature with 'Disabled'.
    "powershell.helpCompletion": "BlockComment",
    // Switches focus to the console when a script selection is run or a script file is debugged. This is an accessibility feature. To disable it, set to false.
    "powershell.integratedConsole.focusConsoleOnExecute": true,
    // Use the vscode API to clear the terminal since that's the only reliable way to clear the scrollback buffer. Turn this on if you're use to 'Clear-Host' clearing scroll history as wellclear-terminal-via-lsp.
    "powershell.integratedConsole.forceClearScrollbackBuffer": false,
    // Shows the integrated console when the PowerShell extension is initialized.
    "powershell.integratedConsole.showOnStartup": true,
    // Do not show the Powershell Integrated Console banner on launch
    "powershell.integratedConsole.suppressStartupBanner": false,
    // Falls back to the legacy (lightweight) ReadLine experience. This will disable the use of PSReadLine in the PowerShell Integrated Console.
    "powershell.integratedConsole.useLegacyReadLine": false,
    // Defines the verbosity of output to be used when debugging a test or a block. For Pester 5 and newer the default value Diagnostic will print additional information about discovery, skipped and filtered tests, mocking and more.
    "powershell.pester.debugOutputVerbosity": "Diagnostic",
    // Defines the verbosity of output to be used. For Pester 5 and newer the default value FromPreference, will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none. For Pester 4 the FromPreference and Normal options map to All, and Minimal option maps to Fails.
    "powershell.pester.outputVerbosity": "FromPreference",
    // Use code lens that is compatible with Pester 4. Disabling this will show 'Run Tests' on all It, Describe and Context blocks, and will correctly work only with Pester 5 and newer.
    // "powershell.pester.useLegacyCodeLens": true,
    // Specifies whether you should be prompted to update your version of PackageManagement if it's under 1.4.6.
    "powershell.promptToUpdatePackageManagement": false,
    // Specifies whether you should be prompted to update your version of PowerShell.
    "powershell.promptToUpdatePowerShell": false,
    // Starts PowerShell extension features automatically when a PowerShell file opens. If false, to start the extension, use the 'PowerShell: Restart Current Session' command. IntelliSense, code navigation, integrated console, code formatting, and other features are not enabled until the extension starts.
    "powershell.startAutomatically": false,
    "powershell.startAutomatically": true,
    "testExplorer.addToEditorContextMenu": true,
    "testExplorer.showOnRun": true,
    "editor.bracketPairColorization.enabled": true,
    // new feature debug mode in
    // "jupyter.experimental.debugging": true, <https://code.visualstudio.com/updates/v1_60#_jupyter> ve ipykernel v6+ inst
    "terminal.integrated.customGlyphs": true,
    // Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
    // "terminal.integrated.letterSpacing": 1,
    // // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
    // "terminal.integrated.lineHeight": 0.3,
    /*



  ###### Sect: font-sizes and font properties



      */
    // "editor.fontFamily": "'consolas', 'verdana', 'fira code', consolas,  'cascadia code', 'cascadia mono', verdana, 'consolas', arial, cascadia mono, Fira Code Retina, Fira Code, FIra Code Bold, Fira Code L1ht, Fira Code Retina, Consolas, 'Courier New', monospace",
    /*
          run command: 'Switch Font'
      */
    // "editor.fontFamily": "Cascadia Code Light, JetBrains Mono NL Sem1, JetBrains Mono NL, JetBrains Mono, Fira Code Retina, Fira Code, Cascadia Mono, Cascadia Code, DejaVu Sans Code, Consolas, monospace",
    // "editor.fontFamily": "Consolas, DejaVu Sans Code, JetBrains Mono NL Sem1, JetBrains Mono NL, JetBrains Mono, Fira Code Retina, Fira Code, Cascadia Mono, Cascadia Code, DejaVu Sans Code, monospace",
    // "editor.fontFamily": "Consolas, cascadia code, Fira Code Retina', 'fira code'",
    // "editor.fontFamily": "'DejaVu Sans Code', 'fira code retina',JetBrains Mono', 'Fira Code Retina', consolas,  'cascadia code', JetBrains Mono, Consolas, 'Courier New', monospace",
    // "editor.fontWeight": "bold",
    // "editor.fontFamily": "Fira Code, Fira Code Retina, Consolas, JetBrains Mono, Cascadia Mono, Cascadia Code, DejaVu Sans Code, monospace",
    // NL = no ligature, Mono = no ligature
    // "editor.fontFamily": "Cascadia Code ExtraLight, Cascadia Code Light, Cascadia Code, Cascadia Code Regular, Cascadia Code Bold, Cascadia Code SemiBold, Cascadia Code SemiLight, Cascadia Mono ExtraLight, Cascadia Mono Light, Cascadia Mono Regular, Cascadia Mono, Cascadia Mono Bold, Cascadia Mono SemiBold, Cascadia Mono SemiLight",
    "font-switcher.enableLivePreview": true,
    // "font-switcher.fontFamily": "Arial, Cascadia Code, Cascadia Code PL, Cascadia Mono, Cascadia Mono PL, Consolas, Courier New, Fira Code, Fira Code Bold, Fira Code Retina, Fira Code Retina, Fira Code, Monospace, Verdana",
    "font-switcher.fontFamily": "'Arial', 'Cascadia Code', 'Cascadia Code PL', 'Cascadia Mono', 'Cascadia Mono PL', 'Consolas', 'Courier New', 'Fira Code', 'Fira Code Bold', 'Fira Code Retina', 'Fira Code Retina', 'Fira Code', 'Monospace', 'Verdana'",
    // "font-switcher.fontFamily": "Fira Code Retina, Consolas, DejaVu Sans Mono, monospace",
    // "editor.inlayHints.fontFamily": "calibri, Consolas, corbel, 'cascadia code', Consolas, 'Courier New', monospace",
    "gitlens.views.compare.files.layout": "tree",
    // "jupyter.interactiveWindowMode": "perFile",
    // "editor.suggestLineHeight": 18, // 14, -- you'll want it ≥ 'editor.suggestFontSize'
    // "debug.console.fontFamily": "calibri",
    // "debug.console.fontFamily": "'Fira Code Bold', 'Cascadia code mono', 'Fira Code Retina', 'cascadia code', 'Fira Code Retina', Consolas",
    // "debug.console.$": "Fira Code, 'cascadia code', cascadia mono, Fira Code Retina, Consolas, Fira Code Bold",
    // Controls whether test decorations are shown in the editor gutter.
    "testing.gutterEnabled": true,
    "search.mode": "reuseEditor",
    "editor.inlayHints.fontFamily": "corbel, 'cascadia code', calibri, Consolas,  Consolas, 'Courier New', monospace",
    "editor.inlayHints.fontFamily": "'cascadia code pl semilight', verdana, 'cascadia code', monospace",
    // "editor.fontFamily": "cascadia code, calibri, 'cascadia code', Consolas, 'Courier New', monospace",
    // Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
    // Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
    "editor.suggestLineHeight": 0,
    // Controls whether suggestions should automatically show up when typing trigger characters.
    "debug.console.fontFamily": "'cascadia code pl', fira code', 'cascadia code', consolas",
    "editor.fontFamily": "'cascadia code pl semilight', 'cascadia code pl', 'cascadia code', monospace",
    "editor.fontFamily": "'cascadia code pl semilight', verdana, 'cascadia code', monospace",
    "editor.fontFamily": "'cascadia code pl', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
    "editor.fontFamily": "'cascadia code retina', 'fira code', 'Fira Code retina', 'FuraCode nerd font', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'cascadia code retina', consolas, monospace",
    "editor.fontFamily": "'cascadia code', 'fira code', 'Fira Code retina', 'FuraCode nerd font', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'cascadia code', consolas, monospace",
    "editor.fontFamily": "'cascadia code', verdana, 'cascadia code', monospace",
    "editor.fontFamily": "'fira code retina', 'cascadia code', Consolas, 'fira code', 'Courier New', monospace",
    "editor.fontFamily": "'Fira code Retina', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'fira code', Consolas, monospace",
    "editor.fontFamily": "'FiraCode Nerd font', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'firacode nerd font'", //can view nerd font icons
    "editor.fontFamily": "'FuraCode Nerd font', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'FiraCode Nerd Font', 'Fira code Retina', Consolas, 'Courier New', monospace",
    "editor.fontFamily": "'fira code retina', consolas, monospace", // retina seems bolder
    "editor.fontFamily": "'fira code', 'cascadia code', consolas, monospace", // retina seems bolder
    "editor.fontFamily": "'cascadia code pl semilight', 'cascadia code', monospace",
    "editor.fontFamily": "'cascadia code pl', 'cascadia code', monospace",
    "editor.fontFamily": "'cascadia code pl', 'cascadia code pl semilight', verdana, 'cascadia code', monospace",
    "errorLens.fontFamily": "calibri", //"arial bold",
    // "editor.fontSize": 16, // was [ 14 | 16 | 18 ]
    // "editor.fontSize": 18,
    // "editor.fontSize": 14,
    // "editor.fontWeight": "600",
    "debug.console.fontSize": 14,
    "terminal.integrated.fontFamily": "'cascadia code pl semilight', 'cascadia code pl', 'consolas', monospace",
    "terminal.integrated.fontFamily": "'cascadia code pl light', 'cascadia code pl', 'consolas', monospace",
    "terminal.integrated.fontFamily": "'cascadia code pl', 'fira code', 'cascadia mono', consolas, monospace",
    "terminal.integrated.fontFamily": "'cascadia mono pl', 'fira code', 'cascadia mono', consolas, monospace",
    "terminal.integrated.fontFamily": "'cascadia code pl', 'consolas', monospace",
    "terminal.integrated.fontFamily": "'fira code', 'fira code', 'cascadia mono', consolas, monospace",
    "terminal.integrated.fontFamily": "'fira code', 'cascadia mono', consolas, monospace",
    "terminal.integrated.fontFamily": "'cascadia code pl', 'consolas', monospace",
    "terminal.integrated.fontSize": 16,
    "errorLens.fontSize": "12px",
    // "editor.fontWeight": "350", // for cascadia code
    // fira: retina is more bold (on nin8)
    // "editor.fontFamily": "'comic sans', 'fira code', 'Fira Code retina', 'FuraCode nerd font', Consolas, 'Courier New', monospace",
    // "editor.fontWeight": "350", // for cascadia code
    // "editor.fontFamily": "'furacode nerd font'", //can view nerd font icons
    "editor.suggestFontSize": 14, // ctrl+space size
    "terminal.integrated.fontSize": 16,
    "terminal.integrated.fontSize": 14,
    "terminal.integrated.fontSize": 12,
    // "terminal.integrated.fontWeight": "350", // maybe too bold
    // "terminal.integrated.fontWeight": "100", // maybe too bold
    // "terminal.integrated.fontWeight": "normal", // maybe too bold
    // "terminal.integrated.fontWeightBold": "normal",
    "terminal.integrated.letterSpacing": 0,
    // "errorLens.fontWeight": "normal",
    "terminal.integrated.lineHeight": 1,
    "errorLens.enabled": true, // for zoom -1
    "errorLens.delay": 1300,
    "errorLens.followCursor": "closestProblem",
    "errorLens.exclude": [], //# regex
    "errorLens.excludeBySource": [], // ["eslint"]
    "errorLens.followCursorMore": 2,
    "errorLens.statusBarIconsEnabled": true,
    "yaml.schemas": {},
    // "errorLens.severityText": [
    //     "ERROR",
    //     "WARNING",
    //     "INFO",
    //     "HINT"
    // ]
    /*

    ### Sect: Testing

           tags: Tag1, Tag2

    */
    // Configures when the error peek view is automatically opened.
    //  - failureAnywhere: Open automatically no matter where the failure is.
    //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
    //  - never: Never automatically open.
    "testing.automaticallyOpenPeekView": "failureInVisibleDocument",
    // Controls whether to automatically open the peek view during auto-run mode.
    "testing.automaticallyOpenPeekViewDuringAutoRun": false,
    // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
    "testing.autoRun.delay": 300,
    // Controls which tests are automatically run.
    //  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
    //  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
    // "testing.autoRun.mode": "all",
    "testing.autoRun.mode": "rerun",
    // Controls whether the running test should be followed in the test explorer view
    "testing.followRunningTest": true,
    // Controls whether test decorations are shown in the editor gutter.
    "testing.gutterEnabled": true,
    "editor.guides.bracketPairs": true,
    "powershell.pester.codeLens": false,
    "csharp.referencesCodeLens.filteredSymbols": [
        ".*",
        "*",
        "function",
        "Commands.Reports"
    ],
    "pesterExplorer.autoDiscoverOnOpen": true, // todo:  ask kwhat the multiple toggles should be
    "diffEditor.ignoreTrimWhitespace": false,
    // "powershell.codeFormatting.autoCorrectAliases": true,
    "pester.suppressCodeLensNotice": true,
    "testExplorer.useNativeTesting": true,
    "powershell.codeFormatting.ignoreOneLineBlock": false,
    "editor.suggest.showStatusBar": true,
    "editor.bracketPairColorization.enabled": true,
    "editor.lineNumbers": "relative", // weird
    "editor.lineNumbers": "interval", // cleaner
    // "editor.lineHeight": 25, // 0-8 are multipliers, > 8 are literal px sizes
    "notebook.lineNumbers": "off",
    "zenMode.hideLineNumbers": true,
    "zenMode.centerLayout": true,
    "zenMode.fullScreen": false,
    "zenMode.hideActivityBar": true,
    "zenMode.hideStatusBar": true,
    "zenMode.hideTabs": true,
    "zenMode.restore": true,
    "zenMode.silentNotifications": true, // true shows only errors
    "testing.gutterEnabled": true,
    "testExplorer.gutterDecoration": true,
    "testing.defaultGutterClickAction": "debug",
    "docs-visual-areas.gutterIndicatorHeight": 100,
    "docs-visual-areas.gutterIndicatorOpacity": 60,
    "docs-visual-areas.gutterIndicatorOffset": 12,
    "docs-visual-areas.gutterIndicatorWidth": 4,
    "editor.semanticHighlighting.enabled": true,
    "errorLens.enabled": true,
    "errorLens.gutterIconsEnabled": true,
    "powershell.codeFormatting.preset": "OTBS",
    "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
    "powershell.codeFormatting.useConstantStrings": true,
    "powershell.codeFormatting.useCorrectCasing": true,
    "powershell.codeFormatting.whitespaceBetweenParameters": true,
    "powershell.integratedConsole.suppressStartupBanner": true,
    "powershell.pester.debugOutputVerbosity": "Detailed",
    "powershell.pester.outputVerbosity": "Detailed",
    "powershell.pester.useLegacyCodeLens": false,
    "powershell.promptToUpdatePowerShell": false,
    /*

    ### Sect: Mouse and Scrolling

           tags: scrollbar, mouse, sensitivity

    */
    "editor.scrollbar.verticalScrollbarSize": 4,
    "editor.scrollbar.vertical": "hidden",
    "editor.scrollBeyondLastLine": true,
    "output.smartScroll.enabled": true,
    "editor.fastScrollSensitivity": 5,
    "editor.mouseWheelScrollSensitivity": 1,
    "editor.scrollbar.horizontal": "auto",
    "editor.scrollbar.horizontalScrollbarSize": 8,
    "terminal.integrated.fastScrollSensitivity": 5,
    "terminal.integrated.mouseWheelScrollSensitivity": 1,
    "workbench.list.fastScrollSensitivity": 5,
    "workbench.list.mouseWheelScrollSensitivity": 1,
    "colorHelper.formatsOrder": [
        "hsl",
        "hex",
        "rgb"
    ],
    /*
     ### Sect: theme: subtler error lens

           tags: Tag1, Tag2

    */
    // "editorBracketMatch.background": "#0064001a",
    // "editorBracketMatch.background": "#00ff001a",
    // "errorLens.infoGutterIconPath": ,
    "errorLens.errorGutterIconColor": "#e45454",
    "errorLens.infoGutterIconPath": "",
    "errorLens.errorGutterIconPath": "",
    "errorLens.warningGutterIconColor": "#ff942f",
    "errorLens.warningGutterIconPath": "",
    // "errorLens.errorMessageBackground": "#e4545419",
    // "errorLens.warningMessageBackground": "#ff942f19",
    // "errorLens.infoMessageBackground": "#00b7e419",
    // "errorLens.hintMessageBackground": "#17a2a219",
    // "errorLens.errorBackground": "#7354e40a",
    // "errorLens.errorBackground": "#e4545417",
    // "errorLens.errorBackground": "#c8ff02e8",
    "errorLens.statusBarColorsEnabled": true, // not sure what this is
    // "errorLens.warningMessageBackground": "#ff880011",
    // "errorLens.warningBackground": "#e454540a",
    // "errorLens.warningBackground": "#ff880011",
    // "errorLens.warningForeground": "#e454540a",
    // "errorLens.background": "#2f323813",
    // "errorLens.infoMessageBackground": "#00b7e419",
    // "errorLens.hintMessageBackground": "#17a2a219",
    "errorLens.gutterIconSet": "default",
    "errorLens.gutterIconSet": "defaultOutline",
    "errorLens.gutterIconSet": "borderless",
    "errorLens.gutterIconSet": "circle",
    "errorLens.gutterIconsFollowCursorOverride": false, // show just selected errors or whole file?
    "errorLens.gutterIconsFollowCursorOverride": true, // show just selected errors or whole file?
    "errorLens.enabledDiagnosticLevels": [
        "error",
        "hint",
        "warning",
        "info"
    ],
    "errorLens.fontWeight": 200,
    "errorLens.delay": 2500,
    "errorLens.fontFamily": "'cascadia code pl', 'calibri'",
    // "editor.fontWeight": "300",
    // "editor.fontWeight": "400",
    // "editor.fontWeight": "300",
    // "editor.fontWeight": "200",
    // "editor.fontWeight": "100",
    "errorLens.fontSize": "15",
    "errorLens.fontSize": "80%", // was: [15, 80% ]
    "editor.overviewRulerBorder": true, // not sure what it does
    // "errorLens.borderRadius": "10px",
    "errorLens.warningGutterIconColor": "#ff942f", // def: #ff942f
    "errorLens.warningGutterIconColor": "#ff932f6e", // dim: 1x
    "errorLens.warningGutterIconColor": "#ff932f3b", // dim: 2x
    "errorLens.followCursor": "allLines",
    "errorLens.followCursor": "closestProblem",
    "errorLens.followCursorMore": 2,
    "errorLens.infoGutterIconColor": "#d46f6f",
    "errorLens.infoGutterIconColor": "#00b7e4",
    "errorLens.errorGutterIconColor": "#e45454", // #def
    "errorLens.errorGutterIconPath": "",
    "gitlens.advanced.abbreviatedShaLength": 7,
    "gitlens.heatmap.hotColor": "#f66a0a1f",
    "gitlens.heatmap.hotColor": "#f66a0acc", // 60%
    "gitlens.heatmap.hotColor": "#f66a0a",
    "gitlens.codeLens.authors.command": "gitlens.toggleFileHeatmap",
    "errorLens.gutterIconSize": "50%", // Change gutter icon size. Examples: auto, contain, cover, 50%, 150%
    // filters
    "editor.guides.highlightActiveIndentation": true,
    "errorLens.exclude": [
        "cmdlet.*uses an unapproved verb"
        // "is an alias of"
    ],
    // For which languages indent-rainbow should be activated (if empty it means all).
    //  Skip error highlighting for some or all languages. For example, you may want to turn off the indent errors for markdown and haskell (which is the default)
    // Skip error highlighting for RegEx patterns. For example, you may want to turn off the indent errors for JSDoc's valid additional space (disabled by default), or comment lines beginning with //
    // Example of regular expression in JSON (note double backslash to escape characters)
    "indentRainbow.ignoreLinePatterns": [
        "/[ \t]* [*]/g", // lines begining with <whitespace><space>*
        "/[ \t]+[/]{2}/g" // lines begininning with <whitespace>//
    ],
    "indentRainbow.ignoreErrorLanguages": [
        "json",
        "markdown",
        "haskell"
    ],
    "indentRainbow.includedLanguages": [
        "python"
    ], // for example ["nim", "nims", "python"]
    // For which languages indent-rainbow should be deactivated (if empty it means none).
    // "indentRainbow.excludedLanguages": ["powershell", "plaintext"],
    // The delay in ms until the editor gets updated.
    "indentRainbow.updateDelay": 100, // 10 makes it super fast but may cost more resources
    // Defining custom colors instead of default "Rainbow" for dark backgrounds.
    // (Sorry: Changing them needs an editor restart for now!)
    "indentRainbow.colors": [
        "rgba(255,255,64,0.07)",
        "rgba(127,255,127,0.07)",
        "rgba(255,127,255,0.07)",
        "rgba(79,236,236,0.07)"
    ],
    // The indent color if the number of spaces is not a multiple of "tabSize".
    "indentRainbow.errorColor": "rgba(128,32,32,0.6)",
    // The indent color when there is a mix between spaces and tabs.
    // To be disabled this coloring set this to an empty string.
    "indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",
    "pesterExplorer.autoDiscoverOnOpen": true, // todo:  ask kwhat the multiple toggles should be
    "diffEditor.ignoreTrimWhitespace": false,
    // "powershell.codeFormatting.autoCorrectAliases": true,
    "pester.suppressCodeLensNotice": true,
    "testExplorer.useNativeTesting": true,
    "powershell.codeFormatting.ignoreOneLineBlock": false,
    "editor.suggest.showStatusBar": true,
    /*

    ### Sect: vscode-icons

           tags: Addon, Icons

    */
    "vsicons.associations.files": [
        // justin grote's config: <https://discord.com/channels/180528040881815552/447476910499299358/801102446209794088>
        {
            "extensions": [
                "arm.json"
            ],
            "format": "svg",
            "icon": "azure"
        },
        {
            "icon": "text", // or any other icon from vscode-icons
            "extensions": [
                "ans",
                "ansi"
            ],
            "format": "svg"
        },
        {
            "extensions": [
                "parameters.json"
            ],
            "format": "svg",
            "icon": "config"
        },
        {
            "extensions": [
                "tests.ps1"
            ],
            "format": "svg",
            "icon": "test"
        },
        {
            "extensions": [
                "clixml"
            ],
            "format": "svg",
            "icon": "xml"
        }
    ],
    "vsicons.associations.folders": [
        {
            "extends": "dist",
            "extensions": [
                "BuildOutput",
                "Output"
            ],
            "format": "svg",
            "icon": "dist"
        },
        {
            "extends": "helper",
            "extensions": [
                "BuildHelpers"
            ],
            "format": "svg",
            "icon": "helper"
        }
    ],
    /*

    ### Sect: Default Workbench Colors

           tags: color, reference, theme

    from defaults/theme. some are default
    I assume because they were commented out?


        //"editorBracketHighlight.foreground1": "#ffd700",
        //"editorBracketHighlight.foreground2": "#da70d6",
        //"editorBracketHighlight.foreground3": "#179fff",
        //"editorBracketHighlight.foreground4": "#00000000",
        //"editorBracketHighlight.foreground5": "#00000000",
        //"editorBracketHighlight.foreground6": "#00000000",
        //"editorBracketHighlight.unexpectedBracket.foreground": "#ff1212cc",
        //"editorBracketMatch.background": "#0064001a",
        //"editorBracketMatch.border": "#888888",
    */
    /*
    Note: Some of these settings auto-delete when you toggle them off and on again.
    that is why I have their names copied here

        "editor.minimap.enabled": false,
        "editor.inlineSuggest.enabled": true,
        "outline.icons": false,
        "workbench.activityBar.visible": false,
    */
    "editor.minimap.enabled": false, // for clean, default this off
    "editor.minimap.enabled": true,
    "editor.minimap.size": "fill",
    "editor.minimap.size": "fit",
    "editor.inlineSuggest.enabled": true,
    "outline.icons": false,
    "outline.icons": true,
    "editor.selectionHighlight": true,
    "editor.find.autoFindInSelection": "multiline",
    "workbench.editor.showTabs": false, // cleaner
    "workbench.editor.showTabs": true,
    "powershell.startAutomatically": true,
    "testExplorer.onStart": null,
    "testExplorer.addToEditorContextMenu": true,
    //    "testing.automaticallyOpenPeekView": "never",
    "testing.automaticallyOpenPeekView": "never",
    "testing.automaticallyOpenPeekViewDuringAutoRun": false,
    "terminal.explorerKind": "integrated",
    "search.seedWithNearestWord": true,
    "python.diagnostics.sourceMapsEnabled": true,
    "bookmarks.label.suggestion": "suggestWhenSelectedOrLineWhenNoSelected",
    "bookmarks.saveBookmarksInProject": true,
    "typescript.format.insertSpaceAfterTypeAssertion": true,
    "typescript.enablePromptUseWorkspaceTsdk": true,
    "javascript.inlayHints.parameterTypes.enabled": true,
    "javascript.inlayHints.propertyDeclarationTypes.enabled": true,
    "javascript.inlayHints.variableTypes.enabled": true,
    "terminal.integrated.tabs.location": "left",
    // "debug.console.acceptSuggestionOnEnter":
    "baincd.mini-command-palettes.paletteConfigs": {
        /*
        properties :
            'matchOnDescription', 'matchOnDetail', 'placeHolder', 'title'
                https://code.visualstudio.com/api/references/vscode-api#QuickPickOptions
                are from the  'QuickPickOptions' in the VS Code API.

            'label', 'description', and 'detail'
                https://code.visualstudio.com/api/references/vscode-api#QuickPickItem
                correspond to 'QuickPickItems' in the VS Code API
                icon support: These fields can all support rendering of theme icons via the $(<name>)-syntax.

            'command' and 'commandArgs'
                https://code.visualstudio.com/api/references/vscode-api#commands.executeCommand
                correspond to arguments to the executeCommand API method.

        to hide not installed commands:
            When 'showWhen.extensionEnabled' is set
            the command will only be displayed in the mini command palette when that extension is installed and enabled.

        To configure an command that runs a specific task, use
                {
                    "command": "workbench.action.tasks.runTask",
                    "commandArgs": ["{Task Label}"]
                }

            VS Code does not support a command to start a specific launch configuration.
                https://stackoverflow.com/questions/48645098/vscode-keyboard-shortcut-for-launch-configuration/48650929#48650929

                As a workaround, use the 'command id' =  'workbench.action.debug.selectandstart'
                to display a popup to select the launch configuration to start.


        links:
            icons: https://code.visualstudio.com/api/references/icons-in-labels#icon-listing
            examples are from: <https://github.com/baincd/vscode-mini-command-palettes/blob/main/Examples.md
            optional attributes from: <https://github.com/baincd/vscode-mini-command-palettes#details>
            which uses: <https://code.visualstudio.com/api/references/vscode-api#QuickPickOptions>

            https://powershell.github.io/PowerShellEditorServices/guide/extensions.html



        */
        "main-palette": {
            "placeHolder": "main palette",
            "commands": [
                {
                    "label": "$(console) Pwsh Commands",
                    "description": "Supplied by PSEditorServices",
                    // "detail": "$(console) details",
                    "showWhen": {
                        "extensionEnabled": "ms-vscode.powershell"
                    }, // ms-vscode.powershell-preview
                    "command": "PowerShell.ShowAdditionalCommands"
                },
                {
                    "label": "$(console) Pwsh Help",
                    "description": "$(question)  open help online",
                    "showWhen": {
                        "extensionEnabled": "ms-vscode.powershell"
                    }, // ms-vscode.powershell-preview
                    "command": "PowerShell.ShowHelp"
                },
                {
                    "label": "PowerShell.InsertCommand",
                    "command": "PowerShell.InsertCommand",
                    // "description": "$(question)  open help online",
                    "showWhen": {
                        "extensionEnabled": "ms-vscode.powershell"
                    }, // ms-vscode.powershell-preview
                },
                {
                    "label": "openDeveloperTools ┐ workbench.action.webview",
                    "command": "workbench.action.webview.openDeveloperTools"
                },
                {
                    "label": "quickOpen ┐ workbench.action",
                    "command": "workbench.action.quickOpen"
                },
                {
                    "label": "quickOpenrecent ┐ workbench.action",
                    "command": "workbench.action.quickOpenrecent"
                },
                {
                    "label": "quickPickManyToggle ┐ workbench.action",
                    "command": "workbench.action.quickPickManyToggle"
                },
                {
                    "label": "quickSwitchWindow ┐ workbench.action",
                    "command": "workbench.action.quickSwitchWindow"
                },
                {
                    // "label": "ZenMode  ▸⇢⁞ ┐⇽▂      ┐ workbench.actione",
                    "label": "Zen",
                    "description": "toggle ZenMode",
                    "command": "workbench.action.toggleZenMode",
                }
            ]
        },
        "secondary-palette": {
            "placeHolder": "secondary Palette",
            "commands": [
                {
                    // "label": "ZenMode  ▸⇢⁞ ┐⇽▂      ┐ workbench.actione",
                    "label": "ZenMode  ┐ workbench.action",
                    "command": "workbench.action.toggleZenMode",
                },
                {
                    "label": "editor.action.inspectTMScopes",
                    "command": "editor.action.inspectTMScopes"
                },
                {
                    "label": "a",
                    "command": "b"
                },
                {
                    "label": "$(explorer-view-icon) Show Explorer",
                    "description": "     (Ctrl+Shift+E)",
                    "command": "workbench.view.explorer"
                },
                {
                    "label": "$(search-view-icon) Show Search",
                    "description": "     (Ctrl+Shift+F)",
                    "command": "workbench.action.findInFiles" // or workbench.view.search
                },
                {
                    "label": "$(source-control-view-icon) Show Git (Source Control)",
                    "description": "     (Ctrl+Shift+G)",
                    "command": "workbench.view.scm"
                },
                {
                    "label": "$(run-view-icon) Show Run and Debug",
                    "description": "     (Ctrl+Shift+D)",
                    "command": "workbench.view.debug"
                },
                {
                    "label": "$(extensions-view-icon) Show Extensions",
                    "description": "     (Ctrl+Shift+X)",
                    "command": "workbench.view.extensions"
                },
                {
                    "label": "$(test-view-icon) Show Testing",
                    "command": "workbench.view.extension.test"
                },
                {
                    "label": "$(references) Show References",
                    "command": "workbench.view.extension.references-view"
                },
                {
                    "label": "$(pass) Show Todos",
                    "command": "workbench.view.extension.todo-tree-container",
                    "showWhen": {
                        "extensionEnabled": "gruntfuggly.todo-tree"
                    }
                },
                {
                    "label": "$(kebab-vertical) Toggle Activity Bar",
                    "command": "workbench.action.toggleActivityBarVisibility"
                },
                {
                    "label": "$(preview) Toggle Sidebar",
                    "description": "     (Ctrl+B)",
                    "command": "workbench.action.toggleSidebarVisibility"
                },
            ],
        },
        "example-template-palette": {
            "placeHolder": "example templates",
            "commands": [
                {
                    // "label": "ZenMode  ▸⇢⁞ ┐⇽▂      ┐ workbench.actione",
                    "label": "ZenMode  ┐ workbench.action",
                    "command": "workbench.action.toggleZenMode",
                },
                {
                    "label": "editor.action.inspectTMScopes",
                    "command": "editor.action.inspectTMScopes"
                },
                {
                    "label": "a",
                    "command": "b"
                },
                {
                    "label": "$(explorer-view-icon) Show Explorer",
                    "description": "     (Ctrl+Shift+E)",
                    "command": "workbench.view.explorer"
                },
                {
                    "label": "$(search-view-icon) Show Search",
                    "description": "     (Ctrl+Shift+F)",
                    "command": "workbench.action.findInFiles" // or workbench.view.search
                },
                {
                    "label": "$(source-control-view-icon) Show Git (Source Control)",
                    "description": "     (Ctrl+Shift+G)",
                    "command": "workbench.view.scm"
                },
                {
                    "label": "$(run-view-icon) Show Run and Debug",
                    "description": "     (Ctrl+Shift+D)",
                    "command": "workbench.view.debug"
                },
                {
                    "label": "$(extensions-view-icon) Show Extensions",
                    "description": "     (Ctrl+Shift+X)",
                    "command": "workbench.view.extensions"
                },
                {
                    "label": "$(test-view-icon) Show Testing",
                    "command": "workbench.view.extension.test"
                },
                {
                    "label": "$(references) Show References",
                    "command": "workbench.view.extension.references-view"
                },
                {
                    "label": "$(pass) Show Todos",
                    "command": "workbench.view.extension.todo-tree-container",
                    "showWhen": {
                        "extensionEnabled": "gruntfuggly.todo-tree"
                    }
                },
                {
                    "label": "$(kebab-vertical) Toggle Activity Bar",
                    "command": "workbench.action.toggleActivityBarVisibility"
                },
                {
                    "label": "$(preview) Toggle Sidebar",
                    "description": "     (Ctrl+B)",
                    "command": "workbench.action.toggleSidebarVisibility"
                },
                {
                    "label": "openDeveloperTools ┐ workbench.action.webview",
                    "command": "workbench.action.webview.openDeveloperTools"
                },
                {
                    "label": "quickOpen ┐ workbench.action",
                    "command": "workbench.action.quickOpen"
                },
                {
                    "label": "quickOpenrecent ┐ workbench.action",
                    "command": "workbench.action.quickOpenrecent"
                },
                {
                    "label": "quickPickManyToggle ┐ workbench.action",
                    "command": "workbench.action.quickPickManyToggle"
                },
                {
                    "label": "quickSwitchWindow ┐ workbench.action",
                    "command": "workbench.action.quickSwitchWindow"
                },
                {
                    // "label": "ZenMode  ▸⇢⁞ ┐⇽▂      ┐ workbench.actione",
                    "label": "ZenMode  ┐ workbench.action",
                    "command": "workbench.action.toggleZenMode",
                }
            ],
        },
        "activity-bar-palette": {
            "placeHolder": "Activity Bar",
            "commands": [
                {
                    "label": "$(explorer-view-icon) Show Explorer",
                    "description": "     (Ctrl+Shift+E)",
                    "command": "workbench.view.explorer"
                },
                {
                    "label": "$(search-view-icon) Show Search",
                    "description": "     (Ctrl+Shift+F)",
                    "command": "workbench.action.findInFiles" // or workbench.view.search
                },
                {
                    "label": "$(source-control-view-icon) Show Git (Source Control)",
                    "description": "     (Ctrl+Shift+G)",
                    "command": "workbench.view.scm"
                },
                {
                    "label": "$(run-view-icon) Show Run and Debug",
                    "description": "     (Ctrl+Shift+D)",
                    "command": "workbench.view.debug"
                },
                {
                    "label": "$(extensions-view-icon) Show Extensions",
                    "description": "     (Ctrl+Shift+X)",
                    "command": "workbench.view.extensions"
                },
                {
                    "label": "$(test-view-icon) Show Testing",
                    "command": "workbench.view.extension.test"
                },
                {
                    "label": "$(references) Show References",
                    "command": "workbench.view.extension.references-view"
                },
                {
                    "label": "$(pass) Show Todos",
                    "command": "workbench.view.extension.todo-tree-container",
                    "showWhen": {
                        "extensionEnabled": "gruntfuggly.todo-tree"
                    }
                },
                {
                    "label": "$(kebab-vertical) Toggle Activity Bar",
                    "command": "workbench.action.toggleActivityBarVisibility"
                },
                {
                    "label": "$(preview) Toggle Sidebar",
                    "description": "     (Ctrl+B)",
                    "command": "workbench.action.toggleSidebarVisibility"
                },
            ]
        },
        "panel-palette": {
            "placeHolder": "Panel",
            "commands": [
                {
                    "label": "$(error) Show Problems",
                    "description": "     (Ctrl+Shift+M)",
                    "command": "workbench.actions.view.problems"
                },
                {
                    "label": "$(output-view-icon) Show Output",
                    "description": "     (Ctrl+K Ctrl+H)",
                    "command": "workbench.action.output.toggleOutput"
                },
                {
                    "label": "$(terminal-view-icon) Show Terminal",
                    "description": "     (Ctrl+`)",
                    "command": "workbench.action.quickOpenTerm" // or workbench.action.terminal.toggleTerminal
                },
                {
                    "label": "$(debug-console) Show Debug Console",
                    "description": "     (Ctrl+Shift+Y)",
                    "command": "workbench.debug.action.toggleRepl"
                },
                {
                    "label": "$(chevron-up) Toggle Panel",
                    "description": "     (Ctrl+J)",
                    "command": "workbench.action.togglePanel"
                },
            ]
        },
        "diff-palette": {
            "placeHolder": "Diff",
            "commands": [
                {
                    "label": "+  Stage Selected Changes",
                    "description": "     (Ctrl+K Ctrl+Alt+S)",
                    "command": "git.stageSelectedRanges"
                },
                {
                    "label": "⧺  Stage File",
                    "command": "git.stage"
                },
                {
                    "label": "−  Unstage Selected Changes",
                    "description": "     (Ctrl+K Ctrl+N)",
                    "command": "git.unstageSelectedRanges"
                },
                {
                    "label": "±  Open Diff (Working Copy)",
                    "command": "git.openChange"
                },
                {
                    "label": "$(go-to-file) Open File",
                    "command": "git.openFile"
                },
                {
                    "label": "$(diff) Toggle Inline / Side-By-Side",
                    "command": "toggle.diff.renderSideBySide"
                },
                {
                    "label": "␢  Toggle Show / Hide Whitespace Differences",
                    "command": "toggle.diff.ignoreTrimWhitespace"
                },
            ]
        }
    }
}