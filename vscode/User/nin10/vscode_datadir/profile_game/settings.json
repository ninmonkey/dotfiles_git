{
  "launch": {
    "configurations": [
      {
        // doesn't work in profile, but does in workspace.
        "name": "Cur.tests.ps1 🐛", // [nin.PowerShell]",
        "type": "PowerShell",
        "request": "launch",
        "script": "Invoke-Pester",
        "args": [
          "-Path",
          "${file}",
          // "-Path '${file}'",
          "-Output",
          "Detailed"
        ],
        "cwd": "${file}",
        "presentation": {
          "hidden": false,
          "group": "",
          "order": 2
        }
      },
      /*

      ### Sect: Build in-Dotnet launchers

             tags: dotnet, defaults, launch.json

      */

      // attach to -> remote dotnet core console
      // Attach a debugger to a .NET Core Console App on a remote machine.
      // launch -> [🐛debugger] dotnet core console app
      // launch -> [🌍Browser] + [🐛debugger] dotnet core console app
      // Attach a debugger to a .NET Core Console App.
      //   // attach to -> local dotnet core console

      // Attach a debugger to a .NET Core Console App.
      // [1] Attach -> [🐛debugger] to [🏠Local] dotnet core [Console💻] app
      {
        "name": "[1] .NET Core Attach ▂ 🐛+💻▂",
        "type": "coreclr",
        "request": "attach"
      },

      // [2] Attach -> [🐛debugger] to [Remote🖧] dotnet core [Console💻] app
      // [2] 👫Attach -> [🐛debugger] to a .NET Core [Console💻] App on a [remote🖧] machine.
      {
        "name": "[2] .NET Core Attach ▂ 🐛+💻 ▂ is [1] + (🖧Remote)▂",
        "type": "coreclr",
        "request": "attach",
        "pipeTransport": {
          "pipeCwd": "${workspaceFolder}",
          "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
          "pipeArgs": [],
          "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
        }
      },
      // Launch a .NET Core Console App with a debugger.
      // [3] Launch -> [🐛debugger] to dotnet core [Console💻] app

      {
        "name": "[3] .NET Core 🏃‍♀️Launch ▂ 🐛+💻▂",
        "type": "coreclr",
        "request": "launch",
        "preLaunchTask": "build",
        "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
        "args": [],
        "cwd": "${workspaceFolder}",
        "stopAtEntry": false,
        "console": "internalConsole"
      },
      // [4] launch -> [🌍Browser] + [🐛debugger] a .NET Core [🌍Web] App
      // Launch a .NET Core Web App with both a browser and a debugger.

      {
        "name": "[4] .NET Core 🏃‍♀️Launch ▂ 🐛+[🌍Browser]▂(🌍Web)▂",
        "type": "coreclr",
        "request": "launch",
        "preLaunchTask": "build",
        "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
        "args": [],
        "cwd": "${workspaceFolder}",
        "stopAtEntry": false,
        "serverReadyAction": {
          "action": "openExternally",
          "pattern": "\\bNow listening on:\\s+(https?://\\S+)"
        },
        "env": {
          "ASPNETCORE_ENVIRONMENT": "Development"
        },
        "sourceFileMap": {
          "/Views": "${workspaceFolder}/Views"
        }
      },

      // [5] Launch -> .NET Core [Console💻] App on a [Remote🖧] machine.
      // Launch a .NET Core Console App on a remote machine.

      {
        "name": "[5] .NET Core 🏃‍♀️Launch (💻console) ▂on (🖧Remote)▂",
        "type": "coreclr",
        "request": "launch",
        "preLaunchTask": "build",
        "program": "${workspaceFolder}/bin/Debug/<target-framework>/<project-name.dll>",
        "args": [],
        "cwd": "${workspaceFolder}",
        "stopAtEntry": false,
        "console": "internalConsole",
        "pipeTransport": {
          "pipeCwd": "${workspaceFolder}",
          "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
          "pipeArgs": [],
          "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
        }
      },

      /*

      ### Sect: From JustinGrote

      tags: dotnet, launch.json, justinGrote

      */
      // [1] JustinGrote:
      {
        "name": "[1] JG Pwsh: Interactive Pwsh (💻Console)",
        "presentation": {
          "group": "Powershell"
        },
        "request": "launch",
        "type": "PowerShell"
      },
      // [2] JustinGrote:
      {
        "cwd": "${file}",
        "name": "[2] JG Pwsh: Run",
        "presentation": {
          "group": "Powershell"
        },
        "request": "launch",
        "script": "${file}",
        "type": "PowerShell"
      },
      // [3] JustinGrote:
      {
        "args": ["${command:SpecifyScriptArgs}"],
        "cwd": "${file}",
        "name": "[3] JG Pwsh: Run w/ Args",
        "presentation": {
          "group": "Powershell"
        },
        "request": "launch",
        "script": "${file}",
        "type": "PowerShell"
      },
      // [4] JustinGrote:
      {
        "args": ["${command:SpecifyScriptArgs}"],
        "name": "[4] JG Pwsh: Pester",
        "presentation": {
          "group": "Powershell"
        },
        "request": "launch",
        "script": "Invoke-Pester",
        "type": "PowerShell"
      },
      // [5] JustinGrote:
      {
        "name": "[5] JG Pwsh: Attach",
        "presentation": {
          "group": "Powershell"
        },
        "processId": "${command:PickPSHostProcess}",
        "request": "attach",
        "runspaceId": 1,
        "type": "PowerShell"
      },

      /*

      ### Sect: Personal Launchers

      tags: dotnet, launch.json

      */
      {
        "name": "Main.ps1 🏃‍♂️",
        "type": "PowerShell",
        "request": "launch",
        "script": "${workspaceFolder}/main.ps1",
        "cwd": "${workspaceFolder}",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        }
      },
      {
        "name": "Cur.ps1 🏃‍♂️",
        "type": "PowerShell",
        "request": "launch",
        "script": "${file}",
        "presentation": {
          "hidden": false,
          "group": "",
          "order": 1
        },
        "cwd": "${workspaceFolder}"
      },
      {
        // doesn't work in profile, but does in workspace.
        "name": "Cur.tests.ps1 🐛 (not working profile)", // [nin.PowerShell]",
        "type": "PowerShell",
        "request": "launch",
        "script": "Invoke-Pester",
        "args": [
          "-Path",
          "${file}",
          // "-Path '${file}'",
          "-Output",
          "Detailed"
        ],
        "cwd": "${file}",
        "presentation": {
          "hidden": false,
          "group": "",
          "order": 2
        }
      },
      {
        "presentation": {
          "hidden": false,
          "group": "VisualTest"
          // "order": 1
        },
        "name": "🐛🎨 cur: Invoke-GithubInfo visualTest ",
        "type": "PowerShell",
        "request": "launch",
        "script": "${workspaceFolder}/test/public/visual_test/Invoke-GithubInfo.visual_test.ps1",
        // "cwd": "${file}"
        "cwd": "${workspaceFolder}"
      },
      {
        "name": "[🐛] run a specific *.tests.ps1",
        "type": "PowerShell",
        "request": "launch",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "script": "Invoke-pester",
        "args": ["-Path 'public\\ConvertFrom-LiteralPath.tests.ps1'"],
        "cwd": "${workspaceFolder}"
      },
      // {
      //     "name": "PowerShell: Launch Script",
      //     "type": "PowerShell",
      //     "request": "launch",
      //     "script": "enter path or command to execute e.g.: ${workspaceFolder}/src/foo.ps1 or Invoke-Pester",
      //     "cwd": "${workspaceFolder}"
      // },
      {
        "name": "cur.ps1",
        "type": "PowerShell",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "request": "launch",
        "script": "${file}",
        "cwd": "${file}"
      },
      {
        "name": "cur 🐜 (temp_cur_test.ps1)",
        "type": "PowerShell",
        "request": "launch",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "script": "${workspaceFolder}/private/temp_cur_test.ps1",
        "cwd": "${workspaceFolder}"
      },

      {
        "presentation": {
          "hidden": false,
          "group": "VisualTest"
          // "order": 1
        },
        "name": "🐛🎨 cur: Format-Dict visualTest ",
        "type": "PowerShell",
        "request": "launch",

        "script": "${workspaceFolder}/test/public/visual_test/Format-Dict.visual_test.ps1",
        // "cwd": "${file}"
        "cwd": "${workspaceFolder}"
      },
      {
        "presentation": {
          "hidden": false,
          "group": "VisualTest"
          // "order": 1
        },
        "name": "🐛🎨 cur: visualTest ",
        "type": "PowerShell",
        "request": "launch",
        "script": "${workspaceFolder}/test/public/visual_test/_format_RgbColorStringy.visual_tests.ps1",
        // "cwd": "${file}"
        "cwd": "${workspaceFolder}"
      },
      {
        "name": "cur: Module Test🐛",
        "type": "PowerShell",
        "request": "launch",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "script": "${workspaceFolder}/test/private/_import_error_test.ps1",
        // "cwd": "${file}"
        "cwd": "${workspaceFolder}"
      },
      {
        "name": "🐛 : [Details] — ", // [nin.PowerShell]",
        "type": "PowerShell",
        "request": "launch",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "script": "Invoke-Pester",
        "args": ["-Output", "Detailed"],
        "cwd": "${workspaceFolder}"
      },
      {
        "name": "🐛 : | default | — ", // [nin.PowerShell]",
        "type": "PowerShell",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "request": "launch",
        "script": "Invoke-Pester",
        // "args": [],
        "cwd": "${workspaceFolder}"
      },
      {
        "name": "🐛 | 🏃 | #WIP |",
        "type": "PowerShell",
        "request": "launch",
        "script": "Invoke-Pester",
        "cwd": "${workspaceFolder}",
        "presentation": {
          "hidden": true,
          "group": "",
          "order": 1
        },
        "args": [
          "-Output",
          "Detailed",
          "-TagFilter",
          // "wiph"
          "wip-hash"
        ]
      }

      /*

        end of : Settings -> launch -> configurations -> [..]

      */
    ],

    "compounds": [
      // {
      //   "name": "Compound",
      //   "configurations": [],
      //   "preLaunchTask": "",
      //   "presentation": {
      //     "hidden": false,
      //     "group": "",
      //     "order": 1
      //   },
      //   "stopAll": false
      // }
    ]
  },
  "yaml.schemas": {},
  /*
    profile: j:/vscode_datadir/games/users/settings.json
    brand new
    created from scratch: 2021-11-02


see also: full profile: <C:\Users\cppmo_000\SkyDrive\Documents\2021\dotfiles_git\vscode\User\nin10\Code - Insiders\DefaultSettings.settings.json>
    */
  "debug.inlineValues": true,
  "editor.suggest.filterGraceful": true,
  "editor.fontSize": 15,
  "editor.fontSize": 16,
  "editor.fontSize": 14,
  "editor.fontFamily": "'cascadia code pl', Consolas, 'Courier New', monospace",
  "editor.fontFamily": "'cascadia code', 'cascadia code pl', Consolas, 'Courier New', monospace",
  "editor.fontFamily": "'cascadia code pl', Consolas, 'Courier New', monospace",
  "editor.fontFamily": "'cascadia code pl'",
  // when super tiny: at least right now for the editor, 'cascadia code' *is* better looking than 'cascadia code pl'
  // when zoom: 0 : 'pl' is nicer
  "terminal.integrated.fontFamily": "'consolas', 'cascadia code mono', Consolas,  monospace",
  "terminal.integrated.fontFamily": "'cascadia code', 'cascadia code mono', Consolas,  monospace",

  "terminal.integrated.fontSize": 18,
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.fontSize": 14,
  "markdownlint.customRules": [
    "{docsmsft.docs-linting}/markdownlint-custom-rules/rules.js"
  ],
  "editor.bracketPairColorization.enabled": true,
  "editor.lineNumbers": "relative", // weird
  "editor.lineNumbers": "interval", // cleaner
  // "editor.lineHeight": 25, // 0-8 are multipliers, > 8 are literal px sizes
  "notebook.lineNumbers": "off",
  "zenMode.hideLineNumbers": true,
  "zenMode.centerLayout": true,
  "zenMode.fullScreen": false,
  "zenMode.hideActivityBar": true,
  "zenMode.hideStatusBar": true,
  "zenMode.hideTabs": true,
  "zenMode.restore": true,
  "zenMode.silentNotifications": true, // true shows only errors

  "testing.gutterEnabled": true,
  "testExplorer.gutterDecoration": true,
  "testing.defaultGutterClickAction": "run", // default
  "testing.defaultGutterClickAction": "debug",
  "testing.defaultGutterClickAction": "contextMenu",
  "docs-visual-areas.gutterIndicatorHeight": 100,
  "docs-visual-areas.gutterIndicatorOpacity": 60,
  "docs-visual-areas.gutterIndicatorOffset": 12,
  "docs-visual-areas.gutterIndicatorWidth": 4,
  "editor.semanticHighlighting.enabled": true,
  "errorLens.enabled": true,
  "errorLens.gutterIconsEnabled": true,
  "powershell.codeFormatting.preset": "OTBS",
  "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
  "powershell.codeFormatting.useConstantStrings": true,
  "powershell.codeFormatting.useCorrectCasing": true,
  "powershell.codeFormatting.whitespaceBetweenParameters": true,
  "powershell.integratedConsole.suppressStartupBanner": true,
  "powershell.pester.debugOutputVerbosity": "Detailed",
  "powershell.pester.outputVerbosity": "Detailed",
  "powershell.pester.useLegacyCodeLens": false,
  // "pester.autoRunOnSave": true,
  "powershell.promptToUpdatePowerShell": false,
  "window.titleSeparator": " ┐ ",
  // "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

  // this is a decent compromise to make both workspace and non-workspace titles short-ish and readable
  "window.title": "${dirty}${activeEditorShort} 📄 ${rootName} 📁 ${activeEditorShort}",
  // 📄📁⁞ ┐⇽

  /*

    ### Sect: Screencasting

           tags: Screencasting

    */

  "screencastMode.fontSize": 20,
  "screencastMode.onlyKeyboardShortcuts": true,
  "screencastMode.verticalOffset": 40,
  "screencastMode.keyboardOverlayTimeout": 600,
  "screencastMode.mouseIndicatorSize": 60,
  "screencastMode.mouseIndicatorColor": "#ff8800a4",

  /*

    ### Sect: Mouse and Scrolling

           tags: scrollbar, mouse, sensitivity

    */
  "editor.scrollbar.verticalScrollbarSize": 4,
  "editor.scrollbar.vertical": "hidden",
  "editor.scrollBeyondLastLine": true,
  "output.smartScroll.enabled": true,
  "editor.fastScrollSensitivity": 5,
  "editor.mouseWheelScrollSensitivity": 1,
  "editor.scrollbar.horizontal": "auto",
  "editor.scrollbar.horizontalScrollbarSize": 8,
  "terminal.integrated.fastScrollSensitivity": 5,
  "terminal.integrated.mouseWheelScrollSensitivity": 1,
  "workbench.list.fastScrollSensitivity": 5,
  "workbench.list.mouseWheelScrollSensitivity": 1,

  "colorHelper.formatsOrder": ["hsl", "hex", "rgb"],
  "workbench.commandPalette.history": 50,
  "workbench.commandPalette.preserveInput": true,

  /*

    ### Sect: Default Workbench Colors

           tags: color, reference, theme

    from defaults/theme. some are default
    I assume because they were commented out?


        //"editorBracketHighlight.foreground1": "#ffd700",
        //"editorBracketHighlight.foreground2": "#da70d6",
        //"editorBracketHighlight.foreground3": "#179fff",
        //"editorBracketHighlight.foreground4": "#00000000",
        //"editorBracketHighlight.foreground5": "#00000000",
        //"editorBracketHighlight.foreground6": "#00000000",
        //"editorBracketHighlight.unexpectedBracket.foreground": "#ff1212cc",
        //"editorBracketMatch.background": "#0064001a",
        //"editorBracketMatch.border": "#888888",
    */

  /*
    Note: Some of these settings auto-delete when you toggle them off and on again.
    that is why I have their names copied here

        "editor.minimap.enabled": false,
        "editor.inlineSuggest.enabled": true,
        "outline.icons": false,
        "workbench.activityBar.visible": false,
    */
  "editor.wrappingStrategy": "simple",
  "editor.wordWrap": "bounded",

  "editor.minimap.enabled": false, // for clean, default this off
  "editor.minimap.enabled": true,
  "editor.minimap.size": "fill",
  "editor.minimap.size": "fit",
  "editor.minimap.showSlider": "mouseover",
  "editor.inlineSuggest.enabled": true,
  "editor.minimap.renderCharacters": true,
  //   "editor.minimap.scale": 3,
  "editor.minimap.maxColumn": 120,
  "outline.icons": false,
  "outline.icons": true,
  "editor.selectionHighlight": true,
  "editor.find.autoFindInSelection": "multiline",
  "workbench.editor.showTabs": false, // cleaner
  "workbench.editor.showTabs": true,

  "powershell.startAutomatically": true,
  "testExplorer.onStart": null,
  "testExplorer.addToEditorContextMenu": true,
  //    "testing.automaticallyOpenPeekView": "never",
  "testing.automaticallyOpenPeekView": "never",
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,
  "terminal.explorerKind": "integrated",
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.defaultLocation": "editor",
  "search.seedWithNearestWord": true,

  /*

    ### Sect: Workbench Color Overrides

          tags: color, theme
          refs:
              intro: https://code.visualstudio.com/docs/getstarted/themes#_customizing-a-color-theme
              customizing semanticTokenColorCustomizations: https://code.visualstudio.com/docs/getstarted/themes#_editor-semantic-highlighting

    */
  "notebook.editorOptionsCustomizations": {},
  "workbench.colorCustomizations": {
    // "editorError.background": "#1cf0864f",
    "errorLens.warningMessageBackground": "#2f323813",
    "errorLens.warningMessageBackground": "#ff880000",
    "errorLens.warningMessageBackground": "#ff942f19", // # def
    "errorLens.warningMessageBackground": "#ff88001e",
    "errorLens.warningMessageBackground": "#5f2d448c", // interesting pinkish
    "errorLens.warningMessageBackground": "#362B1F", // default ?
    "errorLens.warningMessageBackground": "#362b1f6b", // dim
    "errorLens.warningBackground": "#ff000000", // invisible BG
    "errorLens.errorForeground": "#ff0000b6",
    "errorLens.errorForeground": "#f77777ad", // peach
    "errorLens.errorForeground": "#f77777ad",
    // "errorLens.statusBarErrorForeground": "#00f853",
    // "errorLens.statusBarIconErrorForeground": "#00f853", //has do do with selected/found lines
    // "errorLens.hintBackground": "#25cf50", //has do do with selected/found lines

    // "errorLens.errorMessageBackground": "#c8ff02e8",
    "errorLens.errorMessageBackground": "#332424", // default:#332424
    "errorLens.errorMessageBackground": "#e4545419",
    "errorLens.errorBackground": "#362b1f6b", // default:#332424
    "errorLens.errorBackground": "#362b1f34", // dim
    "errorLens.warningForeground": "#F2962D", // orange default
    "errorLens.warningForeground": "#f2962d32", // default -> dim 2x + brown
    // "errorLens.warningForeground": "#ff0cb66c", // default -> dim 1x + purp
    "errorLens.infoForeground": "#ea00ff", // this is where?
    // "errorLens.hintForeground": "#ff16d8", // hint, like 'setting not recognized'
    // "fo.barl":3,
    // "minimap"
    /*
    ref colors from the CSS
    --vscode-minimap-findMatchHighlight: #d18616;
    --vscode-minimap-selectionOccurrenceHighlight: #676767;
    --vscode-minimap-selectionHighlight: #264f78;
    --vscode-minimap-errorHighlight: rgba(255, 18, 18, 0.7);
    --vscode-minimap-warningHighlight: #cca700;
    --vscode-minimap-background: #ff0000;
    --vscode-minimap-foregroundOpacity: #000000;
    --vscode-minimap-unicodeHighlight: #d18616;
--vscode-minimapSlider-background: rgba(121, 121, 121, 0.2);
--vscode-minimapSlider-hoverBackground: rgba(100, 100, 100, 0.35);
--vscode-minimapSlider-activeBackground: rgba(191, 191, 191, 0.2);
--vscode-minimapGutter-modifiedBackground: #0c7d9d;
--vscode-minimapGutter-addedBackground: #587c0c;
--vscode-minimapGutter-deletedBackground: #94151b;
*/
//"minimap.errorHighlight": "#ff1212b3",

// "minimap.background": "#ff0000",
"minimap.findMatchHighlight": "#1ef029", // def: #d18616
"minimap.warningHighlight": "#ee6f8a6b",
"minimap.foregroundOpacity": "#ff000081", // this only uses the opacity byte
"minimap.selectionHighlight": "#264f78",  //  def: 264f78
"minimap.selectionOccurrenceHighlight": "#feef2e", // def: "#676767", waldo
"minimap.unicodeHighlight": "#d18616",

"minimapGutter.addedBackground": "#587c0c",
"minimapGutter.deletedBackground": "#94151b",
"minimapGutter.modifiedBackground": "#0c7d9d",
"minimapSlider.activeBackground": "#bfbfbf33",
"minimapSlider.background": "#79797933",
"minimapSlider.hoverBackground": "#64646459",

    		//"menu.selectionBackground": "#094771",
		//"menu.selectionForeground": "#ffffff",
		//"menu.separatorBackground": "#bbbbbb",
		//"menubar.selectionBackground": "#ffffff1a",
		//"menubar.selectionForeground": "#cccccc",
		//"merge.commonContentBackground": "#60606029",
		//"merge.commonHeaderBackground": "#60606066",
		//"merge.currentContentBackground": "#40c8ae33",
		//"merge.currentHeaderBackground": "#40c8ae80",
		//"merge.incomingContentBackground": "#40a6ff33",
		//"merge.incomingHeaderBackground": "#40a6ff80",
		//"notebook.cellBorderColor": "#37373d",
		//"notebook.cellEditorBackground": "#252526",
		//"notebook.cellInsertionIndicator": "#007fd4",
		//"notebook.cellStatusBarItemHoverBackground": "#ffffff26",
		//"notebook.cellToolbarSeparator": "#80808059",
		//"notebook.focusedCellBorder": "#007fd4",
		//"notebook.focusedEditorBorder": "#007fd4",
		//"notebook.inactiveFocusedCellBorder": "#37373d",
		//"notebook.selectedCellBackground": "#37373d",
		//"notebook.selectedCellBorder": "#37373d",
		//"notebook.symbolHighlightBackground": "#ffffff0b",
		//"notebookScrollbarSlider.activeBackground": "#bfbfbf66",
		//"notebookScrollbarSlider.background": "#79797966",
		//"notebookScrollbarSlider.hoverBackground": "#646464b3",
		//"notebookStatusErrorIcon.foreground": "#f48771",
		//"notebookStatusRunningIcon.foreground": "#cccccc",
		//"notebookStatusSuccessIcon.foreground": "#89d185",
		//"notificationCenterHeader.background": "#303031",
		//"notificationLink.foreground": "#3794ff",
		//"notifications.background": "#252526",
		//"notifications.border": "#303031",
		//"notifications.foreground": "#cccccc",
		//"notificationsErrorIcon.foreground": "#f14c4c",
		//"notificationsInfoIcon.foreground": "#3794ff",
		//"notificationsWarningIcon.foreground": "#cca700",

    // custom dim theme

    // "editorBracketHighlight.foreground1": "#ffffff80", // dim gray
    // "editorBracketHighlight.foreground1": "#ffd780", // # dim
    // "editorBracketHighlight.foreground1": "#ffd780", // #def
    // "editorBracketHighlight.foreground2": "#", //def
    // "editorBracketHighlight.foreground2": "#da70d686", // dim of default = #da70d6
    // "editorBracketHighlight.foreground3": "#179f80", // dim of default = #179fff
    // // default cycles after 3
    // "editorBracketHighlight.foreground4": "#ff0065", // magenta
    // "editorBracketHighlight.foreground4": "#ffffff80", // dim gray
    // "editorBracketHighlight.foreground5": "#ff0080",
    // "editorBracketHighlight.foreground5": "#ff0040",
    // "editorBracketHighlight.foreground6": "#ff0040",
    // "editorBracketHighlight.foreground6": "#ff0040",
    //sep

    // "editorBracketHighlight.unexpectedBracket.foreground": "#ff1212cc",

    "editorBracketMatch.border": "#888888",
    // work bench tests

    // "editorLineNumber.foreground": "#ff0000",
    // "editorLineNumber.foreground": "#487285", // dim: blueish foreground color
    "editorLineNumber.foreground": "#858585", // default: gray fade
    "editorLineNumber.foreground": "#858585a1", // dim
    "editorLineNumber.foreground": "#4e4e4ea1", // default: gray fade
    // "editorLineNumber.activeForeground": "#609AB2", // blueish foreground color
    // "editorLineNumber.activeForeground": "#6ad4ee",
    "editorLineNumber.activeForeground": "#c6c6c6", // def: fg
    "editorLineNumber.activeForeground": "#929292", // dim

    /*

    ### Sect: JustinGrote's pester theme

           tags: theme, pester, testing

          from: <https://discord.com/channels/180528040881815552/446531919644065804/911758649897127976>

    */

    "errorLens.errorBackground": "#e4545410",
    "errorLens.errorForeground": "#ff646440",
    "errorLens.errorMessageBackground": "#e4545405",
    "errorLens.warningBackground": "#ff942f10",
    "errorLens.warningForeground": "#fa973a70",

    // "testing.message.error.lineBackground": "#e4545405",
    "errorLens.warningMessageBackground": "#fff00005",
    "tab.lastPinnedBorder": "#2472c8",
    "terminal.ansiBlack": "#000000",
    "terminal.ansiBlue": "#2472c8",
    "terminal.ansiBrightBlack": "#666666",
    "terminal.ansiBrightBlue": "#569cd6",
    "terminal.ansiBrightCyan": "#9cdcfe",
    "terminal.ansiBrightGreen": "#b5cea8",
    "terminal.ansiBrightMagenta": "#daadd6",
    "terminal.ansiBrightMagenta": "#d38bcd", // his was '#daadd6'
    "terminal.ansiBrightRed": "#f14c4c",
    "terminal.ansiBrightWhite": "#e5e5e5",
    "terminal.ansiBrightYellow": "#DCDCAA", // his was
    "terminal.ansiBrightYellow": "#ecec6a", // nin
    "terminal.ansiCyan": "#11a8cd",
    "terminal.ansiGreen": "#6a9955",
    "terminal.ansiMagenta": "#C586C0",
    "terminal.ansiRed": "#cd3131",
    "terminal.ansiWhite": "#e5e5e5",
    "terminal.ansiYellow": "#CE9178",
    "terminal.background": "#1E1E1E",
    "terminal.foreground": "#D4D4D4",
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.lineHighlightBorder": "#9fced11f",

    /*

      ### Sect: end of JustinGrote theme

      */

    /*

    ### Sect: My overrides of JustinGrote

    */
    // brackets
    // these are the default theme, dimmed to not have super high contrast

    // "editorBracketHighlight.foreground1": "#569CD6",     // JG's
    // "editorBracketHighlight.foreground2": "#C586C0",     // JG's
    // "editorBracketHighlight.foreground3": "#4EC9B0",     // JG's
    // "editorBracketHighlight.foreground4": "#CE9178",     // JG's
    "editorBracketHighlight.foreground1": "#ffd780", // def + Dim
    "editorBracketHighlight.foreground2": "#da70d686", // def + Dim
    "editorBracketHighlight.foreground3": "#179f80", // def + Dim
    "editorBracketHighlight.foreground4": "#ffffff80", // def + Dim

    // multi-cursor lets you toggle config in one stroke
    // multi-line select does not
    "testing.message.error.decorationForeground": "#ff646440", // JG's
    "testing.message.error.lineBackground": "#e4545405", // JG's
    // "testing.message.error.decorationForeground": "#e0ac9779", // JG's: #ff646440
    // "testing.message.error.lineBackground": "#e454541a", // same color, less invisibleJG's: #e4545405

    /*
    and some were missing
    */
    "testing.peekBorder": "#F14C4C", // pop-up showing previous runs. default = #F14C4C
    "testing.peekHeaderBackground": "#F14C4C1a", // pop-up showing previous runs. default = #F14C4C1a (same plus alpha)
    // "testing.iconErrored": "#00ff0d41"
    "testing.iconFailed": "#cd3131", // set as term.ansiiRed; 2 places: [1] gutter [2] test explorer
    "testing.iconPassed": "#6a9955", // set as term.ansiiGreen
    "testing.iconQueued": "#CCA700", // color before executing; default = #CCA700
    "testing.iconUnset": "#848484", //  2 icons: [1] in explorer the 'o' icon and the 'arrow' icon. default = #848484

    // I didn't find these. I set these to the same bright magenta color, to try to find them

    // "testing.message.info.decorationForeground": "#ff00ff", // where?
    // "testing.message.info.lineBackground": "#00ccff", // where?
    "testing.iconSkipped": "#ff00ff", // where?
    "testing.iconErrored": "#ff00ff" // where?
    /*

          ### Sect: End of My overrides of JustinGrote

          */
  },

  /*

              ### Sect: End of My overrides of JustinGrote

*/

  "problems.autoReveal": true,
//   "problems.showCurrentInStatus": true,


  "editor.tokenColorCustomizations": {
    "[Default Dark+]": {
      "textMateRules": [


        {
          "scope": [
            "punctuation.section.bracket.begin.powershell",
            "punctuation.section.bracket.end.powershell"
          ],
          "settings": {
            "foreground": "#569CD6"
          }
        }
      ]
    }
    /*

        ### Sect: end of JustinGrote theme

        */
  },
  "editor.semanticTokenColorCustomizations": {
    "[Default Dark+]": {
      "enabled": true,
      "rules": {
        "punctuation.section.bracket.begin.powershell": "#569CD6",
        "punctuation.section.bracket.end.powershell": "#569CD6"
      }
    }
    /*

          ### Sect: end of JustinGrote theme

          */
  },

  /*

    ### Sect: theme: subtler error lens

           tags: Tag1, Tag2

    */
  // "editorBracketMatch.background": "#0064001a",
  // "editorBracketMatch.background": "#00ff001a",
  // "errorLens.infoGutterIconPath": ,
  "errorLens.errorGutterIconColor": "#e45454",
  "errorLens.infoGutterIconPath": "",
  "errorLens.errorGutterIconPath": "",
  "errorLens.warningGutterIconColor": "#ff942f",
  "errorLens.warningGutterIconPath": "",

  // "errorLens.errorMessageBackground": "#e4545419",
  // "errorLens.warningMessageBackground": "#ff942f19",
  // "errorLens.infoMessageBackground": "#00b7e419",
  // "errorLens.hintMessageBackground": "#17a2a219",

  // "errorLens.errorBackground": "#7354e40a",
  // "errorLens.errorBackground": "#e4545417",
  // "errorLens.errorBackground": "#c8ff02e8",

  "errorLens.statusBarColorsEnabled": true, // not sure what this is
  // "errorLens.warningMessageBackground": "#ff880011",
  // "errorLens.warningBackground": "#e454540a",
  // "errorLens.warningBackground": "#ff880011",
  // "errorLens.warningForeground": "#e454540a",

  // "errorLens.background": "#2f323813",

  // "errorLens.infoMessageBackground": "#00b7e419",
  // "errorLens.hintMessageBackground": "#17a2a219",
  "errorLens.gutterIconSet": "circle", // <borderless | circle | default | defaultOutline>
  // "errorLens.gutterIconsFollowCursorOverride": false, // show just selected errors or whole file?
  "errorLens.gutterIconsFollowCursorOverride": true, // show just selected errors or whole file?
  "errorLens.enabledDiagnosticLevels": ["error", "hint", "warning", "info"],

  "errorLens.fontWeight": 200,

  "errorLens.fontFamily": "calibri",
  // "editor.fontWeight": "300",
  // "editor.fontWeight": "400",
  // "editor.fontWeight": "300",
  // "editor.fontWeight": "200",
  // "editor.fontWeight": "100",
  // "errorLens.fontSize": "15",
  "errorLens.fontSize": "80%",
  "editor.codeLensFontSize": 12,
  "editor.inlayHints.fontSize": 10,
  "editor.overviewRulerBorder": true, // not sure what it does
  "errorLens.borderRadius": 400,
  "errorLens.warningGutterIconColor": "#ff942f", // def: #ff942f
  "errorLens.warningGutterIconColor": "#ff932f6e", // dim: 1x
  "errorLens.warningGutterIconColor": "#ff932f3b", // dim: 2x
  "errorLens.followCursor": "allLines",
  "errorLens.followCursor": "closestProblem",
  "errorLens.followCursorMore": 2,
  "errorLens.infoGutterIconColor": "#d46f6f",
  "errorLens.infoGutterIconColor": "#00b7e4",
  "errorLens.errorGutterIconColor": "#e45454", // #def
  "errorLens.errorGutterIconPath": "",
  "errorLens.gutterIconSize": "50%", // Change gutter icon size. Examples: auto, contain, cover, 50%, 150%

  // filters
  "errorLens.exclude": [
    // "is an alias of"
  ],

  // For which languages indent-rainbow should be activated (if empty it means all).
  "indentRainbow.includedLanguages": ["python"], // for example ["nim", "nims", "python"]

  // For which languages indent-rainbow should be deactivated (if empty it means none).
  // "indentRainbow.excludedLanguages": ["powershell", "plaintext"],

  // The delay in ms until the editor gets updated.
  "indentRainbow.updateDelay": 100, // 10 makes it super fast but may cost more resources
  // Defining custom colors instead of default "Rainbow" for dark backgrounds.
  // (Sorry: Changing them needs an editor restart for now!)
  "indentRainbow.colors": [
    "rgba(255,255,64,0.07)",
    "rgba(127,255,127,0.07)",
    "rgba(255,127,255,0.07)",
    "rgba(79,236,236,0.07)"
  ],

  // The indent color if the number of spaces is not a multiple of "tabSize".
  "indentRainbow.errorColor": "rgba(128,32,32,0.6)",

  // The indent color when there is a mix between spaces and tabs.
  // To be disabled this coloring set this to an empty string.
  "indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",
  "editor.matchBrackets": "near", // experiment
  "workbench.editor.centeredLayoutAutoResize": true,

  "editor.quickSuggestionsDelay": 1500,
  // "editor.inlayHints.enabled": false,
  // "editor.inlayHints.fontFamily": "arial",
  "testing.autoRun.delay": 1000,
  "workbench.hover.delay": 200,
  // Controls the delay in milliseconds after which the hover is shown.
  "workbench.hover.delay": 200,
  "editor.hover.delay": 300,
  "errorLens.delay": 2500,
  "html.suggest.html5": true,
  "emmet.showSuggestionsAsSnippets": true,
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "debug.console.historySuggestions": true,

  "editor.suggest.preview": true,
  // ""
  "search.useReplacePreview": true,

  "[powershell]": {
    "editor.semanticHighlighting.enabled": true,
    "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
    "editor.wordSeparators": "`~!@#$%^&*()=+[{]}\\|;:'\",.<>/?",
    "editor.formatOnSave": true,
    // if autoIndent is set to 'full' it breaks indentation on 'move line up/down'
    "editor.autoIndent": "advanced"
  },

  //  Skip error highlighting for some or all languages. For example, you may want to turn off the indent errors for markdown and haskell (which is the default)

  // Skip error highlighting for RegEx patterns. For example, you may want to turn off the indent errors for JSDoc's valid additional space (disabled by default), or comment lines beginning with //
  // Example of regular expression in JSON (note double backslash to escape characters)
  "indentRainbow.ignoreLinePatterns": [
    "/[ \t]* [*]/g", // lines begining with <whitespace><space>*
    "/[ \t]+[/]{2}/g" // lines begininning with <whitespace>//
  ],

  "indentRainbow.ignoreErrorLanguages": ["json", "markdown", "haskell"],

  "[powerquery]": {
    "editor.formatOnSave": false,
    "editor.suggest.preview": true
  },
  /*

  ###### SubSect: Files ⇢ Files.Associations

      */
  "files.defaultLanguage": "${activeEditorLanguage}",
  "files.trimTrailingWhitespace": true,
  "files.encoding": "utf8",
  "files.autoGuessEncoding": false,
  "files.associations": {
    // these have higher precendence than extensions
    "*.dax": "sql",
    "*.json": "jsonc",
    // powershell
    "*.ps1xml": "xml", // unsure if you have to disable this for 'xml' schema to work?
    // microsoft / vs studio
    "*.wixproj": "xml",
    "*.mproj": "xml",
    "*.odc": "html",
    // ripgrep, bat
    ".batrc": "shellscript",
    ".ripgreprc": "shellscript",
    "nuget.config": "xml",
    "*.psm1": "powershell"
  },

  /*

    ### Sect: Brackets and Guides and Rulers

           tags: brackets, guides, rulers, pair

    */

  "debug.showBreakpointsInOverviewRuler": true,
  "editor.hideCursorInOverviewRuler": true,

  // Controls whether bracket pair guides are enabled or not.
  // vertical thin line
  "editor.guides.bracketPairs": true,

  // Controls whether the editor should highlight the active indent guide.
  "editor.guides.highlightActiveIndentation": false,
  "editor.guides.highlightActiveIndentation": true,
  "git.countBadge": "tracked",

  // Controls whether the editor should render indent guides.
  "editor.guides.indentation": true,

  // Controls whether the cursor should be hidden in the overview ruler.
  "editor.hideCursorInOverviewRuler": false,

  // Controls whether the hover is shown.
  "editor.hover.enabled": true,

  // "editor.gotoLocation.*":

  /*

    ### Sect: Addon 🔧 Git Lens

           tags: git, color

    */
  "gitlens.advanced.abbreviatedShaLength": 7,
  "gitlens.advanced.quickPick.closeOnFocusOut": true,
  "gitlens.advanced.messages": {
    // currently the defaultes
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressCreatePullRequestPrompt": false,
    "suppressDebugLoggingWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitDisabledWarning": false,
    "suppressGitMissingWarning": false,
    "suppressGitVersionWarning": false,
    "suppressImproperWorkspaceCasingWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressRebaseSwitchToTextWarning": false
  },
  "editor.codeLens": true,

  "editor.codeLensFontFamily": "'consolas', 'cascadia code pl', 'fira code retina', 'calibri', sans",
  // "editor.inlayHints.fontFamily": "",

  "editor.fontLigatures": true,
  "editor.hover.sticky": true,
  "prettier.requireConfig": true,
  "prettier.configPath": "C:/Users/cppmo_000/SkyDrive/Documents/2021/dotfiles_git/web/prettier/.prettierrc", // # this actually prevents other formats
  // "prettier.printWidth": 140,
  // "prettier.proseWrap": "preserve",
  // "prettier.tabWidth": 4,
  // "prettier.useTabs": true,
  // "prettier.documentSelectors": ["*.json", "*.jsonc"],
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.suggest.preview": true
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.suggest.preview": true
  },

  "pesterExplorer.autoDiscoverOnOpen": true, // todo:  ask kwhat the multiple toggles should be
  "diffEditor.ignoreTrimWhitespace": false,
  "powershell.codeFormatting.autoCorrectAliases": true,
  "pester.suppressCodeLensNotice": true,
  "testExplorer.useNativeTesting": true,
  "powershell.codeFormatting.ignoreOneLineBlock": false,
  "editor.suggest.showStatusBar": true,

  /*

  ### Sect: vscode icons

         tags: icons

  */

  "workbench.iconTheme": "vscode-icons",
  /*

    ### Sect: vscode-icons

           tags: Addon, Icons

    */

  "vsicons.associations.files": [
    // justin grote's config: <https://discord.com/channels/180528040881815552/447476910499299358/801102446209794088>
    {
      "extensions": ["arm.json"],
      "format": "svg",
      "icon": "azure"
    },
    {
      "icon": "text", // or any other icon from vscode-icons
      "extensions": ["ans", "ansi"],
      "format": "svg"
    },
    {
      "extensions": ["parameters.json"],
      "format": "svg",
      "icon": "config"
    },
    {
      "extensions": ["tests.ps1"],
      "format": "svg",
      "icon": "test"
    },
    {
      "extensions": ["clixml"],
      "format": "svg",
      "icon": "xml"
    }
  ],
  "vsicons.associations.folders": [
    {
      "extends": "dist",
      "extensions": ["BuildOutput", "Output"],
      "format": "svg",
      "icon": "dist"
    },
    {
      "extends": "helper",
      "extensions": ["BuildHelpers"],
      "format": "svg",
      "icon": "helper"
    }
  ],
  "editor.suggest.insertMode": "replace",
  "editor.snippetSuggestions": "bottom",
  "files.trimTrailingWhitespace": true,
  /*

  ###### SubSect: Extension: ⇢ xml "redhat.vscode-xml"

      */
  // schema for Powershell
  "xml.fileAssociations": [
    {
      "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Format.xsd",
      "pattern": "**/*.Format.ps1xml"
    },
    {
      "systemId": "https://raw.githubusercontent.com/PowerShell/PowerShell/master/src/Schemas/Types.xsd",
      "pattern": "**/*.Types.ps1xml"
    }
  ],
  /*

###### SubSect: Extension: ⇢ dotnet / C#: 'csharpextensions'

    */
  "csharpextensions.privateMemberPrefix": "_",
  "csharpextensions.useThisForCtorAssignments": false,
  /*

###### SubSect: editorAssociations ViewType Overrides / File Type Overrides


    applies schemas to PowerShell '.Format.ps1xml' and '.Types.ps1xml'
*/
  // "workbench.editorAssociations": {
  //     "*.ipynb": "jupyter-notebook"
  // },
  /*

  ###### SubSect: Files ⇢ Files.Exclude

      */
  /* Example configs
      // [1] files by extensions
      "files.exclude": {
          "/*.lnk": true
      // [2] files with multiple extensions
      "files.exclude": {
          "/*.{ext1,ext2,ext3}": true
      },
      // [3] files with siblings by name
      "files.exclude": {
          "/*.source-extension": {
              "when": "$(basename).target-extension"
          }
      },
      // [4] folder by name (any location)
      "files.exclude": {
          "/name": true
      },
      // [5] folder by name (top level)
      "files.exclude": {
          "name": true
      },
      // [6] folders with multiple names (by level)
      "files.exclude": {
          "{folder1,folder2,folder3}": true
      },
      */
  // [7] default value
  // default value
  "files.exclude": {
    "**/*.exe": true,
    "**/*.lnk": true,
    "**/.git": true,
    "**/*.pbix": true,
    "**/*.zip": true,
    // venv, cache, or compiled
    "**/*.py[co]": true,
    "**/__pycache__": true,
    "**/node_modules": true,
    "**/.mypy_cache": true,
    "**/venv": true
    // "**/*.js": {
    //     "when": "$(basename).min.js",
    //     "exclude": false,
    //     ""
    // },
    // "**/*.js": false,
  },
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true
  },
  /*

  ###### SubSect: Files ⇢ Search.Exclude

      */
  "search.exclude": {
    // "**/*.mez": true,
    "**/*.lnk": true,
    "**/*.log": true
  },
  "breadcrumbs.filePath": "off",
  "breadcrumbs.filePath": "last", // theme-tag: minimalism
  "breadcrumbs.filePath": "on", // theme-tag: information
  "breadcrumbs.enabled": false, // theme-tag: minimalism,
  "breadcrumbs.enabled": true, //
  "breadcrumbs.icons": false, // theme-tag: minimalism
  "breadcrumbs.icons": true, // doesn't seem to change much, not even outline
  // "editor.renderControlCharacters": true,
  "editor.fontLigatures": true,
  "workbench.editor.labelFormat": "medium",
  // "breadcrumbs.showArrays": true,
  "search.useReplacePreview": true,
  // "explorer.sortOrder": "modified", // nice for log files
  "editor.renderLineHighlightOnlyWhenFocus": true,
  "editor.renderControlCharacters": true,
  "breadcrumbs.symbolSortOrder": "type",
  "editor.wordWrapColumn": 160,
  "editor.wrappingIndent": "deepIndent",
  "editor.detectIndentation": false,
  // "diffEditor.ignoreTrimWhitespace": true,
  // "editor.suggest.maxVisibleSuggestions": 15, : this is obsolete as of 2020-11
  // "html.autoClosingTags": true,
  // "powershell.enableProfileLoading": true,
  "workbench.settings.editor": "json",
  // "workbench.settings.enableNaturalLanguageSearch": false,
  // "workbench.settings.settingsSearchTocBehavior": "filter",
  // "workbench.editor.labelFormat": "long",
  // "editor.cursorWidth": 60,
  "editor.cursorBlinking": "smooth", // "smooth",
  // "editor.cursorStyle": "block-outline",
  "editor.cursorStyle": " underline",
  /* cursor config for screenshots */
  "editor.cursorBlinking": "solid", // "smooth",
  "editor.cursorStyle": "block-outline",
  // "editor.cursorSurrounding"underline"s": 50,
  // "terminal.integrated.cursorWidth": 1,
  // "terminal.integrated.cursorWidth": 1,
  "terminal.integrated.scrollback": 2000,
  // "terminal.integrated.allowMnemonics": false, ?
  // "terminal.integrated.windowsEnableConpty": true,
  "terminal.integrated.showLinkHover": true,
  "terminal.integrated.sendKeybindingsToShell": false,
  "terminal.integrated.splitCwd": "workspaceRoot",
  "terminal.integrated.titleMode": "sequence",
  "terminal.integrated.tabs.enabled": true,
  "editor.letterSpacing": 0,
  // "editor.hideCursorInOverviewRuler": false,
  "docsView.documentationView.updateMode": "live",
  // "debug.console.historySuggestions": true,
  // makes left click instant
  "editor.cursorSmoothCaretAnimation": false,
  /*

  ### Sect: Terminal Config

      */
  /*

  docs: <https://code.visualstudio.com/docs/editor/integrated-terminal#_windows>
      examples:
          // CMD, Win PS, GitBash, and WSL
          "terminal.integrated.shell.windows": "C:/Windows/System32/cmd.exe"
          // PowerShell
          "terminal.integrated.shell.windows": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
          // Git Bash
          "terminal.integrated.shell.windows": "C:/Program Files/Git/git-cmd.exe",
          "terminal.integrated.shellArgs.windows": [ "--command=usr/bin/bash.exe", "-l", "-i" ]
          // Bash on Ubuntu (on Windows)
          "terminal.integrated.shell.windows": "C:/Windows/System32/bash.exe"
      */
  // "terminal.integrated.cwd": "c:/data/jake",
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.files.newUntitledFile",
    "workbench.action.toggleSidebarVisibility",
    "workbench.action.showAllSymbols"
  ],
  // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
  // "terminal.integrated.shell.windows": "C:/Program Files/Git/git-bash.exe",
  // "terminal.integrated.shell.linux": "C:/Windows/System32/cmd.exe",
  // // "terminal.integrated.shell.windows": "C:/Windows/System32/cmd.exe",
  // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
  // "terminal.external.windowsExec": "powershell",
  // "terminal.integrated.shellArgs.windows": [
  // "-nop"
  // "terminal.integrated.shell.windows": "C:/Program Files/Git/bin/bash.exe",
  // ],
  "terminal.integrated.rendererType": "canvas",
  // "terminal.integrated.fontSize": 12,
  // "terminal.integrated.inheritEnv": false
  // "terminal.integrated.shell.windows": "C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"
  // "terminal.integrated.shell.windows": "C:/Windows/System32/bash.exe"
  /*

      external term
          was using: // "terminal.external.windowsExec": "C:/Program Files/PowerShell/7/pwsh.exe",

      */
  "terminal.external.windowsExec": "wt",
  // "terminal.explorerKind": "external",
  // "terminal.integrated.shell.windows": "C:/WINDOWS/System32/WindowsPowerShell/v1.0/powershell.exe",
  /*
      This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `#terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows#`. This will currently take priority over the new profiles settings but that will change in the future.
      */
  // "terminal.integrated.shell.windows": "C:/Program Files/PowerShell/7/pwsh.exe",
  // "terminal.integrated.shellArgs.windows": [
  //     "-NoLogo"
  // ],
  "debug.inlineValues": "auto",
  "terminal.integrated.allowChords": true,
  "terminal.integrated.automationShell.windows": null,
  "terminal.integrated.allowWorkspaceConfiguration": false,
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.enableFileLinks": true,
  "terminal.integrated.environmentChangesIndicator": "warnonly",
  /*
      none:       none
      minimal:    only print errors, hide green text.
      normal:     no difference?
      detailed:   Normal with green successful tests displayed
      diagnostic: most verbose, prints filters used to select tests to run

      "powershell.pester.debugOutputVerbosity": "Diagnostic",

          [none | minimal | normal | detailed | diagnostic]

      "powershell.pester.outputVerbosity":

          [Diagnostic | None | Detailed | FromPreference | Minimal | Normal]


          default value 'FromPreference', will use the Output settings from the $PesterPreference defined in the caller context, and will default to Normal if there is none

      */
  // "powershell.pester.outputVerbosity": "Minimal", //"Diagnostic",
  "powershell.pester.outputVerbosity": "Detailed", //"Diagnostic",
  "powershell.pester.outputVerbosity": "Detailed", //"Diagnostic",
  "powershell.pester.debugOutputVerbosity": "Detailed", // "Detailed", //Diagnostic",
  "terminal.integrated.environmentChangesRelaunch": true,
  // "terminal.integrated.fontWeight": "500",
  "terminal.integrated.experimentalUseTitleEvent": false, // An experimental setting that will use the terminal title event for the dropdown title. This setting will only apply to new terminals
  "terminal.integrated.cursorBlinking": false,
  // "terminal.integrated.cursorStyle": "line", # no like.
  "terminal.integrated.cursorStyle": "underline",
  "terminal.integrated.cursorStyle": "block",
  "terminal.integrated.altClickMovesCursor": true, // sometimes wonky
  "terminal.integrated.localEchoStyle": "dim", // ?
  "terminal.integrated.localEchoStyle": "underlined", // ?
  "terminal.integrated.experimentalLinkProvider": true,
  "terminal.integrated.rightClickBehavior": "copyPaste",
  "terminal.integrated.sendKseybindingsToShell": false,
  "terminal.integrated.wordSeparators": " ()[]{}',\"`─", // default changes per-language
  "terminal.integrated.tabs.focusMode": "doubleClick",
  "terminal.integrated.inheritEnv": true,
  "terminal.integrated.useWslProfiles": true,
  "terminal.integrated.tabs.hideCondition": "singleTerminal",
  "terminal.integrated.tabs.showActiveTerminal": "always",
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminal",
  "terminal.integrated.tabs.showActiveTerminal": "never",
  "terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",
  "terminal.integrated.localEchoLatencyThreshold": 30,
  "terminal.integrated.cursorWidth": 2,
  // An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
  "terminal.integrated.cwd": "",
  // Controls where newly created terminals will appear.
  //  - editor: Create terminals in the editor
  //  - view: Create terminals in the terminal view
  "terminal.integrated.defaultLocation": "view",
  // The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
  "terminal.integrated.defaultProfile.linux": null,
  // The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
  "terminal.integrated.defaultProfile.osx": null,
  // The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
  //  - PowerShell: $(terminal-powershell) PowerShell
  // - path: C:\Program Files\PowerShell\7\pwsh.exe
  //  - Command Prompt: $(terminal-cmd) Command Prompt
  // - path: C:\WINDOWS\System32\cmd.exe
  // - args: []
  //  - Git Bash: $(terminal) Git Bash
  // - path: C:\Program Files\Git\bin\bash.exe
  // - args: [--login]
  //  - PowerShellfsds: $(terminal-powershell) PowerShellfsds
  // - path: C:\Program Files\PowerShell\7\pwsh.exe
  //  - Pwsh -NoProfile: $(terminal-powershell) Pwsh -NoProfile
  // - path: pwsh.exe
  // - args: [-NoProfile','-NoLogo]
  //  - Pwsh: $(terminal-powershell) Pwsh
  // - path: pwsh.exe
  // - args: [-NoLogo]
  //  - Windows PowerShell: $(terminal) Windows PowerShell
  // - path: C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe
  // - args: [-NoLogo','-NoProfile]
  "terminal.integrated.defaultProfile.windows": "PowerShell🐒",
  "terminal.integrated.localEchoExcludePrograms": [
    // default
    "vim",
    "vi",
    "nano",
    "tmux"
  ],
  "debug.terminal.clearBeforeReusing": false,
  "debug.saveBeforeStart": "nonUntitledEditorsInActiveGroup",
  /*

  ###### SubSect: Semantic highlighting

      */
  "csharp.semanticHighlighting.enabled": true,
  "editor.semanticHighlighting.enabled": true, // or "ConfiguredByTheme"
  "editor.semanticTokenColorCustomizations": {
    // per-theme
    "[Default Dark+]": {
      "enabled": true,
      "rules": {
        // single value
        "parameter": "#d4d4d4",
        // vs many
        "parameter": {
          "foreground": "#ff0000",
          "foreground": "#464545", // nintheme
          "underline": true,
          "bold": true,
          "italic": true,
          "fontStyle": "italic bold underline"
        }
      }
    },
    // "variable": "#fae",
    // "variable": "#9dccfe",
    // or global
    "enabled": true,
    "rules": {
      /*
              "parameter": "#d4d4d4",
              "variable": "#9dccfe"
              "xmlDocCommentAttributeQuotes": "#ff0000",
              "*.builtin": {
                  "foreground": "#FF0000",
                  "fontStyle": "bold"
              }
              */
    }
  },
  "pesterExplorer.autoDiscoverOnOpen": true,
  /*

    ### Sect: Testing

           tags: Tag1, Tag2

    */
  // Configures when the error peek view is automatically opened.
  //  - failureAnywhere: Open automatically no matter where the failure is.
  //  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
  //  - never: Never automatically open.
  "testing.automaticallyOpenPeekView": "failureInVisibleDocument",
  // Controls whether to automatically open the peek view during auto-run mode.
  "testing.automaticallyOpenPeekViewDuringAutoRun": false,
  // How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
  "testing.autoRun.delay": 300,
  // Controls which tests are automatically run.
  //  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
  //  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
  // "testing.autoRun.mode": "all",
  "testing.autoRun.mode": "rerun",
  // Controls the action to take when left-clicking on a test decoration in the gutter.
  //  - run: Run the test.
  //  - debug: Debug the test.
  //  - contextMenu: Open the context menu for more options.
  "testing.defaultGutterClickAction": "run",
  // Controls whether the running test should be followed in the test explorer view
  "testing.followRunningTest": true,
  // Controls whether test decorations are shown in the editor gutter.
  "testing.gutterEnabled": true,
  "editor.guides.bracketPairs": true,
  "powershell.pester.codeLens": false,
  "csharp.referencesCodeLens.filteredSymbols": [
    ".*",
    "*",
    "function",
    "Commands.Reports"
  ],
  "pesterExplorer.autoDiscoverOnOpen": true, // todo:  ask kwhat the multiple toggles should be
  "diffEditor.ignoreTrimWhitespace": false,
  "powershell.codeFormatting.autoCorrectAliases": true,
  "pester.suppressCodeLensNotice": true,
  "testExplorer.useNativeTesting": true,
  "powershell.codeFormatting.ignoreOneLineBlock": false,
  "editor.suggest.showStatusBar": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.lineNumbers": "relative", // weird
  "editor.lineNumbers": "interval", // cleaner
  // "editor.lineHeight": 25, // 0-8 are multipliers, > 8 are literal px sizes
  "notebook.lineNumbers": "off",
  "zenMode.hideLineNumbers": true,
  "zenMode.centerLayout": true,
  "zenMode.fullScreen": false,
  "zenMode.hideActivityBar": true,
  "zenMode.hideStatusBar": true,
  "zenMode.hideTabs": true,
  "zenMode.restore": true,
  "zenMode.silentNotifications": true, // true shows only errors
  "testing.gutterEnabled": true,
  "testExplorer.gutterDecoration": true,
  "testing.defaultGutterClickAction": "run", // default
  "testing.defaultGutterClickAction": "debug",
  "testing.defaultGutterClickAction": "contextMenu",
  "docs-visual-areas.gutterIndicatorHeight": 100,
  "docs-visual-areas.gutterIndicatorOpacity": 60,
  "docs-visual-areas.gutterIndicatorOffset": 12,
  "docs-visual-areas.gutterIndicatorWidth": 4,
  "editor.semanticHighlighting.enabled": true,
  "errorLens.enabled": true,
  "errorLens.gutterIconsEnabled": true,
  "powershell.codeFormatting.preset": "OTBS",
  "powershell.codeFormatting.trimWhitespaceAroundPipe": true,
  "powershell.codeFormatting.useConstantStrings": true,
  "powershell.codeFormatting.useCorrectCasing": true,
  "powershell.codeFormatting.whitespaceBetweenParameters": true,
  "powershell.integratedConsole.suppressStartupBanner": true,
  "powershell.pester.debugOutputVerbosity": "Detailed",
  "powershell.pester.outputVerbosity": "Detailed",
  "powershell.pester.useLegacyCodeLens": false,
  "powershell.promptToUpdatePowerShell": false,
  "window.zoomLevel": 1
  /*

    ### Sect: Mouse and Scrolling

           tags: scrollbar, mouse, sensitivity

    */
}
