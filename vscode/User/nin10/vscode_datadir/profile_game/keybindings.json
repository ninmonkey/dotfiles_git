// Place your key bindings in this file to override the defaults
[
    /*
    See also:

    ## Docs:
        https://code.visualstudio.com/api/references/commands
        https://code.visualstudio.com/api/references/when-clause-contexts


    ## Examples:
        - <https://github.com/SeeminglyScience/dotfiles/blob/a7a9bcf3624efe5be4988922ba2e35e8ff2fcfd8/VSCode/keybindings.json>

    ## New Commands
        - [October 2020 | version 1.51](https://code.visualstudio.com/updates/v1_51#_new-commands)
        - <https://code.visualstudio.com/updates/v1_57#_removed-cmdw-ctrlw-keybinding-to-close-window-when-no-editor-is-opened>


    */
    /* editor defaults */
    //   {
    //     "key": "ctrl+w",
    //     "command": "workbench.action.terminal.killEditor",
    //     "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    //   },
    //   { "key": "ctrl+w", "command": "workbench.action.closeActiveEditor" },
    //   { "key": "ctrl+w",                "command": "workbench.action.closeGroup",
    //                                      "when": "activeEditorGroupEmpty && multipleEditorGroups" }
    // new: command: <https://code.visualstudio.com/updates/v1_59#_create-terminal-in-editor-area-to-the-side>
    {
        // opens a new term in the editor area, but in a side
        "key": "ctrl+numpad5",
        "command": "workbench.view.extensions",
        "when": "editorTextFocus"
        // "args": "",
    },
    {
        "key": "ctrl+numpad6",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": ""
    },
    {
        // opens a new term in the editor area, but in a side
        "key": "ctrl+numpad4",
        "command": "workbench.action.createTerminalEditor",
        "when": "editorTextFocus"
    },
    /*
        experiment: prevent ctrl+w when editor is a terminal tab

            !editorIsOpen

        line2.2k
        involoved commands:
            { "key": "ctrl+w", "command": "workbench.action.closeActiveEditor" },
            { "key": "ctrl+w",  "command": "workbench.action.terminal.killEditor",
                "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'" },
    */
    // {
    //     "key": "ctrl+w",
    //     "command": "workbench.action.closeActiveEditor",
    //     "when": "resourceScheme == 'vscode-terminal'"
    //     // "when": "activeEditor ==  'terminalEditor'"
    // },
    // "when": "!editorIsOpen && !multipleEditorGroups"
    // {
    //     // Temp override: disable it
    //     "key": "ctrl+w",
    //     "command": "-workbench.action.closeWindow",
    //     // "when": "!editorIsOpen && !multipleEditorGroups"
    // },
    {
        // from: https://code.visualstudio.com/updates/v1_57#_removed-cmdw-ctrlw-keybinding-to-close-window-when-no-editor-is-opened
        "key": "ctrl+w",
        "command": "workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "ctrl+shift+c",
        "command": "PowerShell.ShowAdditionalCommands",
        // "when": "editorLangId == 'powershell'"
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+.",
        "command": "PowerShell.InvokeRegisteredEditorCommand",
        "args": {
            "commandName": "Invoke-DocumentRefactor"
        },
        "when": "editorLangId == 'powershell'"
    },
    // {
    //     "key": "ctrl+w",
    //     "command": "-workbench.action.closeActiveEditor",
    //     "when": "resourceScheme == 'vscode-terminal'"
    // },
    /*


    ### Sect: Better Align

           tags: addon

        docs:
            https://marketplace.visualstudio.com/items?itemName=wwm.better-align
            alignment.surroundSpace : {
  "colon"      : [0, 1], // The first number specify how much space to add to the left, can be negative.
                         // The second number is how much space to the right, can be negative.
  "assignment" : [1, 1], // The same as above.
  "arrow"      : [1, 1], // The same as above.
  "comment"    : 2       // Special how much space to add between the trailing comment and the code.
                         // If this value is negative, it means don't align the trailing comment.
}
    */
    {
        // "key": "ctrl+cmd+=",
        "key": "ctrl+numpad1",
        "command": "wwm.aligncode",
        "when": "editorTextFocus && !editorReadonly"
        // "args": ""
    },
    /*

    [section]: Debugging

    */
    {
        "key": "ctrl+v", // fixes a lot of paste problems for pwsh at least
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v", // fixes a lot of paste problems for pwsh at least
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "notebook.cell.execute",
        "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "ctrl+enter",
        "command": "-notebook.cell.execute",
        "when": "config.jupyter.enableKeyboardShortcuts && editorTextFocus && inputFocus && notebookEditorFocused && notebookViewType == 'jupyter-notebook'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-jupyter.runcurrentcell",
        "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "alt+enter",
        "command": "notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "-notebook.cell.executeAndSelectBelow",
        "when": "notebookCellListFocused && notebookCellExecutionState == 'failed' || notebookCellExecutionState == 'idle' || notebookCellExecutionState == 'succeeded' && notebookKernelCount > 0"
    },
    {
        /* manually opt in to languages  */
        "key": "ctrl+alt+j",
        "command": "editor.action.insertSnippet",
        // "when": "editorTextFocus && editorLangId == 'markdown' || editorLangId == 'powerquery' || editorLangId == 'swift'"
        "when": "editorTextFocus"
    },
    // {
    //jump to breakpoints (only in the text editor)
    //   "key": "ctrl+alt+numpad2",
    //   "command": "editor.debug.action.goToNextBreakpoint",
    //   "when": "editorTextFocus"
    // },
    // {
    //   "key": "ctrl+alt+numpad1",
    //   "command": "editor.debug.action.goToPreviousBreakpoint",
    //   "when": "editorTextFocus"
    // },
    {
        "key": "ctrl+shift+alt+j",
        "command": "code-runner.runByLanguage"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-code-runner.runByLanguage"
    },
    {
        "key": "ctrl+b",
        "command": "-markdown.extension.editing.toggleBold",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+alt+l",
        "command": "editor.action.joinLines"
    },
    {
        "key": "ctrl+b",
        "command": "-md-shortcut.toggleBold",
        "when": "editorTextFocus && markdownShortcuts:enabled"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+shift+k ctrl+shift+b",
        "command": "editor.action.selectToBracket"
    },
    // {
    //   "key": "ctrl+end ctrl+shift",
    //   "command": "errorLens.toggle"
    // }
    /*

    Powershell: Pester
    */
    /*

    h1: Toggle Ctrl+V keybinds on and off,
        from ctrl+v to ctrl+shift+v

        for debugging
    {
        "key": "ctrl+numpad1",
        "command": "PowerShell.DebugPesterTestsFromFile",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+numpad2",
        "command": "PowerShell.RunPesterTestsFromFile",
        "when": "editorTextFocus && editorLangId == 'powershell'"
    },
    {
        "key": "ctrl+shift+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+shift+v",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "-filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+v",
        "command": "workbench.action.terminal.sendSequence",
        "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
    },
    */
    // { //broke?
    //     "key": "ctrl+numpad3",
    //     "command": "PowerShell.RunPesterTests",
    //     "when": "editorTextFocus && editorLangId == 'powershell'"
    // },
    /*
    examples

    [ex] Quick fix uses a regex
    {
        "key": "shift+alt+.",
        "command": "editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },

    [ex] conditional replacement
        (?<pattern>:<insertion>)

    [ex] conditional replacement
        (?<pattern>:<insertion>:<otherwise>)


        (?«n»:«insertion»:«otherwise») to have «otherwise» inserted when capture «n» was not matched.
    */
]