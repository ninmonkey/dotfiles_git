{
    /*

    Snippets: Powershell

    Description:

    todo:
        - [ ] autocollect -> dotfiles_github


    Refs:
        dotfiles:
            $Env:userprofile\Documents\2020\MyModules_Github\VSCode-ConfigSnippets\snippet\powershell.json

        snippet pattern examples:
            <https://gist.github.com/ninmonkey/4fe8062d5ad1b2ad17e6f91a96984851>

        extension dir:
            $Env:UserProfile\.vscode\extensions\ms-vscode.powershell[-preview]-<version>\snippets\PowerShell.json
        see:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_choice

    see also:

        https://github.com/PowerShell/vscode-powershell/blob/master/docs/community_snippets.md

    */
    "ninPwsh Parameter": {
        "prefix": "Parameter | üêí",
        "description": "ninParameter Template üêí",
        "body": [
            "# ${1}",
            "[Parameter(${2})]",
            "[${3:String}]\\$${4:ParameterName}${0}"
        ]
    },
    "Parameter ‚á¢ Basic": {
        //was not getting priority, since snippet ext:  "ninParameter [Parameter] : Basic",
        "prefix": "Parameter üêí default",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(${2:Mandatory, Position=0})]",
            // "    HelpMessage='${2}')]",
            "[${3:object}]$${4:ParameterName}$0",
        ],
        "description": "nin ‚Åû A basic [Parameter()]"
    },
    "herestring variables": {
        "prefix": "here : Variable üêí",
        "body": [
            "@\"",
            "${1:$TM_SELECTED_TEXT}",
            "\"@",
            "${0}"
        ],
        "description": "Interpolated Here-string"
    },
    "herestring literal": {
        "prefix": "here : Literal üêí Literal Herestring",
        "body": [
            "@'",
            "${1:$TM_SELECTED_TEXT}",
            "'@",
            "${0}"
        ],
        "description": "Literals Here-String"
    },
    "Help ‚á¢ Comment Based": {
        //was not getting priority, since snippet ext:  "ninParameter [Parameter] : Basic",
        "prefix": "DocString Help Docstring üêí",
        "description": "nin ‚Åû The important docstring attributes. Selected Text Populates Synopis",
        "body": [
            "<#",
            ".synopsis",
            "    ${1:${TM_SELECTED_TEXT:Short Description}}",
            ".description",
            "    Long description",
            ".example",
            "    PS> .",
            ".inputs",
            "    Summary of Pipeline Inputs",
            ".outputs",
            "    None",
            ".notes",
            "    General notes",
            ".link",
            "    command",
            "#>",
            "${0}",
        ],
    },
    "CmdletBinding()": {
        "prefix": "[CmdletBinding()]",
        "description": "nin ‚Åû CmdletBinding with initial params",
        "body": [
            "[CmdletBinding()]",
            "param (",
            "    # ${3:docstring}",
            "    [Parameter(Mandatory, Position=0,",
            "wip -- do the always CmdletWriteError",
            "in the try catch",
            "in the try here",
            // Best practice is to use doc strings, not the attribute
            // "        HelpMessage=\"doc\")]",
            "    [${1:TypeName}]$${2:ParameterName}$0",
            ")"
        ]
    },
    "Function ‚á¢ Cmdlet": {
        "prefix": "Function üêí ‚á¢ Commandlet",
        "description": "Defaults for a  new functionüêí",
        "body": [
            "function ${1:Get-Foo} {",
            "    <#",
            "    .synopsis",
            "        ${2:Stuff}",
            "    .description",
            "        ${3:Desc}",
            "    .outputs",
            "    ",
            "    #>",
            "    [CmdletBinding(PositionalBinding=\\$false)]",
            "    param(",
            "        ${4}",
            "    )",
            "    ",
            "    begin {}",
            "    process {",
            "       ${0}",
            "    # todo: CmdletExceptionWrapper: From Sci",
            "    }",
            "    end {}",
            "}"
        ]
    },
    "Function ‚á¢ Tiny Basic": {
        "prefix": "Function üêí ‚á¢ Mini Basic",
        "description": "nin ‚Åû A basic function",
        "body": [
            "function ${1:Get-Foo} {",
            "    <#",
            "    .synopsis",
            "        ${2:Stuff}",
            "    .description",
            "        .",
            "    ",
            "    #>",
            "    [CmdletBinding(PositionalBinding=\\$false)]",
            "    param(",
            "        ${4}",
            "    )",
            "    ${0}",
            "}"
        ]
    },
    "CalculatedProperty": {
        "prefix": "Calculated-Property ‚á¢ SingleLine",
        "body": [
            "@{name='${1:PropertyName}';expression={${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}}}$0"
        ],
        "description": "nin ‚Åû a CalculatedProperty on a Single Line",
    },
    "CalculatedProperty: Multiline": {
        "prefix": "Calculated-Property ‚á¢ MultiLine",
        "body": [
            "@{",
            "    Name = '${1:PropertyName}'",
            "    Expression = {",
            "        ${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}",
            "   }",
            "}",
            "$0"
        ],
        "description": "nin ‚Åû a CalculatedProperty using multiple lines",
    },
    "IfShouldProcess": {
        "prefix": "IfShouldProcess",
        "description": "nin ‚Åû Creates ShouldProcess block from your Selection",
        "body": [
            "if (\\$PSCmdlet.ShouldProcess(\"${1:Target}\", \"${2:Operation}\")) {",
            "    ${0:$TM_SELECTED_TEXT}",
            "}"
        ],
    },
    "Parameter ‚á¢ Switch": {
        "prefix": "Switch ‚á¢ üêí Parameter",
        "description": "nin ‚Åû adds a [switch] parameter",
        "body": [
            // "[Parameter(HelpMessage = \"$1\")][switch]\\$${0}"
            "# ${1:Docstring}",
            "[Parameter()][switch]\\$${0}"
        ]
    },
    "Switch ‚á¢ ParameterSetNameSwitch": {
        "prefix": "Switch ‚á¢ üêí ParameterSetName",
        "description": "nin ‚Åû Template for a switch with ParameterSetNames",
        "body": [
            "switch (\\$PSCmdlet.ParameterSetName) {",
            "    ${1:'x'} {",
            "        ${2}",
            "        break",
            "    }",
            "    ${0}",
            "    default {",
            "        throw \"Unhandled ParameterSet: $(\\$PSCmdlet.ParameterSetName)\"",
            "    }",
            "}",
        ]
    },
    "Parameter: Completer ‚á¢ ValidateSet": {
        "prefix": "Completer ‚á¢ ValidateSet",
        "description": "nin ‚Åû Autocompleter parameter from a static list using ValidateSet()",
        "body": [
            "# ${1:Docstring}",
            "[Parameter(",
            "    ${2:Mandatory}, ${3:Position=0},",
            // "    HelpMessage='${3}')]",
            "    [ValidateSet(${4})]",
            "    [string[]]$${5:ParameterName})",
            "$0",
        ],
    },
    "Web ‚á¢ Invoke-RestMethod": {
        "prefix": "Web ‚á¢ Invoke-RestMethod",
        "description": "nin ‚Åû Invoke-RestMethod | template saves response data",
        "body": [
            "\\$splat_irm = @{",
            "    Uri                     = '${1:$TM_SELECTED_TEXT}'",
            "    Body                    = @{",
            "        ${2}",
            "    }",
            "    # Form = @{}",
            "    Method                  = 'Get'",
            "    SessionVariable         = 'sess_var'",
            "    StatusCodeVariable      = 'status_var'",
            "    ResponseHeadersVariable = 'response_var'",
            "    # ContentType = ''",
            "    # TimeoutSec = 0",
            "    # Token = 'foo'",
            "    # Authentication = 'OAuth'",
            "    Headers                 = @{}",
            "}",
            "",
            "\\$Response ??= Invoke-RestMethod @splat_irm${0}",
        ],
    },
}