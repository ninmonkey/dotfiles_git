{
    /*
    from: <https://github.com/ninmonkey/Ninmonkey.PowerQueryLib/blob/master/.vscode/snippets.code-snippets>
    examples:

        transforming input: <https://code.visualstudio.com/docs/editor/userdefinedsnippets#_transform-examples>
        new: snippet variables: <https://code.visualstudio.com/updates/v1_53#_new-snippet-variables>
        docs: <https://code.visualstudio.com/docs/editor/userdefinedsnippets>
    */
    // "Transform.Literal.Text | Transforms Quote Literal": {
    //     // # note: extension addon makes this mostly redundant
    //     "prefix": "Quote Text",
    //     "description": "Transforms Quote Literal  ⁞   Ex: Sorted Table ⇒ \"#Sorted Table\"\n\nDoes not escape inner quotes",
    //     "body": [
    //         "#\"${1:$TM_SELECTED_TEXT}\"${0}",
    //     ],
    // },
    /*
    see ref:
        https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables
        */
    "special: multiline strings": {
        "prefix": "multilineString Literal",
        "description": "multiline string expressions",
        "body": [
            "Code = Text.Combine({",
            "   \"${1:Text here}\",",
            "   \"${2:More}\"",
            "   }, \"#(cr,lf)\"),${0}",
        ]
    },
    "__ wip: PowerQuery.Add Calculated Columns": {
        // "Add Custom Column": {
        // "scope": "powerquery,ruby",
        "prefix": "wip0 Add Column 0",
        "description": "...iter",
        "body": [
            "${4:StepName} = Table.AddColumn(",
            "   ${2:TableName},",
            "    \"${3:ColumnName}\",",
            "    each ${0:$TM_SELECTED_TEXT}",
            "    ${1|type text,Int64.Type,type any|}",
            // "    ${4|type any|type record|type table| type list|}",
            "),",
            "more vars: ",
            "\n\nWord:  $TM_CURRENT_WORD ",
            "\n\nLine:  $TM_CURRENT_LINE",
            "\n\nClip:  $CLIPBOARD ",
            "\n\nClip:  $TM_CURRENT_LINE",
            "\n\nClip:  $TM_CURRENT_LINE",
        ],
        // "    ${4:type any|type record|type table| type list}",
        // more vars
    },
    "Let | Inner expression": {
        "prefix": "Let Tiny",
        "description": "Selected as a let expression",
        "body": [
            " let ${1:x} = ${2:$TM_SELECTED_TEXT} in ${1:x}${0} " // #iter0
            // "let ${1:x} = ${2:$TM_SELECTED_TEXT} in ${1:x},${0}" // #iter0
            // "#\"(nl,cr)\"${0}",
        ],
    },
    "Constant.Text | Insert Newline literal": {
        "prefix": "Newline escaped",
        "description": "Inserts Newline Literal  ⁞   ",
        "body": [
            "#\"(nl,cr)\"${0}",
        ],
    },
    "Template | Empty Measure Table": {
        "prefix": "Measure Table",
        "description": "Creates an empty table to hold Measures",
        "body": [
            "let",
            "    MeasureTable = #table(type table[MeasureName_ = text], {})",
            "in",
            "    MeasureTable",
        ],
    },
    "Summary | Records Table | template": {
        "prefix": "Summary Template",
        "description": "converts list of records to a quick summary table",
        "body": [
            // "Summary = Table.FromRecords({ Record.Combine({",
            "Table.FromRecords({ Record.Combine({", //or if no prefix
            "    [ ${1:A = 0} ],",
            "    [ ${2:A = 4} ],",
            "    [ ${0:B = 2} ]",
            "})})",
        ],
    },
    "Table.Join | Table Inner Join": {
        "prefix": "Table [inner] join",
        "description": "Table.Join for inner (or other)",
        "body": [
            "joined = Table.Join(",
            "    ${1:sourceLeft}, \"${2:LeftKey}\",",
            "    ${3:sourceRight}, \"${4:Unit Id}\",",
            "    ${5:JoinKind.Inner}${0},  // joinKind: optional nullable number",
            "    null,            // joinAlgorithm: nullable number",
            "    null             // keyEqualityComparers: optional nullable list",
            ")",
        ],
    },
    "Web.Contents | Basic HTTP Request": {
        "prefix": "Web Request",
        "description": "Web  ⁞ A basic HTTP Request",
        "body": [
            "webResponse = ",
            "    let",
            "        Headers = [",
            "            Accept=\"application/json\"",
            "        ],",
            "        BaseUrl = \"${1:https://httpbin.org}\",",
            "        Options = [",
            "            RelativePath = \"${2:/get}\",",
            "            Headers = Headers,",
            "            Query = [",
            "                ${3:ArgName = Value}",
            "            ]",
            "        ],",
            "        // wrap 'Response' in 'Binary.Buffer' if you are using it multiple times",
            "        Response = Web.Contents(BaseUrl, Options),",
            "        Result = Json.Document(Response)",
            "    in",
            "        Result${0}",
        ],
    },
    "Web.Contents | Advanced HTTP Request": {
        "prefix": "Web Request Advanced",
        "description": "Web  ⁞ A HTTP Request with all options",
        "body": [
            "/*",
            "Handle authentication by passing an API token either through another query parameter called APIToken or via an HTTP header also called APIToken",
            "",
            "Header Key name used when saving API key in the credential store instead of power query",
            "see more: <https://gist.github.com/ninmonkey/aab7ceddc3addd3c24c0d27ed976a785#preventing-errors-refreshing-on-the-live-service> , and <https://docs.microsoft.com/en-us/powerquery-m/web-contents#syntax>",
            "*/",
            "webResponse = ",
            "    let",
            "        Headers = [",
            "            Accept =\"application/json\"",
            "            // APIToken = \"...\"",
            "            // #\"Authorization\" = accessToken",
            "        ],",
            "        BaseUrl = \"https://httpbin.org\",",
            "        Query = [",
            "            ArgName = Value",
            "        ],",
            "        Options = [",
            "            Query = Query,",
            "            //ApiKeyName = \"apikey\", // enables credential store",
            "            RelativePath = \"/get\",",
            "            Headers = Headers",
            "            // Timeout = 100, // using seconds",
            "            // IsRetry = true, // true will ignore existing response in the cache",
            "            // disable builtin handling of specific status codes",
            "            // ManualStatusHandling = {\"401\", \"404\"}",
            "",
            "            // exclude these HTTP header keys from being part of the calculation for caching data.",
            "            // ExcludedFromCacheKey = {\"header_key_num1\", ...}",
            "            ",
            "        ],",
            "        //  If key 'Content' is used: request type will be POST",
            "        // Content = \"\"",
            "",
            "        Response = Web.Contents(BaseUrl, Options),",
            "        Result = Json.Document(Response)",
            "    in",
            "        Result",
            "",
            "        ",
        ],
    },
    "Add Custom Column": {
        "prefix": "Add Column",
        "description": "Table ⁞ Add a custom column. If text is selected that becomes the inner each expression.",
        "body": [
            "${1:StepName} = Table.AddColumn(",
            "    ${2:TableName},",
            "    \"${3:ColumnName}\",",
            // "    each ${0:$TM_SELECTED_TEXT}",
            "    each ${0}",
            "    ${4:type any}",
            "),",
        ],
    },
    "Has Error Expression": {
        "prefix": "HasError",
        "description": "try: =>  HasError expression",
        "body": [
            "",
            "   let",
            "      maybeVal = try ${1:$TM_SELECTED_TEXT}",
            "   in",
            "      if maybeVal[HasError] then maybeVal[Error] else maybeVal[Value]${0:,}",
            "",
        ],
    },
    "Custom Function": {
        "prefix": "Function",
        "description": "Function ⁞ add a new function",
        "body": [
            "/* about:",
            "*/",
            "${1:Name} = (${2}) as ${3}  =>",
            "    let",
            "        ${4}  = ${0}",
            "",
            "    in",
            "        ${4},",
        ],
    }
}