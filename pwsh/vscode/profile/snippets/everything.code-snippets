{
    /*

    Next:

        default: convert current filepath ( relative workspace )

        ex:
            Plaster\1.1.3\Schema\PlasterManifest-v1.xsd
        so:
            https://github.com/PowerShellOrg/Plaster
            Plaster\1.1.3\Schema\PlasterManifest-v1.xsd
            /blob/master/
            https://github.com/PowerShellOrg/Plaster/blob/master/src/Schema/PlasterManifest-v1.xsd
        to:
            @(
                https://github.com/PowerShellOrg/Plaster
                /blob/master/
                minus: Plaster\1.1.3\Schema\PlasterManifest-v1.xsd
            )

        https://github.com/ninmonkey/Ninmonkey.Console/blob/master/public/ConvertTo-BitString.ps1


    */
    "Date-Iso": {
        "scope": "markdown,powerquery,swift,powershell,ps1,typescript,javascriptjson,jsonc,xml,py,python,js,cs,csx,code-workspace,code-snippets,powershell",
        "prefix": "date ISO",
        "description": "Using ISO format YYYY-MM-DD",
        "body": [
            "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE"
        ]
    },
    "md.tinydate.Date-Iso": {
        "scope": "markdown",
        "prefix": "markdown date tiny",
        "description": "inserts formatted as smaller text, Using ISO format YYYY-MM-DD",
        "body": [
            "<span style='font-size:0.55em;'>$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE</span>"
            // "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE"
        ]
    },
    "1234 Regex: Escape Backslashesüìå": {
        // "scope": "markdown,powerquery,swift,powershell,ps1,typescript,javascriptjson,jsonc,xml,py,python,js,cs,csx,code-workspace,code-snippets,powershell",
        "scope": "",
        "prefix": "escape backslash",
        "description": "Converts backslashes to forslashes, for json paths.",
        "body": [
            // "${TM_SELECTED_TEXT/(\\\\${2})/\\//gi}", // out: /
            "${TM_SELECTED_TEXT/cat}", // out: /
        ]
    },
    "File.CurrentFilename": {
        "scope": "markdown,powerquery,swift,powershell,ps1,typescript,javascriptjson,jsonc,xml,py,python,js,cs,csx,code-workspace,code-snippets",
        "prefix": "[meta].Cur ‚îê Current File ",
        "description": "Current $File.Name",
        "body": [
            "$TM_FILENAME"
        ],
    },
    "[meta] Dynamic: Filename Dump": {
        "prefix": "[meta].Dump ‚îê Filename Dump",
        "description": "get current filename and transform it",
        "body": [
            "\n\n<-- start:",
            "\nFullName:",
            "\t${TM_FILEPATH}",
            "Directory: FullName:",
            "\t${TM_FILEPATH/(.*)\\..+$/$1/}",
            "\nFilename:\n\t$TM_FILENAME",
            "\nBaseName:\n\t$TM_FILENAME_BASE",
            "\nEnd -->\n",
        ]
    },
    // sample snippet using UUID and RELATIVE_FILEPATH
    "[meta] relative Path + new-guid() - iter0": {
        "prefix": "[meta].Guid() ; filepath unique name",
        "description": "Inserts relativepath with a new GUID()",
        "body": "${RELATIVE_FILEPATH}/${UUID}$0"
    },
    "[meta] relative Path + new-guid() - iter1": {
        // "scope": "powershell,ps1",
        "prefix": "guid filepath",
        "description": "üìö bookmark, Inserts filepath logging func /w relativepath with a new GUID()",
        "body": "\"üìö ${1:enter} ==> ${2:other ==>}  ${RELATIVE_FILEPATH}/${UUID}\" | write-warning$0"
        /*
        '==>.üìö: root ==>  build\lamb-pwsh-runtime\function\examplehandler.ps1/684bbcbd-54d4-49b7-97d8-c43c185a0df8' | Write-Host
        */
    }
}