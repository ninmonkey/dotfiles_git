{
    /*
    New: Snippet variables

        https://code.visualstudio.com/updates/v1_53#_new-snippet-variables

        docs:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets
        regex transform:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_transform-examples
        extension snippets tutorial:
            https://code.visualstudio.com/api/language-extensions/snippet-guide
        vscode variables:
            https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables

    additional examples:
        https://rkeithhill.wordpress.com/2016/02/17/creating-a-powershell-command-that-process-paths-using-visual-studio-code/
    */
    /*
    (nin) 2023-04-03
    */
    "nin: PipescriptCodefence block": {
        "prefix": "PipeFence: codeblock with nested PipeScript codeblock ⁞ [Supports Selected Text] ⁞ nin", // this is the big text on preview
        "description": "nin🐒 ⁞ PipeFence Wraps selected text in a codeblock", // smaller text on preview
        "body": [
            // "", // NL required for markdown to render right
            "```${1:ps1}",
            "~~~pipescript{",
            "${TM_SELECTED_TEXT}",
            "}~~~",
            "```",
            "$0"
        ],
        /*

Ex1: Input:

    $rules = PSScriptAnalyzer\Get-ScriptAnalyzerRule
    $rules | group SourceName | ft

Ex1: Output:

    ```ps1
    ~~~pipescript{
    $rules = PSScriptAnalyzer\Get-ScriptAnalyzerRule
    $rules | group SourceName | ft
    }~~~
    ```

        */
    },
    /*
    (nin) 2023-04-03
    */
    "nin: Pipescript block": {
        "prefix": "PipeScript ⁞ [Supports Selected Text] ⁞ nin", // this is the big text on preview
        "description": "nin🐒 ⁞ pipescript Wraps selected text as PipescriptBlockk", // smaller text on preview
        "body": [
            // "", // NL required for markdown to render right
            "~~~pipescript{",
            "${TM_SELECTED_TEXT}",
            "}~~~",
            "${0}"
        ],
        /*

Ex1: Input:

    $rules = PSScriptAnalyzer\Get-ScriptAnalyzerRule
    $rules | group SourceName | ft

Ex1: Output:

    ~~~pipescript{
    $rules = PSScriptAnalyzer\Get-ScriptAnalyzerRule
    $rules | group SourceName | ft
    }~~~

        */
    },
    /*
    Markdown Snippets (nin) 2022-01-22
    */
    "Markdown Filepath -> Map spaces to %20 for filepath urls": {
        "prefix": "md. Spaces to Escape ⁞ template nin🐒",
        "description": "fixes urls with spaces in them",
        "body": [
            "${TM_SELECTED_TEXT/ /%20/g}",
        ],
        /*
        output:

        */
    },
    /*
    Markdown Snippets (nin) 2022-01-22
    */
    "Markdown Filepath -> Undo spaces to %20 for filepath urls": {
        "prefix": "md.undo Spaces to Escape ⁞ template nin🐒",
        "description": "🔴🚧Not yet working ' ' from '%20'",
        "body": [
            "${TM_SELECTED_TEXT/%20\\ /_/g}",
        ],
        /*
        output:

        */
    },
    /*
    Markdown Snippets (nin) 2022-01-22
    */
    "EmptyFile -> Readme": {
        "prefix": "read/me.md ⁞ template nin🐒",
        "prefix": "readme.md ⁞ template nin🐒",
        "description": "empty markdown files, needs improvement",
        "body": [
            "[Back ↑](..)",
            "$TM",
            "${1:another ${2:placeholder}}",
            "## ${0}",
        ],
        /*
        output:

        */
    },
    /*
    Markdown Snippets (nin) 2022-01-22
    */
    "HTML Table": {
        "prefix": "table Html ⁞ nin",
        "description": "nin🐒 ⁞ raw inline HTML tables",
        "body": [
            "",
            "<table>",
            "    <tr>",
            "        <th>${1:col1}</th>",
            "        <th>${2:col2}</th>",
            "    </tr>",
            "    <tr>",
            "        <td>${1:col1}</td>",
            "        <td>${2:col2}</td>",
            "    </tr>",
            "",
            "</table>$0",
            "",
        ],
        /*
        output:

        */
    },
    "HTMLPair  Row Markdown": {
        "prefix": "pairs row mdTable Html ⁞ nin",
        "description": "pairs nin🐒 ⁞ mdTable row Html Table. no-indentation because md prefers",
        "body": [
            "",
            "<tr>", // *maybe* insert comments too?
            "<td>${1:Key}</td>",
            "<td>${2:Value}</td>",
            "</tr>",
            "",
            "",
            "$0",
        ],
        /*
        output:

        */
    },
    /*
    Markdown Snippets (nin) 2021-06-20
    */
    "HTML Comment section": {
        "prefix": "Comment ⁞ HTML ⁞ nin",
        "description": "nin🐒 ⁞ Enclose Selection in an HTML comment",
        "body": [
            /* extra, and missing, newlines were specifically chosen to:
                - make embedded code-fences render correctly, and
                - to make 'summary' start on the line with the arrow
            */
            "<!--",
            "   ${1:${TM_SELECTED_TEXT}}",
            "-->${0}",
        ],
        /*
        example input:
            ```ps1
            🐒> ls .
            | Sort LastWriteTime
            | % FullName
            ```

        output:
            <details><summary>Summary (Click to Expand)

            </summary>

            ```ps1
            🐒> ls .
            | Sort LastWriteTime
            | % FullName
            ```

            </details>

        */
    },
    /*
    Markdown Snippets (nin) 2021-04-15
    */
    "Github Issue: Collapsible Details": {
        "prefix": "Collapsible Details Section ⁞ [Supports Selected Text] ⁞ nin",
        "description": "nin🐒 ⁞ Collapsible Details and Summary Section",
        "body": [
            /* extra, and missing, newlines were specifically chosen to:
                - make embedded code-fences render correctly, and
                - to make 'summary' start on the line with the arrow
            */
            "<details><summary>${1:Summary} (Click to Expand)",
            "",
            "</summary>",
            "",
            "${0:$TM_SELECTED_TEXT}",
            "",
            "</details>",
            ""
        ],
        /*
        example input:
            ```ps1
            🐒> ls .
            | Sort LastWriteTime
            | % FullName
            ```

        output:
            <details><summary>Summary (Click to Expand)

            </summary>

            ```ps1
            🐒> ls .
            | Sort LastWriteTime
            | % FullName
            ```

            </details>

        */
    },
    // "broken: example: nin: Links To Markdown": {
    //     "prefix": "qqExample: Url ⇢ Markdown",
    //     "description": "nin🐒 ⁞ Wraps selected url in markdown syntax",
    //     "body": [
    //         "[${$2${TM_SELECTED_TEXT}](${TM_SELECTED_TEXT})" //default value
    //         "[${$2$TM_SELECTED_TEXT]($TM_SELECTED_TEXT)" //default value
    //     ],
    // },
    "nin: Unicode Separators": {
        /*
        I have more saved at: <https://gist.github.com/ninmonkey/ab7291f150a60310c2185796859c4ada>
        */
        "prefix": "Uni Separators ⇢ Markdown",
        "description": "nin🐒 ⁞ Separators / Delimiters / Labels ",
        "body": [
            ",T—⁞→⇠⇡⇢⇣⇽⇾┆┐⚙➟⭪⭫⭬⭭⸺⸻️🌎🌐🎨🏃🐌🐒🐛🐢👍💡💻📋📌📹🔑🔥🕷🕹🖥🚀",
            "⇢⁞ ⁞ ┐⇽⇾— ⚙️💡🏃🐢🐌 ⇠⇡⇢⇣🚀📋⇢⇢T ⇢ 📌→🎨🐒🐛💻👍🕹️🌎🌐⁞┐➟⇽⇾—⁞⚙️💡📋📹🔑🔥⁞,┐⇽🕷️🕹️🖥️⇽⭪,⭫,⭬,⭭,⸺,⸻┐┆",
            "todo: make select-box so they aren't so many",
            "T——⁞⁞⁞→⇠⇡⇢⇢⇢⇢⇢⇣⇽⇽⇽⇾⇾┆┐┐┐⚙⚙➟⭪⭫⭬⭭⸺⸻️️️️️️🌎🌐🎨🏃🐌🐒🐛🐢👍💡💡💻📋📋📌📹🔑🔥🕷🕹🕹🖥🚀",
            // ‒ – — ⁓ → ⇠ ⇡ ⇢ ⇣ ⊝ ⑈ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┐ ╌ ╍ ╎ ╏ ➟ ➠ ⤌ ⤍ ⤎ ⤏ ⤐ ⥪ ⥫ ⥬ ⥭ ⩜ ⩝ ⫘ ⫦ ⬷ ⭪ ⭫ ⭬ ⭭ ⸺ ⸻ ⹃ 〜 〰 ︱ ︲ ﹉ ﹍ ﹘ 𝄄 💨
            //  ⭪ ⭫ ⭬ ⭭ ⸺ ⸻ ⹃ 〜 〰 ︱ ︲ ﹉ ﹍ ﹘ 𝄄
        ],
    },
    "dsfds": {
        "prefix": "dbg choice",
        "description": "debug choice",
        "body": [
            "${1: ${TM_SELECTED_TEXT:$CLIPBOARD}}",
        ]
    },
    "nin: Links From Clipboard To Markdown. iter1": {
        "prefix": "mdlink Paste Clipboard Copy a Url ⇢ Markdown",
        "description": "Copies your clipboard to create a new markdown link 🐒 ⁞ Could merge with 'nin: Links To Markdown' -- if no selection then use clipboard",
        "body": [
            // "[${1:$CLIPBOARD}](${2:$CLIPBOARD})", // Works:iter0
            "[${1:$CLIPBOARD}](${2:$CLIPBOARD})", // Works:iter1
            // "[${1:${$TM_SELECTED_TEXT:noSel}](${2:${$TM_SELECTED_TEXT:noSel}})", // Broke:iter1
        ]
    },
    "nin: Links To Markdown": {
        "prefix": "link Url ⇢ Markdown",
        "description": "Links 🐒 ⁞ Wraps selected url in markdown syntax. Good for when a raw url exists / is bare, without a label. ⁞ Could merge with 'nin: Links To Markdown' -- if no selection then use clipboard",
        /*
        input:
            using selection: https://code.visualstudio.com/docs/editor/userdefinedsnippets
            then typed 'tutorial'

        output:
            [tutorial](https://code.visualstudio.com/docs/editor/userdefinedsnippets)

        */
        "body": [
            "[${1:Label}](${2:$TM_SELECTED_TEXT})"
            // "[${$2$TM_SELECTED_TEXT]($TM_SELECTED_TEXT)" //default value
            // "[${1:PropertyName}]($TM_SELECTED_TEXT)" # default value
            // "@{name='${1:PropertyName}';expression={${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}}}$0"
        ],
    },
    // "nin: Advanced Links To Markdown": {
    //     "prefix": "z",
    //     "isFileTemplate": true,
    //     "description": "Links with Suggested names based on url. nin🐒 ⁞ Works better using  multipole cursors verses the basic one. Wraps selected url in markdown syntax  ; supports: multi",
    /*
        input:
'

        output:


        */
    // "body": [
    // "${TM_SELECTED_TEXT/(.*s\\\\/)(.*)/$1 = $2/}" // # example workign regex
    // "${TM_SELECTED_TEXT/(.*s\\\\\\\\/)(.*)/$0 = $1 = $2 = $4/}" // # example workign regex
    // "${TM_SELECTED_TEXT/.*s(.*)/\n0 = $0\n1 = $1\n2 = $2\n3 = $3/}" // # example workign regex
    // "${TM_SELECTED_TEXT/(.*s)(.*)/$1 = $2/}" // # example workign regex
    // "[${1:Label}](${2:$TM_SELECTED_TEXT})"
    // "[${$2$TM_SELECTED_TEXT]($TM_SELECTED_TEXT)" //default value
    // "[${1:PropertyName}]($TM_SELECTED_TEXT)" # default value
    // "@{name='${1:PropertyName}';expression={${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}}}$0"
    //     ],
    // },
    // "[${1:PropertyName}]($TM_SELECTED_TEXT)" # default value
    // // "[${1:PropertyName}]($TM_SELECTED_TEXT)" # default value
    // // "@{name='${1:PropertyName}';expression={${2:${TM_SELECTED_TEXT:\\$_.PropertyValue}}}}$0"
    // "[${1:$TM_SELECTED_TEXT}]($TM_SELECTED_TEXT)" // default value
    "nin: Codefence block": {
        "prefix": "CodeFence ⁞ [Supports Selected Text] ⁞ nin", // this is the big text on preview
        "description": "nin🐒 ⁞ Wraps selected text in a codeblock", // smaller text on preview
        "body": [
            "```${1}",
            // "", // NL required for markdown to render right
            "${TM_SELECTED_TEXT}",
            "```",
            "${0}"
        ],
        /*
        example input:
            def foo():
                return 10


        output:
           ```py
            def foo():
                return 10
            ```


        */
    },
}